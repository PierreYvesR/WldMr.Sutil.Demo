{"version":3,"file":"app.817c40462c6c923f81b7.js","mappings":"UAAIA,E,kGCIAC,EAA0B,IAA4B,KAC1DA,EAAwBC,EAAE,KAE1BD,EAAwBE,KAAK,CAACC,EAAOC,GAAI,6pTAA0qT,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,yCAAyC,6CAA6C,mDAAmD,yCAAyC,0CAA0C,wCAAwC,MAAQ,GAAG,SAAW,m3GAAm3G,eAAiB,CAAC,2wKAA2wK,0yBAA4yB,oxCAAsxC,mVAAmV,m4EAAq4E,21EAAq2E,WAAa,MAEpyzB,W,4BCLO,SAAS,EAAYC,GACxB,OAAOC,MAAMC,QAAQF,IAAMG,YAAYC,OAAOJ,GAWlD,SAASK,EAAWL,GAChB,MAAgC,mBAAlBA,EAAEM,YAKb,SAASC,EAAgBP,EAAGQ,GAC/B,OAAOC,OAAOC,eAAeV,GAAGW,cAAgBF,OAAOC,eAAeF,GAAGG,YAEtE,MAAMC,EACTD,YAAYE,GACRC,KAAKD,KAAOA,EAEhB,yDACI,OAAOC,KAAKC,QAEhB,+CACI,OAAOD,KAAKC,QAEhB,4CACI,MAAMC,EAAMF,KAAKD,KAAKI,OAEtB,OADAH,KAAKC,QAAUC,EAAIE,OACXF,EAAIG,KAEhB,yCACI,MAAM,IAAIC,MAAM,gCAEpBC,YAIG,SAAS,EAAcC,GAC1B,MAAkC,mBAApBA,EAAEC,cACVD,EAAEC,gBACF,IAAIX,EAAWU,EAAEE,OAAOC,aAE3B,SAAS,EAAWC,GACvB,MAAO,CACH,CAACF,OAAOC,YAAc,OAAOX,MAC7BG,OACI,MAAMU,EAAUD,EAAG,6CAEnB,MAAO,CAAEP,MAAOQ,EAAST,MADTS,EAAUD,EAAG,qDAAkDE,KA+DpF,SAASC,EAAajC,EAAGkC,GAC5B,IAAIC,EAAMnC,EAAEoC,SAAS,IACrB,KAAOD,EAAID,OAASA,GAChBC,EAAM,IAAMA,EAEhB,OAAOA,EAYJ,SAAS,EAAWE,GACvB,MAAMC,EAAQD,EACd,MAA+B,iBAAjBC,EAAMC,OACdD,EAAMC,OACS,IAAdF,EAAKG,KACF,GAAgC,IAA5BH,EAAKI,oBAMhB,SAAS,EAAczC,EAAG0C,GAE7B,OADA1C,EAAIA,EAAI,GAAc,MAAT0C,GAA2B,KAAVA,EAAe,WAAa1C,EAAI,EAAIA,GACzDoC,SAASM,GAEf,MAAMC,EACTC,UAAUlB,GAIN,OAHKiB,EAAUE,MAAMC,IAAIpB,IACrBiB,EAAUE,MAAME,IAAIrB,IAAKiB,EAAUK,OAEhCL,EAAUE,MAAMI,IAAIvB,IAc5B,SAASwB,EAAW9C,GACvB,OAAW,WAAJA,EAAiB,EAGrB,SAAS+C,EAAiBC,GAC7B,OAAsB,IAAlBA,EAAOlB,OACA,EAEJkB,EAAOC,QAAO,CAACC,EAAIC,KACbD,GAAM,GAAKA,EAAMC,IAwC3B,SAAS,EAAenD,GAC3B,GAAS,MAALA,EACA,OAAO,EAEX,cAAeA,GACX,IAAK,UACD,OAAOA,EAAI,EAAI,EACnB,IAAK,SACD,OAAO8C,EAAW9C,GACtB,IAAK,SACD,OApEL,SAAoBoD,GACvB,IAAIxD,EAAI,EACJyD,EAAI,KACR,MAAMC,EAAMF,EAAEtB,OACd,KAAOlC,EAAI0D,GACPD,EAAS,GAAJA,EAAUD,EAAEG,WAAW3D,KAEhC,OAAOyD,EA6DQ,CAAWrD,GACtB,QACI,OAAIK,EAAWL,GACJA,EAAEM,cAEJ,EAAYN,GAvB1B,SAAmBA,GACtB,MAAMsD,EAAMtD,EAAE8B,OACRkB,EAAS,IAAI/C,MAAMqD,GACzB,IAAK,IAAI1D,EAAI,EAAGA,EAAI0D,EAAK1D,IACrBoD,EAAOpD,GAAK,EAAeI,EAAEJ,IAEjC,OAAOmD,EAAiBC,GAkBLQ,CAAUxD,GAEZA,aAAayD,KA7B3B,SAAkBzD,GACrB,OAAOA,EAAE0D,UA6BUC,CAAS3D,GAEXS,OAAOC,eAAeV,GAAGW,cAAgBF,OAGvCsC,EADQtC,OAAOmD,OAAO5D,GAAG6D,KAAKC,GAAM,EAAeA,MAKnDhB,EAAWP,EAAUxC,GAAGC,KAWxC,SAAS,EAASA,GACrB,OAAY,MAALA,EAAY,EAAIK,EAAWL,GAAKA,EAAEM,cAAgBwC,EAAWP,EAAUxC,GAAGC,IAmB9E,SAAS+D,EAAY/D,EAAGQ,GAC3B,OAlBG,SAAyBR,EAAGQ,EAAGwD,GAClC,GAAS,MAALhE,EACA,OAAY,MAALQ,EAEX,GAAS,MAALA,EACA,OAAO,EAEX,GAAIR,EAAE8B,SAAWtB,EAAEsB,OACf,OAAO,EAEX,IAAK,IAAIlC,EAAI,EAAGA,EAAII,EAAE8B,OAAQlC,IAC1B,IAAKoE,EAAGhE,EAAEJ,GAAIY,EAAEZ,IACZ,OAAO,EAGf,OAAO,EAGAqE,CAAgBjE,EAAGQ,EAAG,GAiB1B,SAAS,EAAOR,EAAGQ,GACtB,OAAIR,IAAMQ,IAGI,MAALR,EACO,MAALQ,EAEG,MAALA,GAGa,iBAANR,IAtSpB,SAAqBA,GACjB,MAA2B,mBAAbA,EAAEkE,OAwSPC,CAAYnE,GACVA,EAAEkE,OAAO1D,GAEX,EAAYR,GACV,EAAYQ,IAAMuD,EAAY/D,EAAGQ,GAEnCR,aAAayD,KACVjD,aAAaiD,MAAgC,IAAvB,EAAazD,EAAGQ,GAGvCC,OAAOC,eAAeV,GAAGW,cAAgBF,QAtCxD,SAAsBT,EAAGQ,GACrB,MAAM4D,EAAQ3D,OAAO4D,KAAKrE,GACpBsE,EAAQ7D,OAAO4D,KAAK7D,GAC1B,GAAI4D,EAAMtC,SAAWwC,EAAMxC,OACvB,OAAO,EAEXsC,EAAMG,OACND,EAAMC,OACN,IAAK,IAAI3E,EAAI,EAAGA,EAAIwE,EAAMtC,OAAQlC,IAC9B,GAAIwE,EAAMxE,KAAO0E,EAAM1E,KAAO,EAAOI,EAAEoE,EAAMxE,IAAKY,EAAE8D,EAAM1E,KACtD,OAAO,EAGf,OAAO,EAyBuD4E,CAAaxE,EAAGQ,KAG3E,SAAS,EAAaR,EAAGQ,GAC5B,IAAIiE,EACAC,EAUJ,MARI,WAAY1E,GAAK,WAAYQ,GAC7BiE,EAAQzE,EAAE0D,UACVgB,EAAQlE,EAAEkD,YAGVe,EAAQzE,EAAE0D,UAAY,EAAW1D,GACjC0E,EAAQlE,EAAEkD,UAAY,EAAWlD,IAE9BiE,IAAUC,EAAQ,EAAKD,EAAQC,GAAS,EAAI,EAEhD,SAAS,EAAkB1E,EAAGQ,GACjC,OAAOR,IAAMQ,EAAI,EAAKR,EAAIQ,GAAK,EAAI,EAoBhC,SAASmE,EAAc3E,EAAGQ,GAC7B,OAnBG,SAA2BR,EAAGQ,EAAGoE,GACpC,GAAS,MAAL5E,EACA,OAAY,MAALQ,EAAY,EAAI,EAE3B,GAAS,MAALA,EACA,OAAQ,EAEZ,GAAIR,EAAE8B,SAAWtB,EAAEsB,OACf,OAAO9B,EAAE8B,OAAStB,EAAEsB,QAAU,EAAI,EAEtC,IAAK,IAAIlC,EAAI,EAAGiF,EAAI,EAAGjF,EAAII,EAAE8B,OAAQlC,IAEjC,GADAiF,EAAID,EAAK5E,EAAEJ,GAAIY,EAAEZ,IACP,IAANiF,EACA,OAAOA,EAGf,OAAO,EAGAC,CAAkB9E,EAAGQ,EAAGuE,GAwB5B,SAASA,EAAQ/E,EAAGQ,GACvB,OAAIR,IAAMQ,EACC,EAEG,MAALR,EACO,MAALQ,EAAY,GAAK,EAEd,MAALA,EACE,EAEW,iBAANR,EACLA,EAAIQ,GAAK,EAAI,EAhY5B,SAAsBR,GAClB,MAA8B,mBAAhBA,EAAEgF,UAiYPC,CAAajF,GACXA,EAAEgF,UAAUxE,GAEd,EAAYR,GACV,EAAYQ,GAAKmE,EAAc3E,EAAGQ,IAAM,EAE1CR,aAAayD,KACXjD,aAAaiD,KAAO,EAAazD,EAAGQ,IAAM,EAG1CC,OAAOC,eAAeV,GAAGW,cAAgBF,OA7CxD,SAAwBT,EAAGQ,GACvB,MAAM4D,EAAQ3D,OAAO4D,KAAKrE,GACpBsE,EAAQ7D,OAAO4D,KAAK7D,GAC1B,GAAI4D,EAAMtC,SAAWwC,EAAMxC,OACvB,OAAOsC,EAAMtC,OAASwC,EAAMxC,QAAU,EAAI,EAE9CsC,EAAMG,OACND,EAAMC,OACN,IAAK,IAAI3E,EAAI,EAAGiF,EAAI,EAAGjF,EAAIwE,EAAMtC,OAAQlC,IAAK,CAC1C,MAAMsF,EAAMd,EAAMxE,GAClB,GAAIsF,IAAQZ,EAAM1E,GACd,OAAOsF,EAAMZ,EAAM1E,IAAM,EAAI,EAI7B,GADAiF,EAAIE,EAAQ/E,EAAEkF,GAAM1E,EAAE0E,IACZ,IAANL,EACA,OAAOA,EAInB,OAAO,EAyBsDM,CAAenF,EAAGQ,IAAM,EAYlF,SAAS4E,EAAWlE,GACvB,IAAImE,EAAOnE,EACX,MAAO,CAACA,EAAOoE,IACNA,OAIDD,EAAOnE,GAHAmE,EAQZ,SAASE,EAAUC,GACtB,MAAMC,EAAM,GACZ,IAAK,MAAMC,KAAMF,EACbC,EAAIC,EAAG,IAAMA,EAAG,GAEpB,OAAOD,EAEJ,SAASE,EAAUC,GACtB,MAAMC,EAAO,GAEb,OADAD,EAAQC,GACDA,EAxRXtD,EAAUE,MAAQ,IAAIqD,QACtBvD,EAAUK,MAAQ,EA6VlB,MAAMmD,EAAUvE,OAAO,WAgBvB,SAASwE,EAAOC,EAAMC,EAAOC,GACzB,OAAQC,GAAkB,IAAVF,EACVC,KAAKF,EAAKI,OAAO,CAACD,KAGlBJ,EAAOC,EAAKI,OAAO,CAACD,IAAOF,EAAQ,EAAGC,GChgBzC,SAAS,EAASnG,EAAGsG,EAAY,GACpC,GAAS,MAALtG,GAA0B,iBAANA,EAAgB,CACpC,GAA0B,mBAAfA,EAAEgC,SACT,OAAOhC,EAAEgC,WAER,GAAIR,OAAOC,YAAYzB,EACxB,OAxBL,SAAqBuG,GACxB,IAAI3D,EAAQ,EACRb,EAAM,IACV,IAAK,MAAM/B,KAAKuG,EAAM,CAClB,GAAc,IAAV3D,EACAb,GAAO,EAAS/B,OAEf,IAAc,MAAV4C,EAAe,CACpBb,GAAO,QACP,MAGAA,GAAO,KAAO,EAAS/B,GAE3B4C,IAEJ,OAAOb,EAAM,IAQEyE,CAAYxG,GAElB,CACD,MAAMyG,EAAOhG,OAAOC,eAAeV,GAAGW,YACtC,OAAO8F,IAAShG,QAAU6F,EAAY,GAEhC,KAAO7F,OAAOiG,QAAQ1G,GAAG6D,KAAI,EAAE8C,EAAG7C,KAAO6C,EAAI,MAAQ,EAAS7C,EAAGwC,EAAY,KAAIM,KAAK,QAAU,KAChGH,EAAKI,MAGnB,OAAOC,OAAO9G,GAmBX,MAAM,EACL6G,WACA,OAAO/F,KAAKiG,QAAQjG,KAAKkG,KAE7BC,SACI,OAA8B,IAAvBnG,KAAK0E,OAAO1D,OAAehB,KAAK+F,KAAO,CAAC/F,KAAK+F,MAAMR,OAAOvF,KAAK0E,QAE1ExD,WACI,OAzBD,SAAuB6E,EAAMrB,GAChC,GAAsB,IAAlBA,EAAO1D,OACP,OAAO+E,EAEN,CACD,IAAIK,EAAW,GACXC,GAAa,EAQjB,OAPsB,IAAlB3B,EAAO1D,QACPoF,EAAW,EAAS1B,EAAO,IAC3B2B,EAAaD,EAASE,QAAQ,MAAQ,GAGtCF,EAAW1B,EAAO3B,KAAK7D,GAAM,EAASA,KAAI4G,KAAK,MAE5CC,GAAQM,EAAa,KAAO,KAAOD,GAAYC,EAAa,IAAM,KAWlEE,CAAcvG,KAAK+F,KAAM/F,KAAK0E,QAEzClF,cACI,MAAM0C,EAASlC,KAAK0E,OAAO3B,KAAK7D,GAAM,EAAeA,KAErD,OADAgD,EAAOsE,OAAO,EAAG,EAAGxE,EAAWhC,KAAKkG,MAC7BjE,EAAiBC,GAE5BkB,OAAOqD,GACH,OAAIzG,OAASyG,KAGHhH,EAAgBO,KAAMyG,IAGvBzG,KAAKkG,MAAQO,EAAMP,KACjBjD,EAAYjD,KAAK0E,OAAQ+B,EAAM/B,QAM9CR,UAAUuC,GACN,OAAIzG,OAASyG,EACF,EAEDhH,EAAgBO,KAAMyG,GAGvBzG,KAAKkG,MAAQO,EAAMP,IACjBrC,EAAc7D,KAAK0E,OAAQ+B,EAAM/B,QAGjC1E,KAAKkG,IAAMO,EAAMP,KAAO,EAAI,GAN3B,GA4Db,MAAM,EACTC,SAAW,OAnDf,SAAsBV,GAClB,MAAMjF,EAAI,GACJ+C,EAAO5D,OAAO4D,KAAKkC,GACzB,IAAK,IAAI3G,EAAI,EAAGA,EAAIyE,EAAKvC,OAAQlC,IAC7B0B,EAAE+C,EAAKzE,IAAM2G,EAAKlC,EAAKzE,IAE3B,OAAO0B,EA6CWkG,CAAa1G,MAC/BkB,WAAa,OA5CjB,SAAwBuE,GACpB,MAAO,KAAO9F,OAAOiG,QAAQH,GAAM1C,KAAI,EAAE8C,EAAG7C,KAAO6C,EAAI,MAAQ,EAAS7C,KAAI8C,KAAK,QAAU,KA2CvEa,CAAe3G,MACnCR,cAAgB,OA1CpB,SAA2BiG,GAEvB,OAAOxD,EADQtC,OAAOmD,OAAO2C,GAAM1C,KAAKC,GAAM,EAAeA,MAyCtC4D,CAAkB5G,MACzCoD,OAAOqD,GAAS,OAvCpB,SAAsBhB,EAAMgB,GACxB,GAAIhB,IAASgB,EACT,OAAO,EAEN,GAAKhH,EAAgBgG,EAAMgB,GAG3B,CACD,MAAMI,EAAYlH,OAAO4D,KAAKkC,GAC9B,IAAK,IAAI3G,EAAI,EAAGA,EAAI+H,EAAU7F,OAAQlC,IAClC,IAAK,EAAO2G,EAAKoB,EAAU/H,IAAK2H,EAAMI,EAAU/H,KAC5C,OAAO,EAGf,OAAO,EATP,OAAO,EAkCYgI,CAAa9G,KAAMyG,GAC1CvC,UAAUuC,GAAS,OAvBvB,SAAyBhB,EAAMgB,GAC3B,GAAIhB,IAASgB,EACT,OAAO,EAEN,GAAKhH,EAAgBgG,EAAMgB,GAG3B,CACD,MAAMI,EAAYlH,OAAO4D,KAAKkC,GAC9B,IAAK,IAAI3G,EAAI,EAAGA,EAAI+H,EAAU7F,OAAQlC,IAAK,CACvC,MAAMiI,EAAS9C,EAAQwB,EAAKoB,EAAU/H,IAAK2H,EAAMI,EAAU/H,KAC3D,GAAe,IAAXiI,EACA,OAAOA,EAGf,OAAO,EAVP,OAAQ,EAkBcC,CAAgBhH,KAAMyG,IAE7C,MAAMQ,EACTpH,YAAYqH,EAAkBC,GACJ,mBAAXA,GACPnH,KAAKoH,OAASF,EACdlH,KAAKmH,OAASA,IAGdnH,KAAKoH,OAAS,IAAMF,EACpBlH,KAAKmH,OAAUnE,IAAQkE,EAAmBlE,IAG9CqE,eACA,OAAOrH,KAAKoH,SAEZC,aAASrE,GACThD,KAAKmH,OAAOnE,IC1Kb,MAAMsE,EAAS5G,OAAO,WACtB,SAAS6G,EAAUrI,GACtB,MAAoB,iBAANA,IAAmBA,MAAAA,OAA6B,EAASA,EAAEoI,IAUtE,SAASE,EAAStI,EAAGQ,GACxB,MAAiB,iBAANR,EACAA,EAAIQ,EAGJR,EAAEoI,KAAUE,SAAS9H,GAG7B,SAAS+H,EAAQvI,EAAGwI,GACvB,MAAiB,iBAANxI,EACAA,EAAEuI,QAAQC,GAGVxI,EAAEoI,KAAUG,QAAQC,GAG5B,SAASC,EAAYzI,EAAG0I,GAC3B,MAAiB,iBAAN1I,EACAA,EAAEyI,YAAYC,GAGd1I,EAAEoI,KAAUK,YAAYC,GAGhC,SAASC,EAAc3I,EAAGwI,GAC7B,MAAiB,iBAANxI,EACAA,EAAE2I,cAAcH,GAGhBxI,EAAEoI,KAAUO,cAAcH,GAGlC,SAASI,EAAM5I,GAClB,MAAiB,iBAANA,GACC6I,OAAO7I,KAAO,GAAGgC,SAAS,IAG3BhC,EAAEoI,KAAUQ,QC1C3B,IAAIE,EAAO,KACX,IACIA,EAAO,IAAIC,YAAYC,SAAS,IAAID,YAAYE,OAAO,IAAIC,WAAW,CAClE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,E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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///./src/App/styles/main.scss","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Util.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Types.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Numeric.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/lib/long.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Long.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Date.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/RegExp.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/String.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Option.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Array.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/List.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Global.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Types.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/MapUtil.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Logging.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Helpers.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Seq.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/FSharp.Core.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Interop.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/DOM.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Observable.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/ObservableStore.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Program.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Observable.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Store.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Int32.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/ResizeObserver.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/MutableSet.js","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Map.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Bindings.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/FSharp.Collections.js","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Transition.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Event.js","webpack:///./src/App/build/fable_modules/Feliz.Engine.1.0.0-beta-004/HtmlEngine.fs","webpack:///./src/App/build/fable_modules/Feliz.Engine.1.0.0-beta-004/AttrEngine.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Attr.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/Html.fs","webpack:///./src/App/SutilExt.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Timer.js","webpack:///./src/App/build/fable_modules/Feliz.Engine.Event.1.0.0-beta-004/EventEngine.fs","webpack:///./src/App/build/fable_modules/Feliz.Engine.1.0.0-beta-004/CssEngine.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Set.js","webpack:///./src/App/Libs/Hotkeys.fs","webpack:///./src/App/Libs/HotkeysJs.fs","webpack:///./src/App/build/fable_modules/Feliz.Plotly.2.1.0/Bindings.fs","webpack:///./src/App/ThemeColors.fs","webpack:///./src/App/build/fable_modules/fable-library.3.6.3/Range.js","webpack:///./src/App/Sidebar.fs","webpack:///./src/App/DemoChart.fs","webpack:///./src/App/Libs/MonacoEditor.fs","webpack:///./src/App/EditorPage.fs","webpack:///./src/App/App.fs","webpack:///./src/App/build/fable_modules/Sutil.1.0.0-beta-014/MediaQuery.fs","webpack:///./src/App/Program.fs","webpack:///./src/App/build/fable_modules/ConstructStyleSheetsPolyfill.1.0.0-beta-001/adoptedStyleSheets.js","webpack:///./src/App/styles/main.scss?80cb","webpack:///webpack/bootstrap","webpack:///webpack/runtime/amd options","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/global","webpack:///webpack/runtime/harmony module decorator","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/@vscode/codicons/dist/codicon.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media(prefers-color-scheme: dark){:root{--wm-bg0-color: rgb(20, 20, 20);--wm-bg1-color: rgb(30, 30, 30);--wm-bg2-color: rgb(38, 38, 38);--wm-bg2-5-color: rgb(41, 41, 41);--wm-bg3-color: rgb(44, 44, 44);--wm-bg4-color: rgb(55, 55, 55);--wm-bg5-color: rgb(64, 64, 64);--wm-bg5-5-color: rgb(73, 73, 73);--wm-bg6-color: rgb(82, 82, 82);--wm-bg6-4-color: rgb(88, 88, 88);--wm-bg7-color: rgb(115, 115, 115);--wm-bg7-5-color: rgb(125, 125, 125);--wm-bg8-color: rgb(134, 134, 134);--wm-bg8-5-color: rgb(142, 142, 142);--wm-bg9-color: rgb(163, 163, 163);--wm-bg10-color: rgb(212, 212, 212);--wm-bg11-color: rgb(229, 229, 229)}}.dark-theme{--wm-bg0-color: rgb(20, 20, 20);--wm-bg1-color: rgb(30, 30, 30);--wm-bg2-color: rgb(38, 38, 38);--wm-bg2-5-color: rgb(41, 41, 41);--wm-bg3-color: rgb(44, 44, 44);--wm-bg4-color: rgb(55, 55, 55);--wm-bg5-color: rgb(64, 64, 64);--wm-bg5-5-color: rgb(73, 73, 73);--wm-bg6-color: rgb(82, 82, 82);--wm-bg6-4-color: rgb(88, 88, 88);--wm-bg7-color: rgb(115, 115, 115);--wm-bg7-5-color: rgb(125, 125, 125);--wm-bg8-color: rgb(134, 134, 134);--wm-bg8-5-color: rgb(142, 142, 142);--wm-bg9-color: rgb(163, 163, 163);--wm-bg10-color: rgb(212, 212, 212);--wm-bg11-color: rgb(229, 229, 229)}@media(prefers-color-scheme: light){:root{--wm-bg0-color: rgb(240, 240, 240);--wm-bg1-color: rgb(229, 229, 229);--wm-bg2-color: rgb(219, 219, 219);--wm-bg2-5-color: rgb(215, 215, 215);--wm-bg3-color: rgb(211, 211, 211);--wm-bg4-color: rgb(195, 195, 195);--wm-bg5-color: rgb(182, 182, 182);--wm-bg5-5-color: rgb(170, 170, 170);--wm-bg6-color: rgb(158, 158, 158);--wm-bg6-4-color: rgb(150, 150, 150);--wm-bg7-color: rgb(120, 120, 120);--wm-bg7-5-color: rgb(110, 110, 110);--wm-bg8-color: rgb(102, 102, 102);--wm-bg8-5-color: rgb(95, 95, 95);--wm-bg9-color: rgb(78, 78, 78);--wm-bg10-color: rgb(43, 43, 43);--wm-bg11-color: rgb(30, 30, 30)}}.light-theme{--wm-bg0-color: rgb(240, 240, 240);--wm-bg1-color: rgb(229, 229, 229);--wm-bg2-color: rgb(219, 219, 219);--wm-bg2-5-color: rgb(215, 215, 215);--wm-bg3-color: rgb(211, 211, 211);--wm-bg4-color: rgb(195, 195, 195);--wm-bg5-color: rgb(182, 182, 182);--wm-bg5-5-color: rgb(170, 170, 170);--wm-bg6-color: rgb(158, 158, 158);--wm-bg6-4-color: rgb(150, 150, 150);--wm-bg7-color: rgb(120, 120, 120);--wm-bg7-5-color: rgb(110, 110, 110);--wm-bg8-color: rgb(102, 102, 102);--wm-bg8-5-color: rgb(95, 95, 95);--wm-bg9-color: rgb(78, 78, 78);--wm-bg10-color: rgb(43, 43, 43);--wm-bg11-color: rgb(30, 30, 30)}.editor-page{height:100%;box-sizing:border-box;padding:3px;min-height:100%;max-height:100%}.editor-page .editor-page-content{height:100%;box-sizing:border-box;display:flex;flex-direction:column;border:2px solid var(--wm-bg6-color);border-radius:6px}.editor-page .editor-page-content .editor-page-monaco-container{flex-grow:1;height:100%;overflow:hidden;padding:2px}.editor-page .editor-page-content .editor-page-separator{height:0px;border-top:2px solid var(--wm-bg6-color)}.editor-page .editor-page-content .editor-page-control-bar{display:flex;padding:4px;align-items:center;color:var(--wm-bg9-color)}.horizontal-resize{box-sizing:border-box;height:100%}.horizontal-resize>div{box-sizing:border-box;height:100%;cursor:ew-resize;border-style:solid;border-width:1px 1px 1px 1px;padding:1px 1px 1px 1px;border-radius:4px;border-color:var(--wm-bg3-color);background-color:var(--wm-bg3-color)}.horizontal-resize>div>div{box-sizing:border-box;height:100%;border-style:solid;border-width:1px 1px 1px 1px;border-radius:2px;width:100%;border-color:var(--wm-bg4-color);background-color:var(--wm-bg5-color);transition:inherit;transition-delay:inherit}.horizontal-resize>div:hover{transition:.2s;transition-delay:.2s;border-color:var(--wm-bg5-color);background-color:var(--wm-bg5-5-color)}.horizontal-resize>div:hover div{border-color:var(--wm-bg6-color);background-color:var(--wm-bg6-4-color)}.horizontal-resize>div:active{border-color:var(--wm-bg7-color);background-color:var(--wm-bg7-5-color)}.horizontal-resize>div:active div{border-color:var(--wm-bg8-color);background-color:var(--wm-bg8-5-color)}.wm-button{font-size:14px;font-family:\\\"Spartan\\\",sans-serif;border-radius:6px;padding:3px 10px;border-width:2px;border-color:var(--wm-bg6-color);color:var(--wm-bg9-color);background-color:transparent;border-style:solid;font-size:14px;font-family:\\\"Spartan\\\",sans-serif}.wm-button:focus{color:var(--wm-bg9-color);background-color:transparent}.wm-button:hover{color:var(--wm-bg10-color);background-color:var(--wm-bg5-color);border-color:var(--wm-bg5-color)}.wm-button:focus{outline:none;border-color:var(--wm-bg8-color)}.wm-button:active{color:var(--wm-bg11-color);background-color:var(--wm-bg1-color);border-color:var(--wm-bg10-color)}.sidebar-container{padding:3px;box-sizing:border-box;height:100%;min-height:100%;max-height:100%}.sidebar-container .sidebar-scrollable-content{height:100%;padding-right:4px;display:flex;flex-direction:column;gap:8px;overflow-y:scroll;overflow-x:hidden;scrollbar-width:thin;scrollbar-color:var(--wm-bg3-color) transparent}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header{border:2px solid var(--wm-bg6-color);display:flex;border-radius:6px;color:var(--wm-bg9-color);background:var(--wm-bg2-color);padding-inline:0px;font-size:14px;user-select:none}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header.wm-expanded{border-radius:6px 6px 0px 0px}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-caption{display:flex;flex-grow:1;text-align:left;color:var(--wm-bg9-color);background-color:transparent;border:1px solid transparent;border-radius:4px;padding:2px;border-style:solid;font-size:14px;font-family:\\\"Spartan\\\",sans-serif}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-caption:focus{color:var(--wm-bg9-color);background-color:transparent}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-caption:hover{color:var(--wm-bg10-color);background-color:var(--wm-bg5-color);border-color:var(--wm-bg5-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-caption:focus{outline:none;border-color:var(--wm-bg8-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-caption:active{color:var(--wm-bg11-color);background-color:var(--wm-bg1-color);border-color:var(--wm-bg10-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-caption :nth-child(2){flex-grow:1;padding-left:3px;padding-right:12px}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header:hover .sidebar-panel-header-options{color:var(--wm-bg9-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-options{background-color:transparent;border:1px solid transparent;border-radius:4px;padding:2px;color:transparent;border-style:solid;font-size:14px;font-family:\\\"Spartan\\\",sans-serif}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-options:focus{color:var(--wm-bg9-color);background-color:transparent}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-options:hover{color:var(--wm-bg10-color);background-color:var(--wm-bg5-color);border-color:var(--wm-bg5-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-options:focus{outline:none;border-color:var(--wm-bg8-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-header .sidebar-panel-header-options:active{color:var(--wm-bg11-color);background-color:var(--wm-bg1-color);border-color:var(--wm-bg10-color)}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-content{max-width:100%;box-sizing:border-box;font-size:14px;line-height:18px;color:var(--wm-bg9-color);border:2px solid var(--wm-bg6-color);border-top:0px;border-radius:0px 0px 6px 6px;overflow:hidden;padding:4px;margin:0px}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-content.wm-collapsed{display:none}.sidebar-container .sidebar-scrollable-content .sidebar-panel .sidebar-panel-content .sidebar-panel-chart{height:300px;width:100%;overflow:hidden}html{color-scheme:dark;min-height:100vh;max-height:100vh}body{background:var(--wm-bg1-color);font-family:\\\"Spartan\\\",sans-serif;width:100vw;height:100vh;overflow:hidden;margin:0;font-size:14px}::-webkit-scrollbar{width:8px}::-webkit-scrollbar-thumb{background:var(--wm-bg3-color);border-radius:4px}::-webkit-scrollbar-thumb:hover{background:var(--wm-bg6-color)}kbd{border:1px solid var(--wm-bg7-color);border-radius:3px}.wm-app-container{height:100vh;width:100vw;box-sizing:border-box;padding:3px}.wm-app-container .wm-app-grid{height:100%;width:100%;box-sizing:border-box;display:grid;grid-template-columns:257px 8px calc(100vw - 257px)}label.radio{display:flex;gap:6px;padding:2px;box-sizing:border-box}label.radio span{flex-grow:0}input[type=radio]{appearance:none;background-color:transparent;margin:0;font:inherit;color:var(--wm-bg9-color);flex-grow:0;box-sizing:border-box;width:16px;height:16px;border:2px solid var(--wm-bg6-color);border-radius:50%;place-content:center;display:grid}input[type=radio]::before{flex-grow:0;content:\\\"\\\";padding:2px;box-sizing:border-box;width:8px;height:8px;border-radius:50%}input[type=radio]:checked{border-color:var(--wm-bg6-4-color)}input[type=radio]:checked::before{background-color:var(--wm-bg8-color)}input[type=radio]:hover{border-color:var(--wm-bg8-color)}input[type=radio]:hover::before{background-color:var(--wm-bg10-color)}input[type=radio]:focus{border-color:var(--wm-bg9-color);outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/App/styles/colors.scss\",\"webpack://./src/App/styles/editorPage.scss\",\"webpack://./src/App/styles/horizontalResize.scss\",\"webpack://./src/App/styles/button.scss\",\"webpack://./src/App/styles/sidebar.scss\",\"webpack://./src/App/styles/main.scss\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"@media (prefers-color-scheme: dark) {\\r\\n  :root {\\r\\n    --wm-bg0-color: rgb(20, 20, 20);\\r\\n    --wm-bg1-color: rgb(30, 30, 30);\\r\\n    --wm-bg2-color: rgb(38, 38, 38);\\r\\n    --wm-bg2-5-color: rgb(41, 41, 41);\\r\\n    --wm-bg3-color: rgb(44, 44, 44);\\r\\n    --wm-bg4-color: rgb(55, 55, 55);\\r\\n    --wm-bg5-color: rgb(64, 64, 64);\\r\\n    --wm-bg5-5-color: rgb(73, 73, 73);\\r\\n    --wm-bg6-color: rgb(82, 82, 82);\\r\\n    --wm-bg6-4-color: rgb(88, 88, 88);\\r\\n    --wm-bg7-color: rgb(115, 115, 115);\\r\\n    --wm-bg7-5-color: rgb(125, 125, 125);\\r\\n    --wm-bg8-color: rgb(134, 134, 134);\\r\\n    --wm-bg8-5-color: rgb(142, 142, 142);\\r\\n    --wm-bg9-color: rgb(163, 163, 163);\\r\\n    --wm-bg10-color: rgb(212, 212, 212);\\r\\n    --wm-bg11-color: rgb(229, 229, 229);\\r\\n  }\\r\\n}\\r\\n\\r\\n.dark-theme {\\r\\n  --wm-bg0-color: rgb(20, 20, 20);\\r\\n  --wm-bg1-color: rgb(30, 30, 30);\\r\\n  --wm-bg2-color: rgb(38, 38, 38);\\r\\n  --wm-bg2-5-color: rgb(41, 41, 41);\\r\\n  --wm-bg3-color: rgb(44, 44, 44);\\r\\n  --wm-bg4-color: rgb(55, 55, 55);\\r\\n  --wm-bg5-color: rgb(64, 64, 64);\\r\\n  --wm-bg5-5-color: rgb(73, 73, 73);\\r\\n  --wm-bg6-color: rgb(82, 82, 82);\\r\\n  --wm-bg6-4-color: rgb(88, 88, 88);\\r\\n  --wm-bg7-color: rgb(115, 115, 115);\\r\\n  --wm-bg7-5-color: rgb(125, 125, 125);\\r\\n  --wm-bg8-color: rgb(134, 134, 134);\\r\\n  --wm-bg8-5-color: rgb(142, 142, 142);\\r\\n  --wm-bg9-color: rgb(163, 163, 163);\\r\\n  --wm-bg10-color: rgb(212, 212, 212);\\r\\n  --wm-bg11-color: rgb(229, 229, 229);\\r\\n}\\r\\n\\r\\n@media (prefers-color-scheme: light) {\\r\\n  :root {\\r\\n    --wm-bg0-color: rgb(240, 240, 240);\\r\\n    --wm-bg1-color: rgb(229, 229, 229);\\r\\n    --wm-bg2-color: rgb(219, 219, 219);\\r\\n    --wm-bg2-5-color: rgb(215, 215, 215);\\r\\n    --wm-bg3-color: rgb(211, 211, 211);\\r\\n    --wm-bg4-color: rgb(195, 195, 195);\\r\\n    --wm-bg5-color: rgb(182, 182, 182);\\r\\n    --wm-bg5-5-color: rgb(170, 170, 170);\\r\\n    --wm-bg6-color: rgb(158, 158, 158);\\r\\n    --wm-bg6-4-color: rgb(150, 150, 150);\\r\\n    --wm-bg7-color: rgb(120, 120, 120);\\r\\n    --wm-bg7-5-color: rgb(110, 110, 110);\\r\\n    --wm-bg8-color: rgb(102, 102, 102);\\r\\n    --wm-bg8-5-color: rgb(95, 95, 95);\\r\\n    --wm-bg9-color: rgb(78, 78, 78);\\r\\n    --wm-bg10-color: rgb(43, 43, 43);\\r\\n    --wm-bg11-color: rgb(30, 30, 30);\\r\\n  }\\r\\n}\\r\\n\\r\\n.light-theme {\\r\\n  --wm-bg0-color: rgb(240, 240, 240);\\r\\n  --wm-bg1-color: rgb(229, 229, 229);\\r\\n  --wm-bg2-color: rgb(219, 219, 219);\\r\\n  --wm-bg2-5-color: rgb(215, 215, 215);\\r\\n  --wm-bg3-color: rgb(211, 211, 211);\\r\\n  --wm-bg4-color: rgb(195, 195, 195);\\r\\n  --wm-bg5-color: rgb(182, 182, 182);\\r\\n  --wm-bg5-5-color: rgb(170, 170, 170);\\r\\n  --wm-bg6-color: rgb(158, 158, 158);\\r\\n  --wm-bg6-4-color: rgb(150, 150, 150);\\r\\n  --wm-bg7-color: rgb(120, 120, 120);\\r\\n  --wm-bg7-5-color: rgb(110, 110, 110);\\r\\n  --wm-bg8-color: rgb(102, 102, 102);\\r\\n  --wm-bg8-5-color: rgb(95, 95, 95);\\r\\n  --wm-bg9-color: rgb(78, 78, 78);\\r\\n  --wm-bg10-color: rgb(43, 43, 43);\\r\\n  --wm-bg11-color: rgb(30, 30, 30);\\r\\n}\\r\\n\\r\\n// :root {\\r\\n//   --wm-bg0-color: rgb(240, 240, 240);\\r\\n//   --wm-bg1-color: rgb(229, 229, 229);\\r\\n//   --wm-bg2-color: rgb(219, 219, 219);\\r\\n//   --wm-bg2-5-color: rgb(215, 215, 215);\\r\\n//   --wm-bg3-color: rgb(211, 211, 211);\\r\\n//   --wm-bg4-color: rgb(195, 195, 195);\\r\\n//   --wm-bg5-color: rgb(182, 182, 182);\\r\\n//   --wm-bg5-5-color: rgb(170, 170, 170);\\r\\n//   --wm-bg6-color: rgb(158, 158, 158);\\r\\n//   --wm-bg6-4-color: rgb(150, 150, 150);\\r\\n//   --wm-bg7-color: rgb(120, 120, 120);\\r\\n//   --wm-bg7-5-color: rgb(110, 110, 110);\\r\\n//   --wm-bg8-color: rgb(102, 102, 102);\\r\\n//   --wm-bg8-5-color: rgb(95, 95, 95);\\r\\n//   --wm-bg9-color: rgb(78, 78, 78);\\r\\n//   --wm-bg10-color: rgb(43, 43, 43);\\r\\n//   --wm-bg11-color: rgb(30, 30, 30);\\r\\n// }\\r\\n\\r\\n\\r\\n\\r\\n$wm-bg0-color: var(--wm-bg0-color);\\r\\n$wm-bg1-color: var(--wm-bg1-color);\\r\\n$wm-bg2-color: var(--wm-bg2-color);\\r\\n$wm-bg2-5-color: var(--wm-bg2-5-color);\\r\\n$wm-bg3-color: var(--wm-bg3-color);\\r\\n$wm-bg4-color: var(--wm-bg4-color);\\r\\n$wm-bg5-color: var(--wm-bg5-color);\\r\\n$wm-bg5-5-color: var(--wm-bg5-5-color);\\r\\n$wm-bg6-color: var(--wm-bg6-color);\\r\\n$wm-bg6-4-color: var(--wm-bg6-4-color);\\r\\n$wm-bg7-color: var(--wm-bg7-color);\\r\\n$wm-bg7-5-color: var(--wm-bg7-5-color);\\r\\n$wm-bg8-color: var(--wm-bg8-color);\\r\\n$wm-bg8-5-color: var(--wm-bg8-5-color);\\r\\n$wm-bg9-color: var(--wm-bg9-color);\\r\\n$wm-bg10-color: var(--wm-bg10-color);\\r\\n$wm-bg11-color: var(--wm-bg11-color);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// 1 -> 6 : 2.13\\r\\n// 2 -> 6 : 1.93\\r\\n// 3 -> 6 : 1.78\\r\\n// 3 -> 6.3 : 2.08\\r\\n// 3 -> 7 : 2.94\\r\\n\\r\\n// 6 -> 10: 5.27\\r\\n\\r\\n// 1 -> 10: 11.25\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n$border-color: $wm-bg6-color;\\r\\n\\r\\n@mixin defaultTextColor{\\r\\n  color: $wm-bg9-color;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n@mixin wm-button-states {\\r\\n  border-style: solid;\\r\\n  font-size: 14px;\\r\\n  font-family: 'Spartan', sans-serif;\\r\\n  // background-color: transparent;\\r\\n\\r\\n  &:focus {\\r\\n    color: $wm-bg9-color;\\r\\n    background-color: transparent;\\r\\n  }\\r\\n\\r\\n  &:hover {\\r\\n    color: $wm-bg10-color;\\r\\n    background-color: $wm-bg5-color;\\r\\n    border-color: $wm-bg5-color;\\r\\n  }\\r\\n\\r\\n  &:focus {\\r\\n    outline: none;\\r\\n    border-color: $wm-bg8-color;\\r\\n  }\\r\\n\\r\\n  &:active {\\r\\n    color: $wm-bg11-color;\\r\\n    background-color: $wm-bg1-color;\\r\\n    border-color: $wm-bg10-color;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"@use \\\"colors\\\" as *;\\r\\n\\r\\n.editor-page {\\r\\n  height: 100%;\\r\\n  box-sizing: border-box;\\r\\n  padding: 3px;\\r\\n\\r\\n  min-height: 100%;\\r\\n  max-height: 100%;\\r\\n\\r\\n  .editor-page-content {\\r\\n    height: 100%;\\r\\n    box-sizing: border-box;\\r\\n\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    border: 2px solid $border-color;\\r\\n    border-radius: 6px;\\r\\n    \\r\\n    .editor-page-monaco-container {\\r\\n      flex-grow: 1;\\r\\n      height: 100%;\\r\\n      overflow: hidden;\\r\\n      padding: 2px;\\r\\n    }\\r\\n\\r\\n    .editor-page-separator {\\r\\n      height: 0px;\\r\\n      border-top: 2px solid $border-color;\\r\\n    }\\r\\n\\r\\n    .editor-page-control-bar {\\r\\n      display: flex;\\r\\n      padding: 4px;\\r\\n      align-items: center;\\r\\n      @include defaultTextColor;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"@use \\\"colors\\\" as *;\\r\\n\\r\\n.horizontal-resize {\\r\\n  box-sizing: border-box;\\r\\n  height:100%;\\r\\n\\r\\n  >div {\\r\\n    box-sizing: border-box;\\r\\n    height: 100%;\\r\\n\\r\\n    cursor: ew-resize;\\r\\n\\r\\n    border-style: solid;\\r\\n    border-width: 1px 1px 1px 1px;\\r\\n    padding: 1px 1px 1px 1px;\\r\\n    border-radius: 4px;\\r\\n\\r\\n\\r\\n    border-color: $wm-bg3-color;\\r\\n    background-color: $wm-bg3-color;\\r\\n\\r\\n    >div {\\r\\n      box-sizing: border-box;\\r\\n      height: 100%;\\r\\n\\r\\n      border-style: solid;\\r\\n      border-width: 1px 1px 1px 1px;\\r\\n      border-radius: 2px;\\r\\n\\r\\n      width: 100%;\\r\\n      border-color: $wm-bg4-color;\\r\\n      background-color: $wm-bg5-color;\\r\\n\\r\\n      transition: inherit;\\r\\n      transition-delay: inherit;\\r\\n    }\\r\\n\\r\\n    &:hover {\\r\\n      transition: 0.2s;\\r\\n      transition-delay: 0.2s;\\r\\n\\r\\n      border-color: $wm-bg5-color;\\r\\n      background-color: $wm-bg5-5-color;\\r\\n      div {\\r\\n        border-color: $wm-bg6-color;\\r\\n        background-color: $wm-bg6-4-color;\\r\\n      }\\r\\n    }\\r\\n    &:active {\\r\\n      border-color: $wm-bg7-color;\\r\\n      background-color: $wm-bg7-5-color;\\r\\n      div {\\r\\n        border-color: $wm-bg8-color;\\r\\n        background-color: $wm-bg8-5-color;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n\",\"@use \\\"colors\\\" as *;\\r\\n\\r\\n.wm-button {\\r\\n  font-size: 14px;\\r\\n  font-family: 'Spartan', sans-serif;\\r\\n  border-radius: 6px;\\r\\n  padding: 3px 10px;\\r\\n\\r\\n  border-width: 2px;\\r\\n  border-color: $border-color;\\r\\n\\r\\n  @include defaultTextColor;\\r\\n  background-color: transparent;\\r\\n\\r\\n  @include wm-button-states;\\r\\n\\r\\n\\r\\n}\",\"@use \\\"colors\\\" as *;\\r\\n\\r\\n\\r\\n.sidebar-container {\\r\\n  padding: 3px;\\r\\n  box-sizing: border-box;\\r\\n  height: 100%;\\r\\n  min-height: 100%;\\r\\n  max-height:100%;\\r\\n\\r\\n  .sidebar-scrollable-content {\\r\\n    height: 100%;\\r\\n    padding-right: 4px;\\r\\n\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    gap: 8px;\\r\\n    overflow-y: scroll;\\r\\n    overflow-x: hidden;\\r\\n\\r\\n    scrollbar-width: thin;\\r\\n    scrollbar-color: $wm-bg3-color transparent;\\r\\n\\r\\n    .sidebar-panel {\\r\\n      .sidebar-panel-header {\\r\\n        border: 2px solid $border-color;\\r\\n        display: flex;\\r\\n\\r\\n        border-radius: 6px;\\r\\n        &.wm-expanded { border-radius: 6px 6px 0px 0px; }\\r\\n\\r\\n        @include defaultTextColor;\\r\\n        background: $wm-bg2-color;\\r\\n\\r\\n        padding-inline: 0px;\\r\\n        font-size: 14px;\\r\\n        user-select: none;\\r\\n\\r\\n        .sidebar-panel-header-caption {\\r\\n  \\r\\n          display: flex;\\r\\n          flex-grow: 1;\\r\\n          text-align: left;\\r\\n          @include defaultTextColor;\\r\\n          background-color: transparent;\\r\\n          border: 1px solid transparent;\\r\\n          border-radius: 4px;\\r\\n          padding: 2px;\\r\\n\\r\\n          @include wm-button-states;\\r\\n\\r\\n          :nth-child(2) {\\r\\n            flex-grow: 1;\\r\\n            padding-left: 3px;\\r\\n            padding-right: 12px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n\\r\\n        &:hover .sidebar-panel-header-options {\\r\\n          @include defaultTextColor;\\r\\n        }\\r\\n\\r\\n        .sidebar-panel-header-options {\\r\\n          background-color: transparent;\\r\\n          border: 1px solid transparent;\\r\\n          border-radius: 4px;\\r\\n          padding: 2px;\\r\\n          color: transparent;\\r\\n          @include wm-button-states;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .sidebar-panel-content {\\r\\n        max-width: 100%;\\r\\n        box-sizing: border-box;\\r\\n        font-size: 14px;\\r\\n        line-height: 18px;\\r\\n        @include defaultTextColor;\\r\\n  \\r\\n        border: 2px solid $border-color;\\r\\n        border-top: 0px;\\r\\n        border-radius: 0px 0px 6px 6px;\\r\\n        overflow: hidden;\\r\\n        padding: 4px;\\r\\n        margin: 0px;\\r\\n        &.wm-collapsed {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .sidebar-panel-chart {\\r\\n          height: 300px;\\r\\n          width: 100%;\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\",\"@use \\\"editorPage\\\";\\r\\n@use \\\"horizontalResize\\\";\\r\\n@use \\\"button\\\";\\r\\n@use \\\"sidebar\\\";\\r\\n@use \\\"colors\\\" as *;\\r\\n\\r\\n@import '@vscode/codicons/dist/codicon.css';\\r\\n\\r\\n\\r\\n// unselectable {\\r\\n//   -webkit-touch-callout: none;\\r\\n//   -webkit-user-select: none;\\r\\n//   -moz-user-select: none;\\r\\n//   -ms-user-select: none;\\r\\n//   user-select: none;\\r\\n// }\\r\\n\\r\\nhtml {\\r\\n  color-scheme: dark;\\r\\n  min-height: 100vh;\\r\\n  max-height: 100vh;\\r\\n}\\r\\n\\r\\nbody {\\r\\n  background: $wm-bg1-color;\\r\\n  font-family: 'Spartan', sans-serif;\\r\\n  width: 100vw;\\r\\n  height: 100vh;\\r\\n  overflow: hidden;\\r\\n  margin: 0;\\r\\n  font-size: 14px;\\r\\n}\\r\\n\\r\\n::-webkit-scrollbar {\\r\\n  width: 8px;\\r\\n}\\r\\n\\r\\n/* Handle */\\r\\n::-webkit-scrollbar-thumb {\\r\\n  background: $wm-bg3-color;\\r\\n  border-radius: 4px;\\r\\n}\\r\\n\\r\\n/* Handle on hover */\\r\\n::-webkit-scrollbar-thumb:hover {\\r\\n  background: $wm-bg6-color;\\r\\n}\\r\\n\\r\\nkbd {\\r\\n  border: 1px solid $wm-bg7-color;\\r\\n  border-radius: 3px;\\r\\n}\\r\\n\\r\\n.wm-app-container {\\r\\n  height: 100vh;\\r\\n  width: 100vw;\\r\\n  box-sizing: border-box;\\r\\n\\r\\n  padding: 3px;\\r\\n\\r\\n  .wm-app-grid {\\r\\n    height: 100%;\\r\\n    width: 100%;\\r\\n    box-sizing: border-box;\\r\\n\\r\\n    display: grid;\\r\\n    grid-template-columns: 257px 8px calc(100vw - 257px);\\r\\n  }\\r\\n}\\r\\n\\r\\nlabel.radio {\\r\\n  display: flex;\\r\\n  gap: 6px;\\r\\n  padding: 2px;\\r\\n  box-sizing: border-box;\\r\\n  span {\\r\\n    flex-grow: 0;\\r\\n  }\\r\\n  // width: 100%;\\r\\n}\\r\\n\\r\\ninput[type=\\\"radio\\\"] {\\r\\n  appearance: none;\\r\\n  background-color: transparent;\\r\\n  margin: 0;\\r\\n  font: inherit;\\r\\n  color: $wm-bg9-color;\\r\\n  // display: flex;\\r\\n  flex-grow: 0;\\r\\n  box-sizing: border-box;\\r\\n  width: 16px;\\r\\n  height: 16px;\\r\\n\\r\\n  border: 2px solid $border-color;\\r\\n  border-radius: 50%;\\r\\n  place-content: center;\\r\\n\\r\\n  display: grid;\\r\\n  &::before {\\r\\n    flex-grow: 0;\\r\\n    content: \\\"\\\";\\r\\n    padding: 2px;\\r\\n    box-sizing: border-box;\\r\\n    width: 8px;\\r\\n    height: 8px;\\r\\n    border-radius: 50%;\\r\\n  }\\r\\n  &:checked {\\r\\n    border-color: $wm-bg6-4-color; \\r\\n    &::before {\\r\\n      background-color: $wm-bg8-color; \\r\\n    }\\r\\n  }\\r\\n  &:hover {\\r\\n    border-color: $wm-bg8-color; \\r\\n    &::before {\\r\\n      background-color: $wm-bg10-color; \\r\\n    }\\r\\n  }\\r\\n  &:focus {\\r\\n    border-color: $wm-bg9-color;\\r\\n    outline: none;\\r\\n  }\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED = Symbol(\"curried\");\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    const uncurried = (...args) => {\n        let res = f;\n        for (let i = 0; i < arity; i++) {\n            res = res(args[i]);\n        }\n        return res;\n    };\n    uncurried[CURRIED] = f;\n    return uncurried;\n}\nfunction _curry(args, arity, f) {\n    return (arg) => arity === 1\n        ? f(...args.concat([arg]))\n        // Note it's important to generate a new args array every time\n        // because a partially applied function can be run multiple times\n        : _curry(args.concat([arg]), arity - 1, f);\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    else if (CURRIED in f) {\n        return f[CURRIED];\n    }\n    else {\n        return _curry([], arity, f);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED in f) {\n        f = f[CURRIED];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        return _curry(args, arity, f);\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { symbol } from \"../Numeric.js\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nLong.prototype[symbol] = function () {\n    const x = this;\n    return {\n        multiply: y => multiply(x, y),\n        toPrecision: sd => String(x) + (0).toPrecision(sd).substr(1),\n        toExponential: dp => String(x) + (0).toExponential(dp).substr(1),\n        toFixed: dp => String(x) + (0).toFixed(dp).substr(1),\n        toHex: () => toString(x.unsigned ? x : fromBytes(toBytes(x), true), 16),\n    };\n};\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n","import { isValid } from \"./Int32.js\";\nimport * as LongLib from \"./lib/long.js\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\n// export function makeRangeStepFunction(step: Long, last: Long, unsigned: boolean) {\n//   const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n//   if (stepComparedWithZero === 0) {\n//     throw new Error(\"The step of a range cannot be zero\");\n//   }\n//   const stepGreaterThanZero = stepComparedWithZero > 0;\n//   return (x: Long) => {\n//     const comparedWithLast = LongLib.compare(x, last);\n//     if ((stepGreaterThanZero && comparedWithLast <= 0)\n//       || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n//       return [x, op_Addition(x, step)];\n//     } else {\n//       return undefined;\n//     }\n//   };\n// }\nexport function divRem(x, y, out) {\n    const div = op_Division(x, y);\n    const rem = op_Modulus(x, y);\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input === null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(input);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(input);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            const decimalPartLength = decimalPart != null ? decimalPart.length : 0;\n                            rep = toFixed(rep, Math.max(decimalPartLength - 1, 0));\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const [intPart, decimalPart] = rep.split(\".\");\n                                const i = intPart.length % 3;\n                                const thousandGroups = Math.floor(intPart.length / 3);\n                                let thousands = i > 0 ? intPart.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += intPart.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                rep = decimalPart ? thousands + \".\" + decimalPart : thousands;\n                            }\n                            // In .NET you can mix 0/# placeholders but for simplicity we only check the left most character\n                            intPart = intPart.replace(/,/g, \"\");\n                            const intPartLength = intPart.length > 0 && intPart[0] === \"0\" ? intPart.length : 0;\n                            return padLeft(rep, intPartLength - sign.length + decimalPartLength, \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1((x, y) => comparePrimitives(x, y), 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    array.push(x);\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = array.indexOf(item_1, 0);\r\n    if (i > -1) {\r\n        array.splice(i, 1);\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = array.findIndex(predicate);\r\n        if (i > -1) {\r\n            array.splice(i, 1);\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = array.indexOf(item_1, start_1);\r\n    if ((count != null) && (i >= (start_1 + value_2(count)))) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = array.findIndex(predicate);\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = array.findIndex(predicate);\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            res.push(y);\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1) => folder(delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every((y) => (1 === y)))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, 0) | 0;\r\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(x, y));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(x, y));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array(len1 * len2);\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                res.push(x);\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if ((index < 0) ? true : (index > array.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) && (result === 0)) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(equals, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = true;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return false;\r\n        }\r\n        else if (length1 < length2) {\r\n            return false;\r\n        }\r\n        else {\r\n            while ((i < length1) && result) {\r\n                result = equals(array1[i], array2[i]);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1((x, y) => comparePrimitives(x, y), 0, source.length - windowSize) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1((x, y) => comparePrimitives(x, y), chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1((x_1, y_1) => comparePrimitives(x_1, y_1), chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const lenInner = arrays_1[0].length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len + 1);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    target[index] = y;\r\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\r\n        target[i_1 + 1] = xs[i_1];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const ys_1 = Array.from(ys);\r\n    const len2 = ys_1.length | 0;\r\n    const target = new xs.constructor(len + len2);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        target[index + i_1] = ys_1[i_1];\r\n    }\r\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\r\n        target[i_2 + len2] = xs[i_2];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    if ((index < 0) ? true : (index >= xs.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    let i = -1;\r\n    return filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        return i !== index;\r\n    }, xs);\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index >= len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = ((i === index) ? y : xs[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\n","import { join } from \"./String.js\";\r\nimport { uncurry, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\nimport { foldBack as foldBack_2 } from \"./Seq.js\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) && (!FSharpList__get_IsEmpty(ys_1))) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node;\r\n    const t = new FSharpList(state, void 0);\r\n    root.tail = t;\r\n    node = t;\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        const t = new FSharpList(mapping(i, x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const t = new FSharpList(mapping(x), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        const t = new FSharpList(mapping(x, y), void 0);\r\n        acc.tail = t;\r\n        return t;\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc && f(x)), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    return averager.DivideByInt(fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs), count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    return averager.DivideByInt(fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs), count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1((xs_1) => ofArray(xs_1), transpose_1(map_1((xs) => toArray(xs), Array.from(lists)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys_1 = foldBack_2((y, acc) => FSharpList_Cons_305B8EAC(y, acc), ys, FSharpList_get_Empty());\r\n    const result = fold((acc_1, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc_1));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc_1);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    const ys = mapIndexed((i, x) => {\r\n        if (i === index) {\r\n            isDone = true;\r\n            return y;\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\n","\r\nexport const SR_indexOutOfBounds = \"The index was outside the range of elements in the collection.\";\r\n\r\nexport const SR_inputWasEmpty = \"Collection was empty.\";\r\n\r\nexport const SR_inputMustBeNonNegative = \"The input must be non-negative.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_differentLengths = \"The collections had different lengths.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\n","namespace Sutil\n\nopen System\n\ntype IStoreDebugger =\n    interface\n        abstract Value : obj\n        abstract NumSubscribers : int\n    end\n\n\nmodule DevToolsControl =\n\n    type SutilOptions =\n        { SlowAnimations: bool\n          LoggingEnabled: bool }\n\n    let mutable Options =\n        { SlowAnimations = false\n          LoggingEnabled = false }\n\n    type Version =\n        { Major: int\n          Minor: int\n          Patch: int }\n        override v.ToString() = $\"{v.Major}.{v.Minor}.{v.Patch}\"\n\n    type IMountPoint =\n        interface\n            abstract Id : string\n            abstract Remount : unit -> unit\n        end\n\n    type IControlBlock =\n        interface\n            abstract ControlBlockVersion : int\n            abstract Version : Version\n            abstract GetOptions : unit -> SutilOptions\n            abstract SetOptions : SutilOptions -> unit\n            abstract GetStores : unit -> int array\n            abstract GetStoreById : int -> IStoreDebugger\n            abstract GetLogCategories : unit -> (string * bool) array\n            abstract SetLogCategories : (string * bool) array -> unit\n            abstract GetMountPoints : unit -> IMountPoint array\n            abstract PrettyPrint : int -> unit\n        end\n\n    let getControlBlock doc : IControlBlock = Interop.get doc \"__sutil_cb\"\n    let setControlBlock doc (cb: IControlBlock) = Interop.set doc \"__sutil_cb\" cb\n\n    let initialise doc controlBlock = setControlBlock doc controlBlock\n\ntype Unsubscribe = unit -> unit\n\ntype IStore<'T> =\n    interface\n        inherit IObservable<'T>\n        inherit IDisposable\n        abstract Update : f: ('T -> 'T) -> unit\n        abstract Value : 'T\n        abstract Debugger : IStoreDebugger\n        abstract Name : string with get, set\n    end\n\ntype Store<'T> = IStore<'T>\n\ntype Update<'Model> = ('Model -> 'Model) -> unit // A store updater. Store updates by being passed a model updater\n\ntype Dispatch<'Msg> = 'Msg -> unit // Message dispatcher\n\ntype Cmd<'Msg> = (Dispatch<'Msg> -> unit) list // List of commands. A command needs a dispatcher to execute\n\n//\n// All Cmd code take from Fable.Elmish/src/cmd.fs, by Maxel Mangime\n// TODO: Refactor this into Sutil.Elmish module\n//\n#if FABLE_COMPILER\nmodule internal Timer =\n    open System.Timers\n\n    let delay interval callback =\n        let t =\n            new Timer(float interval, AutoReset = false)\n\n        t.Elapsed.Add callback\n        t.Enabled <- true\n        t.Start()\n#endif\n\nmodule Cmd =\n\n    let none : Cmd<'Msg> = []\n\n    let map (f: 'MsgA -> 'MsgB) (cmd: Cmd<'MsgA>) : Cmd<'MsgB> =\n        cmd\n        |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    let ofMsg msg : Cmd<'Msg> = [ fun d -> d msg ]\n\n    let batch (cmds: Cmd<'Msg> list) : Cmd<'Msg> = cmds |> List.concat\n\n    module OfFunc =\n        let either (task: 'args -> _) (a: 'args) (success: _ -> 'msg') (error: _ -> 'msg') =\n            [ fun d ->\n                  try\n                      task a |> (success >> d)\n                  with x -> x |> (error >> d) ]\n\n        let perform (task: 'args -> _) (a: 'args) (success: _ -> 'msg') =\n            [ fun d ->\n                  try\n                      task a |> (success >> d)\n                  with _ -> () ]\n\n        let attempt (task: 'args -> unit) (a: 'args) (error: _ -> 'msg') =\n            [ fun d ->\n                  try\n                      task a\n                  with x -> x |> (error >> d) ]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either\n            (start: Async<unit> -> unit)\n            (task: 'a -> Async<_>)\n            (arg: 'a)\n            (ofSuccess: _ -> 'msg)\n            (ofError: _ -> 'msg)\n            : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n\n                    dispatch (\n                        match r with\n                        | Choice1Of2 x -> ofSuccess x\n                        | Choice2Of2 x -> ofError x\n                    )\n                }\n\n            [ bind >> start ]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) (task: 'a -> Async<_>) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n\n            [ bind >> start ]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) (task: 'a -> Async<_>) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n\n            [ bind >> start ]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task\n                    dispatch r\n                }\n\n            [ bind >> start ]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x =\n            Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> = OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either\n            (task: 'a -> Fable.Core.JS.Promise<_>)\n            (arg: 'a)\n            (ofSuccess: _ -> 'msg)\n            (ofError: #exn -> 'msg)\n            : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch (unbox >> ofError >> dispatch)\n                |> ignore\n\n            [ bind ]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>) (arg: 'a) (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg).``then`` (ofSuccess >> dispatch)\n                |> ignore\n\n            [ bind ]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>) (arg: 'a) (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg).catch (unbox >> ofError >> dispatch)\n                |> ignore\n\n            [ bind ]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch = task.``then`` dispatch |> ignore\n            [ bind ]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise\n        (task: 'a -> Fable.Core.JS.Promise<_>)\n        (arg: 'a)\n        (ofSuccess: _ -> 'msg)\n        (ofError: _ -> 'msg)\n        : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError\n#else\n    open System.Threading.Tasks\n\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","module Sutil.Logging\n\nopen System.Collections.Generic\nopen Browser.Dom\n\nlet enabled = Dictionary<string,bool>()\n\nlet le() = DevToolsControl.Options.LoggingEnabled\n\nlet mutable initialized = false\n\nlet init =\n    if not initialized then\n        console.log(\"logging:init defaults\")\n        initialized <- true\n        enabled.[\"store\"] <- false\n        enabled.[\"trans\"] <- false\n        enabled.[\"dom\"  ] <- true\n        enabled.[\"style\"] <- false\n        enabled.[\"bind\" ] <- true\n        enabled.[\"each\" ] <- true\n        enabled.[\"tick\" ] <- false\n\nlet initWith states =\n    console.log(\"logging:init with states\")\n    initialized <- true\n    for (name,state) in states do\n        console.log($\"logging:{name}: {state}\")\n        enabled.[name] <- state\n\nlet timestamp() =\n    sprintf \"%0.3f\" (((float)System.DateTime.Now.Ticks / 10000000.0) % 60.0)\n\nlet log source (message : string) =\n    if le() && (not (enabled.ContainsKey(source)) || enabled.[source]) then\n        console.log(sprintf \"%s: %s: %s\" (timestamp()) source message)\n\nlet warning (message : string) =\n    console.log(sprintf \"warning: %s\" message)\n\nlet error (message : string) =\n    console.log(sprintf \"error: %s\" message)\n\n","module Sutil.Helpers\n\nopen Browser.Types\n\n#if FABLE_COMPILER\nopen Fable.Core\n\n[<Emit(\"$0 === $1\")>]\nlet fastEquals (x: 'T) (y: 'T): bool = jsNative\n#else\nlet fastEquals (x: 'T) (y: 'T): bool = Unchecked.equals x y\n#endif\nlet fastNotEquals x y = fastEquals x y |> not\n\nlet fileListToSeq (files:FileList) : File seq =\n    if not (isNull files) then\n        seq {\n            for i in [0 .. files.length-1] do\n                yield files.[i]\n        }\n    else\n        Seq.empty\n\nlet disposable f =\n    { new System.IDisposable with\n        member _.Dispose() = f () }\n\nlet internal unsubify (d : System.IDisposable) = fun () -> d.Dispose()\n\nlet makeIdGeneratorFrom start =\n    let mutable id = start\n    fun () ->\n        let r = id\n        id <- id+1\n        r\n\nlet makeIdGenerator() = makeIdGeneratorFrom 0\n","import { clear, equals, isArrayLike, isDisposable, toIterator, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            e.Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                inner.Dispose();\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                outer.Dispose();\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                inner_1.Dispose();\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            e.Dispose();\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) && b1) && b2) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            matchValue.Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            copyOfStruct.Dispose();\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            e2.Dispose();\r\n        }\r\n    }\r\n    finally {\r\n        e1.Dispose();\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            e.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            tupledArg_1[1].Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            tupledArg_1[1].Dispose();\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            tupledArg_1[0].Dispose();\r\n        }\r\n        finally {\r\n            try {\r\n                tupledArg_1[1].Dispose();\r\n            }\r\n            finally {\r\n                tupledArg_1[2].Dispose();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport class CachedSeq$1 {\r\n    constructor(cleanup, res) {\r\n        this.cleanup = cleanup;\r\n        this.res = res;\r\n    }\r\n    Dispose() {\r\n        const _ = this;\r\n        _.cleanup();\r\n    }\r\n    GetEnumerator() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n}\r\n\r\nexport function CachedSeq$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\r\n}\r\n\r\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\r\n    return new CachedSeq$1(cleanup, res);\r\n}\r\n\r\nexport function CachedSeq$1__Clear(_) {\r\n    _.cleanup();\r\n}\r\n\r\nexport function cache(source) {\r\n    checkNonNull(\"source\", source);\r\n    const prefix = [];\r\n    let enumeratorR = void 0;\r\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\r\n        clear(prefix);\r\n        let pattern_matching_result, e;\r\n        if (enumeratorR != null) {\r\n            if (value_1(enumeratorR) != null) {\r\n                pattern_matching_result = 0;\r\n                e = value_1(enumeratorR);\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                e.Dispose();\r\n                break;\r\n            }\r\n        }\r\n        enumeratorR = (void 0);\r\n    }, unfold((i_1) => {\r\n        if (i_1 < prefix.length) {\r\n            return [prefix[i_1], i_1 + 1];\r\n        }\r\n        else {\r\n            if (i_1 >= prefix.length) {\r\n                let optEnumerator_2;\r\n                if (enumeratorR != null) {\r\n                    optEnumerator_2 = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    const optEnumerator = getEnumerator(source);\r\n                    enumeratorR = some(optEnumerator);\r\n                    optEnumerator_2 = optEnumerator;\r\n                }\r\n                if (optEnumerator_2 == null) {\r\n                }\r\n                else {\r\n                    const enumerator = optEnumerator_2;\r\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                    }\r\n                    else {\r\n                        enumerator.Dispose();\r\n                        enumeratorR = some(void 0);\r\n                    }\r\n                }\r\n            }\r\n            return (i_1 < prefix.length) ? [prefix[i_1], i_1 + 1] : (void 0);\r\n        }\r\n    }, 0));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        e.Dispose();\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, source) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(source);\r\n        try {\r\n            for (let _ = 1; _ <= count; _++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            e.Dispose();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), transpose_1(map_1((xs_1) => toArray(xs_1), toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1((arr) => ofArray(arr), chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if (i === index) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let status = -1;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        if (i === index) {\r\n            status = 0;\r\n        }\r\n        let inserted;\r\n        if (status === 0) {\r\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                status = 1;\r\n                inserted = (void 0);\r\n            }\r\n        }\r\n        else {\r\n            inserted = (void 0);\r\n        }\r\n        if (inserted == null) {\r\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                if (status < 1) {\r\n                    throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n                }\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return some(value_1(inserted));\r\n        }\r\n    }, (tupledArg_1) => {\r\n        tupledArg_1[0].Dispose();\r\n        tupledArg_1[1].Dispose();\r\n    });\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < index) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n        }\r\n        else {\r\n            if (i === index) {\r\n                for (let _ = 1; _ <= count; _++) {\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\"));\r\n                    }\r\n                }\r\n            }\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        e_1.Dispose();\r\n    });\r\n}\r\n\r\n","import { structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            resource.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","module Sutil.Interop\n\nopen Fable.Core\nopen Fable.Core.JsInterop\n\n[<Emit(\"Math.random()\")>]\nlet random() : float = jsNative\n\n[<Emit(\"new CustomEvent($0, $1)\")>]\nlet customEvent name data = jsNative\n\n[<Emit(\"() => ($0)[$1]\")>]\nlet getter obj name = jsNative\n\n[<Emit(\"value => { ($0)[$1] = value; }\")>]\nlet setter obj name = jsNative\n\n[<Emit(\"$0[$1] = $2\")>]\nlet set<'T> (ob:obj) (name:string) (value:'T) : unit = jsNative\n\n[<Emit(\"$0[$1]\")>]\nlet get<'T> (ob:obj) (name:string) : 'T = jsNative\n\n[<Emit(\"delete $0[$1]\")>]\nlet delete ob name : unit = jsNative\n\n[<Emit(\"$0.hasOwnProperty($1)\")>]\nlet exists (ob:obj) (name:string) : bool= jsNative\n\nlet getOption<'a> (ob:obj) (name:string) : 'a option =\n    match exists ob name with\n    | false -> None\n    | true -> Some (get ob name)\n\nlet getDefault<'a> (ob:obj) (name:string) (defaultValue : 'a): 'a =\n    match exists obj name with\n    | false -> defaultValue\n    | true -> get ob name\n\n[<Emit(\"typeof $0 === 'undefined'\")>]\nlet isUndefined (x: 'a) : bool = jsNative\n\nopen Browser.Dom\nopen Browser.CssExtensions\nopen Browser.MediaQueryListExtensions\n\n[<Emit(\"typeof window !== 'undefined'\")>]\nlet windowIsDefined : bool = jsNative\n\ntype Window() =\n    do ()\n    with\n        static member alert msg =\n            if windowIsDefined then window.alert msg\n        static member document =\n            if windowIsDefined then window.document else null\n        static member location =\n            if windowIsDefined then window.location else null\n        static member addEventListener(typ,listener) =\n            if windowIsDefined then window.addEventListener(typ,listener)\n        static member getComputedStyle(elt) =\n            if windowIsDefined then window.getComputedStyle(elt) else null\n        static member getComputedStyle(elt,pseudoElt) =\n            if windowIsDefined then window.getComputedStyle(elt,pseudoElt) else null\n        static member matchMedia query =\n            if windowIsDefined then window.matchMedia query else null\n        static member removeEventListener(typ,listener) =\n            if windowIsDefined then window.removeEventListener(typ,listener)\n        static member requestAnimationFrame callback =\n            if windowIsDefined then window.requestAnimationFrame callback else 0.0\n\n","module Sutil.DOM\n\nopen System\nopen Browser.Dom\nopen Browser.Types\nopen Browser.CssExtensions\nopen Interop\n\nlet log = Logging.log \"dom\"\n\nlet dispatch (target:EventTarget) name (data:obj) =\n    if not (isNull target) then\n        target.dispatchEvent( Interop.customEvent name data) |> ignore\nlet dispatchSimple (target:EventTarget) name =\n    dispatch target name {| |}\n\nlet dispatchCustom<'T> (target: EventTarget) (name: string) (init: CustomEventInit<'T>) =\n    if not (isNull target) then\n        target.dispatchEvent(customEvent name init) |> ignore\n\n[<RequireQualifiedAccessAttribute>]\nmodule NodeKey =\n    let Disposables = \"__sutil_disposables\"\n    let ResizeObserver = \"__sutil_resizeObserver\"\n    let TickTask = \"__sutil_tickTask\"\n    let Promise = \"__sutil_promise\"\n    let NodeMap = \"__sutil_nodes\"\n    let Groups = \"__sutil_groups\"\n\n    let clear (node:Node) (key:string) =\n        Interop.delete node key\n\n    let get<'T> (node:Node) key : 'T option  =\n        let v : obj = Interop.get node key\n        if isNull v then None else v :?> 'T |> Some\n\n    let getCreate<'T> (node:Node) key (cons:unit -> 'T): 'T =\n        match get node key with\n        | Some v -> v\n        | None ->\n            let newVal = cons()\n            Interop.set node key newVal\n            newVal\n\nmodule Event =\n    let NewStore = \"sutil-new-store\"\n    let UpdateStore = \"sutil-update-store\"\n    let ElementReady = \"sutil-element-ready\"\n    let Mount = \"sutil-mount\"\n    let Unmount = \"sutil-unmount\"\n    let Show = \"sutil-show\"\n    let Hide = \"sutil-hide\"\n    let Updated = \"sutil-updated\"\n    let Connected = \"sutil-connected\"\n    //let NewStore = \"sutil-new-store\"\n    //let DisposeStore = \"sutil-dispose-store\"\n\n    let notifyEvent (doc : Document) name data =\n        doc.dispatchEvent( Interop.customEvent name data ) |> ignore\n\n    let notifyUpdated doc =\n        log(\"notify document\")\n        notifyEvent doc Updated  {|  |}\n\ntype CustomDispatch<'T> =\n    | Detail of 'T option\n    | Bubbles of bool\n    | Composed of bool\n    with\n        static member toCustomEvent<'T> (props : CustomDispatch<'T> list) =\n            let mutable data : obj = upcast {| |}\n            for p in props do\n                match p with\n                | Detail  d -> Interop.set data \"detail\" d\n                | Bubbles b -> Interop.set data \"bubbles\" b\n                | Composed c -> Interop.set data \"composed\" c\n            data :?> CustomEventInit<'T>\n        static member dispatch( target : EventTarget, name : string ) =\n            dispatchCustom<unit> target name (CustomDispatch.toCustomEvent<unit>([]))\n\n        static member dispatch( e : Event, name : string ) =\n            dispatchCustom<unit> (e.target) name (CustomDispatch.toCustomEvent<unit>([]))\n\n        static member dispatch<'T>( target : EventTarget, name : string, props : CustomDispatch<'T> list ) =\n            dispatchCustom<'T> target name (CustomDispatch.toCustomEvent<'T> props)\n\n        static member dispatch<'T>( e : Event, name : string, props : CustomDispatch<'T> list ) =\n            dispatchCustom<'T> (e.target) name (CustomDispatch.toCustomEvent<'T> props)\n\nlet domId = Helpers.makeIdGenerator()\n\n[<Literal>]\nlet ElementNodeType = 1.0\n\n[<Literal>]\nlet TextNodeType = 3.0\n\nlet isTextNode (n:Node) = n.nodeType = TextNodeType\nlet isElementNode (n:Node) = n.nodeType = ElementNodeType\nlet asTryElement (n:Node) = if isElementNode n then Some (n :?> HTMLElement) else None\nlet documentOf (n:Node) = n.ownerDocument\n\nlet applyIfElement (f: HTMLElement -> unit) (n:Node) = if isElementNode n then f (n:?>HTMLElement)\n\nlet SvIdKey = \"_svid\"\n\nlet getNodeMap (doc:Document) : obj= NodeKey.getCreate doc.body NodeKey.NodeMap (fun () -> upcast {| |})\n\nlet setSvId (n:Node) id =\n    let map = getNodeMap n.ownerDocument\n    Interop.set map (string id) n\n    Interop.set n SvIdKey id\n    if (isElementNode n) then\n        (n :?> HTMLElement).setAttribute(SvIdKey,(string id))\n\nlet svId (n:Node) = Interop.get n SvIdKey\n\nlet hasSvId (n:Node) = Interop.exists n SvIdKey\n\nlet findNodeWithSvId (doc : Document) id : Node option =\n    let map = getNodeMap doc\n    let key = string id\n    match Interop.exists map key with\n    | true -> Some (Interop.get map key)\n    | _ -> None\n\n    //let getId n =\n    //    let r = svId n\n    //    if (r = id) then Some n else None\n    //findNode doc.body getId\n\nlet rectStr (r:ClientRect) = $\"{r.left},{r.top} -> {r.right},{r.bottom}\"\n\nlet nodeStr (node : Node) =\n    if isNull node then\n        \"null\"\n    else\n        let mutable tc = node.textContent\n        if  tc.Length > 80 then tc <- tc.Substring(0,80)\n        match node.nodeType with\n        | ElementNodeType ->\n            let e = node :?> HTMLElement\n            $\"<{e.tagName.ToLower()}>#{svId node} \\\"{tc}\\\"\"\n        | TextNodeType ->\n            $\"\\\"{tc}\\\"#{svId node}\"\n        | _ -> $\"?'{tc}'#{svId node}\"\n\nlet nodeStrShort (node : Node) =\n    if isNull node then\n        \"null\"\n    else\n        let mutable tc = node.textContent\n        if  tc.Length > 16 then tc <- tc.Substring(0,16) + \"...\"\n        match node.nodeType with\n        | ElementNodeType ->\n            let e = node :?> HTMLElement\n            $\"<{e.tagName.ToLower()}> #{svId node}\"\n        | TextNodeType ->\n            $\"text:\\\"{tc}\\\" #{svId node}\"\n        | _ -> $\"?'{tc}'#{svId node}\"\n\nopen Fable.Core.JsInterop\nopen Fable.Core\n\n\n\nlet children (node:Node) =\n    let rec visit (child:Node) =\n        seq {\n            if not (isNull child) then\n                yield child\n                yield! visit child.nextSibling\n        }\n    visit node.firstChild\n\nlet rec descendants (node:Node) =\n    seq {\n        for child in children node do\n            yield child\n            yield! descendants child\n    }\n\nlet rec descendantsDepthFirst (node:Node) =\n    seq {\n        for child in children node do\n            yield! descendants child\n            yield child\n    }\n\nlet isSameNode (a:Node) (b:Node) =\n    if isNull a then isNull b else a.isSameNode(b)\n\nlet private hasDisposables (node:Node) : bool =\n    Interop.exists node NodeKey.Disposables\n\nlet private getDisposables (node:Node) : IDisposable list =\n    if hasDisposables node then Interop.get node NodeKey.Disposables else []\n\nlet private clearDisposables (node:Node) : unit =\n    Interop.delete node NodeKey.Disposables\n\n// Call all registered disposables on this node\nlet private cleanup (node:Node) : unit =\n    let safeDispose (d: IDisposable) =\n        try d.Dispose()\n        with x -> Logging.error $\"Disposing {d}: {x} from {nodeStr node}\"\n\n    let d = getDisposables node\n    log $\"cleanup {nodeStr node} - {d.Length} disposable(s)\"\n\n    d |> List.iter safeDispose\n\n    clearDisposables node\n    dispatchSimple node Event.Unmount\n\nlet assertTrue condition message =\n    if not condition then failwith message\n\nlet private cleanupDeep (node:Node) : unit=\n    descendantsDepthFirst node |> Array.ofSeq |> Array.iter cleanup\n    cleanup node\n\nmodule DomEdit =\n    let log s =\n        if Interop.exists window \"domeditlog\" then\n            window?domeditlog(s)\n        else\n            Logging.log \"dom\" s\n\n    let appendChild (parent:Node) (child:Node) =\n        log $\"appendChild parent='{nodeStrShort parent}' child='{nodeStrShort child}'\"\n        parent.appendChild(child) |> ignore\n        log $\"after: appendChild parent='{nodeStrShort parent}' child='{nodeStrShort child}'\"\n\n    let removeChild (parent:Node) (child:Node) =\n        log $\"removeChild parent='{nodeStrShort parent}' child='{nodeStrShort child}'\"\n        cleanupDeep child\n        parent.removeChild(child) |> ignore\n        log $\"after: removeChild parent='{nodeStrShort parent}' child='{nodeStrShort child}'\"\n\n    let insertBefore (parent:Node) (child:Node) (refNode:Node) =\n        log $\"insertBefore parent='{nodeStrShort parent}' child='{nodeStrShort child}' refNode='{nodeStrShort refNode}'\"\n        parent.insertBefore(child,refNode) |> ignore\n        log $\"after: insertBefore parent='{nodeStrShort parent}' child='{nodeStrShort child}' refNode='{nodeStrShort refNode}'\"\n\n    let insertAfter (parent : Node) (newChild : Node) (refChild : Node) =\n        let beforeChild = if isNull refChild then parent.firstChild else refChild.nextSibling\n        insertBefore parent newChild beforeChild\n\n// Cleanup all descendants and this node\n// Remove node from parent\nlet unmount (node:Node) : unit=\n    cleanupDeep node\n    if not(isNull(node.parentNode)) then\n        DomEdit.removeChild node.parentNode node\n\nlet clear (node:Node) =\n    children node |> Array.ofSeq |> Array.iter unmount\n\nlet listen (event:string) (e:EventTarget) (fn: (Event -> unit)) : (unit -> unit)=\n    e.addEventListener( event, fn )\n    (fun () -> e.removeEventListener(event, fn) |> ignore)\n\nlet raf (f : float -> unit) = Window.requestAnimationFrame( fun t -> try f t with|x -> Logging.error $\"raf: {x.Message}\" )\nlet rafu (f : unit -> unit) = Window.requestAnimationFrame( fun _ -> try f() with|x -> Logging.error $\"rafu: {x.Message}\" ) |> ignore\n\nlet anyof (events : string list) (target:EventTarget) (fn : Event->Unit) : unit =\n    let rec inner e = events |> List.iter (fun e -> target.removeEventListener( e, inner )); fn(e)\n    events |> List.iter (fun e -> listen e target inner |> ignore)\n\nlet once (event:string) (target:EventTarget) (fn : Event->Unit) : unit =\n    let rec inner e = target.removeEventListener( event, inner ); fn(e)\n    listen event target inner |> ignore\n\nlet interval callback (delayMs : int) =\n    let id = Fable.Core.JS.setInterval callback delayMs\n    fun () -> Fable.Core.JS.clearInterval id\n\nlet timeout callback (delayMs : int) =\n    let id = Fable.Core.JS.setTimeout callback delayMs\n    fun () -> Fable.Core.JS.clearTimeout id\n\nmodule CssRules =\n    type CssSelector =\n        | Tag of string\n        | Cls of string\n        | Id of string\n        | All of CssSelector list\n        | Any of CssSelector list\n        | Attr of CssSelector * string * string\n        | NotImplemented\n        with\n        member this.Match (el:HTMLElement)=\n            match this with\n            | NotImplemented -> false\n            | Tag tag -> el.tagName = tag\n            | Cls cls -> el.classList.contains(cls)\n            | Id id -> el.id = id\n            | Attr (sub,name,value) -> sub.Match(el) && el.getAttribute(name) = value\n            | All rules -> rules |> List.fold (fun a r -> a && r.Match el) true\n            | Any rules -> rules |> List.fold (fun a r -> a || r.Match el) false\n\ntype StyleRule = {\n    SelectorSpec : string\n    Selector : CssRules.CssSelector\n    Style : (string*obj) list\n}\n\ntype KeyFrame = {\n    StartAt: int\n    Style : (string * obj) list\n}\ntype KeyFrames = {\n    Name : string\n    Frames : KeyFrame list\n}\n\ntype MediaRule = {\n    Condition : string\n    Rules : StyleSheetDefinition list\n}\nand  StyleSheetDefinition =\n    | Rule of StyleRule\n    | KeyFrames of KeyFrames\n    | MediaRule of MediaRule\n\ntype StyleSheet = StyleSheetDefinition list\n\ntype NamedStyleSheet = {\n    Name : string\n    StyleSheet : StyleSheet\n    Parent : NamedStyleSheet option\n}\n\nlet makeMediaRule condition rules =\n    MediaRule {\n        Condition = condition\n        Rules = rules\n    }\n\nlet rulesOf (styleSheet : StyleSheet) =\n    styleSheet\n        |> List.map (function Rule r -> Some r | _ -> None)\n        |> List.choose id\n\nlet rec private forEachChild (parent:Node) (f : Node -> unit) =\n    let mutable child = parent.firstChild\n    while not (isNull child) do\n        f child\n        child <- child.nextSibling\n\nlet nodeIsConnected (node : Node) :  bool =\n    node?isConnected\n\n/// SutilNode is a DOM node, the result of evaluating a SutilElement. Fragment and binding elements will return a GroupNode,\n/// which is a grouping of DOM nodes, so a SutilNode can also be a GroupNode. Finally, SutilNode can be an EmptyNode to represent\n/// the concept of None (or null)\ntype SutilNode =\n    | EmptyNode   // Not set\n    | DomNode of Node // A real browser DOM node\n    | GroupNode of NodeGroup // A group of SutilNodes\n    with\n        member this.mapDefault f defaultValue =\n            match this with\n            |DomNode n -> f n\n            |GroupNode n -> n.MapParent(f)\n            |_-> defaultValue\n        member this.iter f = this.mapDefault f ()\n        member this.iterElement (f : HTMLElement -> unit) = this.mapDefault (applyIfElement f) ()\n\n        member this.IsConnected() =\n            match this with\n            | EmptyNode -> false\n            | DomNode n -> nodeIsConnected n\n            | GroupNode g -> g.IsConnected()\n\n        member this.AssertIsConnected() =\n            match this with\n            | EmptyNode -> failwith \"Not connected: empty node\"\n            | DomNode n -> if (not (nodeIsConnected n)) then failwith $\"Not connected: {n}\"\n            | GroupNode g -> g.AssertIsConnected()\n\n        member this.Register( childGroup : NodeGroup ) =\n            match this with\n            | EmptyNode -> ()\n            | DomNode n ->\n                let cleanupGroups() =\n                    //JS.console.log(\"Cleaning up groups\")\n                    let groups : (NodeGroup list) option = NodeKey.get n NodeKey.Groups\n                    groups |> Option.iter (List.iter (fun g -> g.Dispose()))\n                    NodeKey.clear n NodeKey.Groups\n                let groups = NodeKey.getCreate n NodeKey.Groups (fun () -> [])\n                if List.isEmpty groups then\n                    SutilNode.RegisterUnsubscribe(n, cleanupGroups)\n                Interop.set n NodeKey.Groups (groups @ [ childGroup ])\n            | GroupNode g ->\n                g.Register(childGroup)\n\n        member this.PrettyPrint(label:string) =\n            let rec pr level deep node =\n                let indent l = String(' ', l*4)\n                let log l s = log((indent l) + s)\n                let rec prDomNode l (dn:Node) =\n                    let groups = NodeGroup.GroupsOf dn\n                    let l' = l + groups.Length\n                    groups\n                    |> List.iteri (fun i g -> log (l + i) $\"<'{g.Name}'> #{g.Id}\")\n\n                    match dn with\n                    | null -> log l \"(null)\"\n                    | t when isTextNode(t) -> log l $\"'{t.textContent}'\"\n                    | _ ->\n                        let e = dn :?> HTMLElement\n                        //let g =\n                        //    NodeGroup.GroupOf e\n                        //    |> Option.map (fun g -> \" : \" + g.Name + \"#\" + g.Id)\n                        //    |> Option.defaultValue \"\"\n                        log l' (\"<\" + e.tagName + \"> #\" + (string (svId e)))\n                        if deep then\n                            forEachChild e (prDomNode (l'+1))\n                            if Interop.exists e NodeKey.Groups then\n                                let groups : NodeGroup list = (Interop.get e NodeKey.Groups)\n                                for g in groups do\n                                    prVNode (l'+1) g\n                and prVNode level v =\n                    let ch = String.Join(\",\", v.Children |> List.map (fun (c:SutilNode) -> \"#\" + c.Id))\n                    log level (\"group '\" + v.Name + \"' #\" + (v.Id) + \" children=[\" + ch + \"]\")\n                    //for c in v.Children do\n                    //    pr (level + 1) false c\n\n                match node with\n                | EmptyNode -> log level \"-\"\n                | DomNode n -> prDomNode level n\n                | GroupNode v -> prVNode level v\n            Browser.Dom.console.groupCollapsed(label)\n            pr 0 true this\n            Browser.Dom.console.groupEnd()\n\n        member this.Id\n            with get() : string =\n                match this with\n                | EmptyNode -> \"-\"\n                | DomNode n -> svId n\n                | GroupNode v -> v.Id\n            and set id =\n                match this with\n                | EmptyNode -> ()\n                | DomNode n -> setSvId n id\n                | GroupNode v -> v.Id <- id\n\n        member this.IsSameNode (node:SutilNode) =\n            match this,node with\n            | EmptyNode,EmptyNode -> true\n            | DomNode a, DomNode b -> a.isSameNode(b)\n            | GroupNode a, GroupNode b -> a.Id = b.Id\n            | _ -> false\n\n        member this.Document =\n            match this with\n            | EmptyNode -> window.document\n            | DomNode n -> n.ownerDocument\n            | GroupNode v -> v.Document\n\n        member this.IsEmpty = this = EmptyNode\n\n        member this.LastDomNode : Node =\n            match this with\n            | EmptyNode -> null\n            | DomNode n -> n\n            | GroupNode _ -> match this.collectDomNodes() with |[] -> null | xs -> xs |> List.last\n\n        member this.PrevNode =\n            match this with\n            | EmptyNode -> EmptyNode\n            | DomNode n -> DomNode (n.previousSibling)\n            | GroupNode v -> v.PrevNode\n\n        member this.PrevDomNode =\n            match this with\n            | EmptyNode -> null\n            | DomNode n -> n.previousSibling\n            | GroupNode v -> match v.PrevNode.collectDomNodes() with |[] -> null | xs -> xs |> List.last\n\n        member this.NextDomNode =\n            match this with\n            | EmptyNode -> null\n            | DomNode node -> if isNull node then null else node.nextSibling\n            | GroupNode g -> g.NextDomNode\n\n        // All descendant DOM nodes of this SutilNode. Only groups recurse to their children,\n        // we only want the first (parent) DOM node.\n        member this.collectDomNodes () = this.DomNodes()\n\n        member this.DomNodes() =\n            match this with\n            | EmptyNode -> []\n            | DomNode n -> [ n ]\n            | GroupNode v -> v.DomNodes()\n\n        member this.AsDomNode = this.mapDefault id null\n\n        member node.Disposables =\n            match node with\n            | EmptyNode -> []\n            | DomNode n -> NodeKey.getCreate n NodeKey.Disposables (fun () -> [])\n            | GroupNode v -> []\n\n        member node.Dispose() =\n            match node with\n            | GroupNode v -> v.Dispose()\n            | DomNode n -> cleanupDeep n\n            | _ -> ()\n\n        static member GetDisposables(node:Node) =\n            NodeKey.getCreate node NodeKey.Disposables (fun () -> [])\n\n        static member RegisterDisposable(node:Node, d:IDisposable) : unit =\n            Interop.set node NodeKey.Disposables (d :: getDisposables(node))\n\n        static member RegisterDisposable (node:SutilNode, d:IDisposable) : unit =\n            log $\"register disposable on {node}\"\n            //if registeredDisposables.ContainsKey(d) then failwith $\"Disposable {d} has already been registered on {nodeStr registeredDisposables.[d]}, attempt to register on {nodeStr node}\"\n            //registeredDisposables.[d] <- node\n            //let disposables : List<IDisposable> = node.Disposables\n            //Interop.set node NodeKey.Disposables (d :: disposables)\n            match node with\n            | EmptyNode -> ()\n            | DomNode n -> SutilNode.RegisterDisposable(n,d)\n            | GroupNode v -> ()\n\n        static member RegisterUnsubscribe (node : Node, d:unit->unit) : unit =\n            SutilNode.RegisterDisposable (node,Helpers.disposable d)\n\n        static member RegisterUnsubscribe (node : SutilNode, d:unit->unit) : unit =\n            SutilNode.RegisterDisposable (node,Helpers.disposable d)\n\n        static member private ReplaceGroup (parent : Node, nodes : Node list, existing : Node list ) =\n            log($\"ReplaceGroup: nodes {nodes.Length} existing {existing.Length}\")\n            let insertBefore =\n                match existing with\n                | [] -> null\n                | [x] -> x.nextSibling\n                | _ -> (existing |> List.last).nextSibling\n\n            let remove n =\n                cleanupDeep n\n                if isNull(n.parentNode) then\n                    log $\"Warning: Node {nodeStr n} was unmounted unexpectedly\"\n                else\n                    if (not (parent.isSameNode(n.parentNode))) then\n                        log $\"Warning: Node {nodeStr n} has unexpected parent\"\n                    DomEdit.removeChild n.parentNode n\n\n            let insert  n =\n                DomEdit.insertBefore parent n insertBefore\n                //setSvId n id\n\n            //let ids = existing |> List.map svId\n\n            existing |> List.iter remove\n            nodes |> List.iter insert //ids\n\n        member this.InsertAfter(node:SutilNode,refNode:SutilNode) =\n            match this with\n            |EmptyNode ->\n                JS.console.warn(\"InsertAfter called for empty node - disposing child\")\n                node.Dispose()\n            |DomNode parent ->\n                log($\"InsertAfter (parent = {this}: refNode={refNode} refNode.NextDomNode={nodeStr refNode.NextDomNode}\")\n                let refDomNode = refNode.NextDomNode\n                node.collectDomNodes()\n                    |> List.iter (fun child -> DomEdit.insertBefore parent child refDomNode)\n            |GroupNode g ->\n                g.InsertAfter(node,refNode)\n\n        member this.InsertAfter(node:Node,refNode:Node) =\n            this.iter (fun parent -> DomEdit.insertAfter parent node refNode)\n\n        member this.RemoveChild(node:Node) =\n            this.iter (fun parent -> DomEdit.removeChild parent node)\n\n        member this.ReplaceGroup(node:SutilNode,existing:SutilNode, insertBefore : Node) =\n            log($\"ReplaceGroup({node}, {existing})\")\n            match this with\n            | EmptyNode -> ()\n            | DomNode parent ->\n                SutilNode.ReplaceGroup(parent, node.collectDomNodes(), existing.collectDomNodes())\n                // Todo. Remove existing VirtualNodes contained in existing from parent\n                // Todo. Add VirtualNodes in node to parent\n            | GroupNode parent ->\n                parent.ReplaceChild(node,existing,insertBefore)\n\n        member this.AppendChild (child : Node) =\n            match this with\n            | EmptyNode -> ()\n            | DomNode parent -> DomEdit.appendChild parent child\n            | GroupNode parent -> parent.AppendChild(DomNode child)\n\n        // member this.AppendChild (child : SutilNode) =\n        //     match this with\n        //     | EmptyNode -> ()\n        //     | DomNode parent ->\n        //         child.collectDomNodes() |> List.iter (fun child -> DomEdit.appendChild parent child)\n        //     | GroupNode parent ->\n        //         parent.AppendChild(child)\n\n        member this.FirstDomNodeInOrAfter =\n            match this with\n            | EmptyNode -> null\n            | DomNode n -> n\n            | GroupNode g -> g.FirstDomNodeInOrAfter\n\n        member this.InsertBefore(node:Node,refNode:Node) : unit =\n            this.iter (fun parent ->\n                DomEdit.insertBefore parent node refNode)\n\n        //member private this.InsertBefore (child : SutilNode, refNode : SutilNode ) =\n        //    match this with\n        //    | EmptyNode -> ()\n        //    | DomNode parent ->\n        //        let refDomNode = refNode.FirstDomNodeInOrAfter\n        //        child.collectDomNodes() |> List.iter (fun child -> DomEdit.insertBefore parent child refDomNode)\n        //    | GroupNode g ->\n        //        g.InsertBefore(child, refNode)\n\n        member this.AddClass( cls : string ) = this.iterElement (fun parent -> parent.classList.add(cls))\n        member this.RemoveClass( cls : string ) = this.iterElement (fun parent -> parent.classList.remove(cls))\n        override this.ToString() =\n            match this with\n            | EmptyNode -> \"EmptyNode\"\n            | DomNode n -> nodeStrShort n\n            | GroupNode v -> v.ToString()\n        member this.Clear() = this.iter clear\n\n        member this.Children : list<SutilNode> =\n            match this with\n            | EmptyNode -> []\n            | DomNode n -> [] // Careful! With n = div [ div[] fragment[] div[] ] -> Children of n are: DomNode, GroupNode, DomNode\n            | GroupNode v -> v.Children\n\n        static member MakeGroup( name : string, parent : SutilNode, prevInit : SutilNode ) =\n            NodeGroup.Create(name,parent,prevInit)\n\nand NodeGroup private (_name,_parent,_prevInit) as this =\n    let mutable id = domId() |> string\n    let mutable _dispose = ignore\n    let mutable _children = []\n    let mutable _prev = _prevInit\n    let mutable _childGroups = []\n    let childDomNodes() = _children |> List.map (function |DomNode n -> [n]|_ -> [])\n\n    let childStrs() = _children |> List.map string\n\n    let assertIsChild (child:SutilNode) =\n        let isChild = _children |> List.exists (fun c -> c.IsSameNode(child))\n        if not isChild then\n            log($\"Not a child: {child}\")\n            failwith $\"Not a child: {child}\"\n\n    let updateChildrenPrev() =\n        log($\"updating children {childStrs()}\")\n        let mutable p = EmptyNode\n        for c in _children do\n            match c with\n            | GroupNode v -> v.PrevNode <- p\n            | _ -> ()\n            p <- c\n\n    let parentDomNode() =\n        let rec findParent p =\n            match p with\n            |EmptyNode -> null\n            |DomNode n -> n\n            |GroupNode v -> findParent v.Parent\n        findParent _parent\n    do\n        _parent.Register(this)\n        ()\n    with\n        member this.Document = parentDomNode().ownerDocument\n\n        static member internal Create(name,parent,prevInit) =\n            NodeGroup(name,parent,prevInit)\n\n        member this.IsConnected() =\n            parentDomNode() |> nodeIsConnected\n\n        member this.AssertIsConnected() =\n            if (not <| this.IsConnected()) then failwith $\"Not connected: {this}\"\n\n        override this.ToString() =\n            _name + \"[\" + (String.Join(\",\", _children |> List.map (fun n -> n.ToString()))) + \"]#\" + id\n\n        member this.Parent = _parent\n\n        member this.Register (childGroup : NodeGroup) =\n            _childGroups <- childGroup :: _childGroups\n\n        member this.PrevNode with get () = _prev and set v = _prev <- v\n\n        member this.DomNodes() =\n            this.Children |> List.collect (fun c -> c.DomNodes())\n\n        member this.PrevDomNode =\n            let result =\n                match this.PrevNode with\n                | DomNode n -> n\n                | GroupNode v ->\n                    match v.LastDomNode with\n                    | null -> v.PrevDomNode\n                    | n -> n\n                | EmptyNode -> // We're the first child\n                    match this.Parent with\n                    | GroupNode pv -> pv.PrevDomNode\n                    | _ -> null\n            log($\"PrevDomNode of {this} -> '{nodeStr result}' PrevNode={this.PrevNode}\")\n            result\n\n        member this.NextDomNode =\n            //log($\"NextDomNode this={this}\")\n            let result =\n                match this.DomNodes() with\n                // We don't have any nodes.\n                | [] ->\n                    //log(\"-- We have no nodes\")\n                    match this.PrevDomNode with\n                    | null -> // No DOM node before us, so our next node must be parent DOM node's first child\n                        //log(\"-- PrevDomNode is null\")\n                        match parentDomNode() with\n                        | null ->\n                            //log(\"-- parent DOM node is null\")\n                            null\n                        | p ->\n                            //log(\"-- parent's first child, since no nodes before us, and we don't have any nodes ourself\")\n                            p.firstChild\n                    | prev ->\n                        //log($\"-- our next node is our PrevDomNode's next sibling (prev is {nodeStr prev})\")\n                        prev.nextSibling\n\n                // We do have nodes, so next node is last node's next sibling\n                | ns ->\n                    match ns |> List.last with\n                    | null ->\n                        //log(\"-- Last node was null\")\n                        null\n                    | last ->\n                        //log(\"-- NextDomNode is nextSibling of our last node\")\n                        last.nextSibling\n            //log($\"NextDomNode of {this} -> '{nodeStr result}'\")\n            result\n\n        member this.FirstDomNode =\n            match this.DomNodes() with\n            | [] -> null\n            | n :: ns -> n\n\n        member this.LastDomNode =\n            match this.DomNodes() with\n            | [] -> null\n            | ns -> ns |> List.last\n\n        member this.FirstDomNodeInOrAfter =\n            match this.FirstDomNode with\n            | null -> this.NextDomNode\n            | first -> first\n\n        //member this.ParentDomNode = parentDomNode()\n        member this.MapParent<'T>( f : (Node -> 'T)) =\n            f(parentDomNode())\n\n        member private this.OwnX( n : Node ) =\n            Interop.set n \"__sutil_snode\" this\n\n        member private this.OwnX( child : SutilNode ) =\n            match child with\n            | DomNode n -> this.OwnX(n)\n            | _ -> ()\n\n        static member GroupOf (n : Node) : NodeGroup option =\n            Interop.getOption n \"__sutil_snode\"\n\n        static member GroupsOf (n : Node) : NodeGroup list =\n            let rec parentsOf (r:NodeGroup list) =\n                match r with\n                | [] -> r\n                | x::xs ->\n                    match x.Parent with\n                    | GroupNode g -> parentsOf (g :: r)\n                    | _ -> r\n\n            let init n =\n                match Interop.getOption n \"__sutil_snode\" with\n                | None -> []\n                | Some g -> [g]\n\n            parentsOf (init n)\n\n        member this.Clear() =\n            // TODO clean up each node\n            _children <- []\n\n        member private this.AddChild (child:SutilNode) =\n            this.OwnX(child)\n            _children <- _children @ [ child ]\n            updateChildrenPrev()\n\n        member this.AppendChild(child : SutilNode) =\n            //log($\"NodeGroup.AppendChild: this='{this.Name} #{this.Id}' child='{child}' parent='{this.Parent}' prevDom='{nodeStrShort this.PrevDomNode}'\")\n            match this.Parent with\n            |EmptyNode -> ()\n            |_  ->\n                let cn = this.DomNodes() |> List.map nodeStrShort\n                let pn = this.PrevNode.DomNodes() |> List.map nodeStrShort\n                let parent = parentDomNode()\n                let before = this.NextDomNode\n                child.collectDomNodes() |> List.iter (fun ch ->\n                    //log($\"AppendChild: insertBefore: {nodeStrShort ch} before {nodeStrShort before} prev={this.PrevNode}\")\n                    DomEdit.insertBefore parent ch before)\n            //this.AddChild(child)\n            this.OwnX(child)\n            _children <- _children @ [ child ]\n            updateChildrenPrev()\n\n        member this.FirstChild =\n            match _children with\n            | [] -> EmptyNode\n            | x :: xs -> x\n\n        member this.LastChild =\n            match _children with\n            | [] -> EmptyNode\n            | xs -> xs |> List.last\n\n        member private this.ChildAfter (prev : SutilNode) =\n            log($\"ChildAfter: prev='{prev}' children={childStrs()} this='{this}'\")\n            match prev with\n            | EmptyNode -> this.FirstChild\n            | _ ->\n                let rec find (list : SutilNode list) =\n                    match list with\n                    | [] ->\n                        log($\"Did not find {prev}\")\n                        EmptyNode\n                    | x :: [] when x.IsSameNode(prev) ->\n                        log($\"Found {x} at end of list -> EmptyNode\")\n                        EmptyNode\n                    | x :: y :: _ when x.IsSameNode(prev) ->\n                        log($\"Found {y} after {x}\")\n                        y\n                    | x :: xs ->\n                        log($\"Found {x} but not equal to {prev}\")\n                        find xs\n                find _children\n\n        member this.InsertAfter (child : SutilNode, prev : SutilNode ) =\n            this.InsertBefore( child, this.ChildAfter(prev) )\n\n        member private this.InsertBefore (child : SutilNode, refNode : SutilNode ) =\n            let refDomNode =\n                match refNode with\n                | EmptyNode -> this.NextDomNode\n                | _ -> refNode.FirstDomNodeInOrAfter\n\n            log($\"InsertBefore: child='{child}' before '{refNode}' refDomNode='{nodeStrShort refDomNode}' child.PrevNode='{child.PrevNode}'\")\n            let parent = parentDomNode()\n            let len = _children.Length\n\n            for dnode in child.collectDomNodes() do\n                DomEdit.insertBefore parent dnode refDomNode\n\n            if refNode = EmptyNode then\n                this.AddChild(child)\n            else\n                _children <- _children |> List.fold (fun list ch ->\n                    match ch with\n                    | n when n.IsSameNode(refNode) -> list @ [child] @ [ n ]\n                    | _ -> list @ [ch]\n                    ) []\n\n                this.OwnX(child)\n\n            updateChildrenPrev()\n            log($\"InsertBefore: child='{child}' refNode='{nodeStrShort refDomNode}' child.PrevNode='{child.PrevNode}'\")\n\n            if _children.Length = len then\n                log($\"Error: Child was not added\")\n\n        member _.RemoveChild (child:SutilNode) =\n            let rec rc (p:NodeGroup) (c:SutilNode) =\n                match c with\n                | EmptyNode -> ()\n                | DomNode n ->\n                    unmount n\n                | GroupNode g ->\n                    g.Children |> List.iter (fun gc -> g.RemoveChild(gc))\n                    g.Dispose()\n\n            let newChildren = _children |> List.filter (fun n -> n <> child)\n            //child.collectDomNodes() |> List.iter (fun c -> DomEdit.removeChild c.parentNode c)\n            rc this child\n            _children <- newChildren\n            updateChildrenPrev()\n\n        member this.ReplaceChild (child:SutilNode, oldChild:SutilNode, insertBefore : Node) =\n            let deleteOldNodes() =\n                let oldNodes = oldChild.collectDomNodes()\n\n                oldNodes |> List.iter (fun c ->\n                    if (isNull c.parentNode) then // We were unexpectedly removed from the DOM by something else (perhaps)\n                        log($\"Node has no parent: {nodeStrShort c}\")\n                    else\n                        DomEdit.removeChild c.parentNode c)\n\n            //log($\"ReplaceChild: {oldChild} with {child} before {nodeStrShort insertBefore}\")\n            let nodes = child.collectDomNodes()\n\n            assertTrue (child <> EmptyNode) \"Empty child for replace child\"\n\n            if oldChild <> EmptyNode then\n                assertTrue (_children |> List.exists (fun c -> c.Id = oldChild.Id) ) \"Child not found\"\n                child.Id <- oldChild.Id\n\n            //let insertBefore = match oldNodes with |[] -> null |_ -> (oldNodes |> List.last).nextSibling\n            let parent = parentDomNode()\n\n            nodes |> List.iter (fun n ->\n                //log($\"insertBefore {nodeStrShort n} before {nodeStrShort insertBefore} on parent {nodeStrShort parent}\")\n                DomEdit.insertBefore parent n insertBefore\n                )\n\n            deleteOldNodes()\n\n            if isNull insertBefore || oldChild = EmptyNode then\n                this.AddChild child\n            else\n                this.OwnX child\n                _children <- _children |> List.map (fun n -> if n.Id = oldChild.Id then child else n)\n\n            updateChildrenPrev()\n\n        member _.Name = _name\n        member _.Id\n            with get() = id and set id' = id <- id'\n        member _.Children = _children\n        member _.SetDispose d =\n            //SutilNode.RegisterUnsubscribe(parentDomNode(),d)\n            _dispose <- d\n        member _.Dispose() =\n            _childGroups |> List.iter (fun c -> c.Dispose())\n            _dispose()\n\ntype BuildResult = SutilNode\n\n/// Specific operation for BuildContext.AddChild.\ntype DomAction =\n    | Append  // appendChild\n    | Replace of SutilNode*Node // bindings use this to replace the previous DOM fragment\n    | Nothing\ntype BuildContext =\n    {\n        Document : Browser.Types.Document\n        Parent   : SutilNode\n        Previous : SutilNode\n        Action   : DomAction  // Consider making this \"SvId option\" and then finding node to replace\n        // Naming service\n        MakeName : (string -> string)\n        Debug : bool\n        // Style context\n        StyleSheet : NamedStyleSheet option }\n    with\n        //member this.Document = this.Parent.Document\n        member this.ParentElement : HTMLElement = this.Parent.AsDomNode :?> HTMLElement\n        member this.ParentNode : Node = this.Parent.AsDomNode\n        member ctx.AddChild (node: SutilNode) : unit =\n            match ctx.Action with\n            | Nothing -> ()\n\n            | Append ->\n                log $\"ctx.Append '{node}' to '{ctx.Parent}' after {ctx.Previous}\"\n                ctx.Parent.InsertAfter(node,ctx.Previous)\n\n                if (ctx.Parent.IsConnected()) then\n                    node.collectDomNodes() |> List.iter (fun n -> dispatchSimple n Event.Connected)\n\n            | Replace (existing,insertBefore)->\n                log $\"ctx.Replace '{existing}' with '{node}' before '{nodeStrShort insertBefore}'\"\n                ctx.Parent.ReplaceGroup(node,existing,insertBefore)\n\n                if (ctx.Parent.IsConnected()) then\n                    node.collectDomNodes() |> List.iter (fun n -> dispatchSimple n Event.Connected)\n\n            ()\n\n// Private so that we must use build to instantiate the DOM fragment.\ntype SutilElement = private { Builder: BuildContext -> BuildResult }\n\nlet nodeFactory f = { Builder = f }\n\nlet private makeContext (parent:Node) =\n    let gen = Helpers.makeIdGenerator()\n    {\n        Document = parent.ownerDocument\n        Parent = DomNode parent\n        Previous = EmptyNode\n        Action = Append\n        StyleSheet = None\n        Debug = false\n        MakeName = fun baseName -> sprintf \"%s-%d\" baseName (gen())\n    }\n\nlet private makeShadowContext (customElement : Node) =\n    let gen = Helpers.makeIdGenerator()\n    {\n        Document = customElement.ownerDocument\n        Parent = DomNode customElement\n        Previous = EmptyNode\n        Action = Nothing\n        StyleSheet = None\n        Debug = false\n        MakeName = fun baseName -> sprintf \"%s-%d\" baseName (gen())\n    }\n\nmodule ContextHelpers =\n    let withStyleSheet sheet ctx : BuildContext =\n        { ctx with StyleSheet = Some sheet }\n\n    let withDebug ctx : BuildContext =\n        { ctx with Debug = true }\n\n    let withParent parent ctx : BuildContext =\n        { ctx with Parent = parent; Action=Append}\n\n    let withPrevious prev ctx : BuildContext =\n        { ctx with Previous = prev }\n\n    let withParentNode parent ctx : BuildContext =\n        withParent (DomNode parent) ctx\n\n    let withReplace (toReplace:SutilNode,before:Node) ctx =\n        { ctx with Action = Replace (toReplace,before) }\n\ntype Fragment = Node list\n\nlet domResult (node:Node) = DomNode node\nlet sutilResult (node:SutilNode) = node\n\nlet unitResult(ctx, name)  =\n    let text () =\n            let tn = ctx.Document.createTextNode name\n            let d = ctx.Document.createElement(\"div\")\n            DomEdit.appendChild d tn\n            ctx.AddChild (DomNode d)\n            d\n    if ctx.Debug then DomNode (text()) else EmptyNode\n\nlet errorNode (parent:SutilNode) message : Node=\n    let doc = parent.Document\n    let d = doc.createElement(\"div\")\n    DomEdit.appendChild d (doc.createTextNode($\"sutil-error: {message}\"))\n    parent.AppendChild(d)\n    d.setAttribute(\"style\", \"color: red; padding: 4px; font-size: 10px;\")\n    upcast d\n\nlet collectFragment (result : BuildResult) = result\n\nlet appendAttribute (e:Element) attrName attrValue =\n    if (attrValue <> \"\") then\n        let currentValue = e.getAttribute(attrName)\n        e.setAttribute(attrName,\n            if ((isNull currentValue) || currentValue = \"\")\n                then attrValue\n                else (sprintf \"%s %s\" currentValue attrValue))\n\n// TODO: We can make a better parser using combinators. This lets me prove this idea tbough\n// Don't judge me\nlet rec internal parseSelector (source:string) : CssRules.CssSelector =\n    let trimQuotes (s:string) = s.Trim().Trim( [| '\\''; '\"' |])\n\n    let rec parseSingle (token : string) =\n        if token.StartsWith(\".\")\n            then CssRules.Cls (token.Substring(1))\n        else if token.StartsWith(\"#\")\n            then CssRules.Id (token.Substring(1))\n        else if token.Contains(\":\") || token.Contains(\">\") || token.Contains(\"[\")\n            then CssRules.NotImplemented\n        else\n            CssRules.Tag (token.ToUpper())\n\n    let rec parseAttr (token : string) =\n        if token.Contains(\"[\") && token.EndsWith(\"]\")\n            then\n                let i = token.IndexOf('[')\n                let single = parseSingle(token.Substring(0,i).Trim())\n                let attrExpr = token.Substring(i+1, token.Length - i - 2)\n                let attrTokens = attrExpr.Split([|'='|], 2)\n                if attrTokens.Length = 2 then\n                    CssRules.Attr (single, attrTokens.[0].Trim(), attrTokens.[1] |> trimQuotes )\n                else\n                    CssRules.NotImplemented\n            else parseSingle token\n\n    let rec parseAll (token : string) =\n        let spacedItems = token.Split([| ' ' |], System.StringSplitOptions.RemoveEmptyEntries)\n        if (spacedItems.Length = 1)\n            then parseAttr spacedItems.[0]\n            else spacedItems |> Array.map parseAttr |> Array.toList |> CssRules.Any\n\n    let items = source.Split(',')\n    if items.Length = 1\n        then parseAll items.[0]\n        else items |> Array.map parseAll |> Array.toList |> CssRules.All\n\nlet ruleMatchEl (el:HTMLElement) (rule:StyleRule) =\n    rule.Selector.Match el\n\nlet rec rootStyle (sheet : NamedStyleSheet) =\n    match sheet.Parent with\n    | None -> sheet\n    | Some parentSheet -> rootStyle parentSheet\n\nlet rec rootStyleName sheet =\n    (rootStyle sheet).Name\n\nlet getSutilClasses (e:HTMLElement) =\n    let classes =\n        [0..e.classList.length-1]\n            |> List.map (fun i -> e.classList.[i])\n            |> List.filter (fun cls -> cls.StartsWith(\"sutil\"));\n    classes\n\nlet rec applyCustomRules (namedSheet:NamedStyleSheet) (e:HTMLElement) =\n    // TODO: Remove all classes added by previous calls to this function\n    // TODO: Store them in a custom attribute on 'e'\n    let sheet = namedSheet.StyleSheet |> rulesOf\n    for rule in sheet |> List.filter (ruleMatchEl e) do\n        for custom in rule.Style |> List.filter (fun (nm,v) -> nm.StartsWith(\"sutil\")) do\n            match custom with\n            | (nm,v) when nm = \"sutil-use-global\" ->\n                let root = rootStyle namedSheet\n                if root.Name <> namedSheet.Name then\n                    e.classList.add(root.Name)\n                    applyCustomRules root e\n                ()\n            | (nm,v) when nm = \"sutil-use-parent\" ->\n                ()\n            | (nm,v) when nm = \"sutil-add-class\" ->\n                //log($\"Matches: {e.tagName} '%A{e.classList}' -> %A{rule.Selector}\")\n                //log($\"Adding class {v}\")\n                e.classList.add(string v)\n                // TODO: Also add this class to a custom attribute so we can clean them up\n                // TODO: on subsequent calls\n            | _ -> log($\"Unimplemented: {fst custom}\")\n\nlet build (f : SutilElement) (ctx : BuildContext) =\n    let result = f.Builder ctx\n    //if (nodeIsConnected ctx.ParentElement) then\n    result.collectDomNodes() |> List.iter (fun n -> dispatchSimple n Event.Mount)\n    //else\n    //    Fable.Core.JS.console.log(\"Cannot issue mount when not connected: \" + (nodeStrShort ctx.ParentElement))\n    result\n\nlet asDomNode (element:SutilNode) (ctx : BuildContext) : Node =\n    //let result = (ctx |> build element)\n    match element.collectDomNodes()  with\n    | [n] -> n\n    | [] -> errorNode ctx.Parent $\"Error: Empty node from {element} #{element.Id}\"\n    | xs ->\n        let doc = ctx.Document\n        let tmpDiv = doc.createElement(\"div\")\n        let en = errorNode (DomNode tmpDiv) \"'fragment' not allowed as root for 'each' blocks\"\n        DomEdit.appendChild tmpDiv en\n        ctx.Parent.AppendChild tmpDiv\n        xs |> List.iter (fun x -> DomEdit.appendChild tmpDiv x)\n        upcast tmpDiv\n\nlet asDomElement (element : SutilNode) (ctx : BuildContext): HTMLElement =\n    let node = asDomNode element ctx\n    if isElementNode node then\n        downcast node\n    else\n        let doc = ctx.Document\n        let span = doc.createElement(\"span\")\n        DomEdit.appendChild span node\n        ctx.Parent.AppendChild span\n        span\n\n\nlet findSvIdElement (doc : Document) id : HTMLElement =\n    downcast doc.querySelector($\"[_svid='{id}']\")\n\nlet splitBySpace (s:string) = s.Split([|' '|],StringSplitOptions.RemoveEmptyEntries)\n\nlet setClass (className : string) (e:HTMLElement) =\n    e.className <- className\n\nlet addToClasslist classes (e:HTMLElement) =\n    e.classList.add( classes |> splitBySpace )\n\nlet removeFromClasslist classes (e:HTMLElement) =\n    e.classList.remove( classes |> splitBySpace )\n\nlet nullToEmpty s =\n    if isNull s then \"\" else s\n\nlet setAttribute (el:HTMLElement) (name:string) (value:obj) =\n    let svalue = string value\n    if name = \"class\" then\n        el |> addToClasslist svalue\n    else  if name = \"class-\" then\n        el |> removeFromClasslist svalue\n    else if svalue = \"false\" && (name = \"disabled\" || name = \"readonly\" || name = \"required\") then\n        el.removeAttribute( name )\n    else if name = \"value\" then\n        Interop.set el \"__value\" value // raw value\n        Interop.set el \"value\" svalue //\n    else if name = \"style+\" then\n        el.setAttribute(\"style\", (nullToEmpty (el.getAttribute(\"style\"))) + svalue )\n    else\n        el.setAttribute( name, svalue )\n\n    //if (name = \"value\") then\n    //    Interop.set el \"__value\" value // Un-stringified version of value\n\nlet attr (name,value:obj) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.Parent.AsDomNode\n    try\n        let e = parent :?> HTMLElement\n\n        setAttribute e name value\n\n        match ctx.StyleSheet with\n        | Some namedSheet ->\n            applyCustomRules namedSheet e\n        | None -> ()\n\n    with _ -> invalidOp (sprintf \"Cannot set attribute %s on a %A %f %s\" name parent parent.nodeType (parent :?> HTMLElement).tagName)\n    unitResult(ctx, \"attr\")\n\nlet idSelector = sprintf \"#%s\"\nlet classSelector = sprintf \".%s\"\nlet findElement (doc: Document) selector = doc.querySelector(selector)\n\nlet rec visitChildren (parent:Node) (f : Node -> bool) =\n\n    let mutable child = parent.firstChild\n    while not (isNull child) do\n        if f(child) then\n            visitChildren (downcast child) f\n            child <- child.nextSibling\n        else\n            child <- null\n\nlet rec findNode<'T> (parent:Node) (f : Node -> 'T option)  : 'T option=\n    let mutable child = parent.firstChild\n    let mutable result : 'T option = None\n    while not (isNull child) do\n        result <- f(child)\n        if (result.IsNone) then result <- findNode child f\n        child <- match result with\n                    | None -> child.nextSibling\n                    | Some x -> null\n    result\n\nlet prevSibling (node : Node) : Node =\n    match node with |null->null|_->node.previousSibling\n\nlet rec lastSibling (node : Node) : Node =\n    if (isNull node || isNull node.nextSibling) then\n        node\n    else\n        lastSibling node.nextSibling\n\nlet lastChild (node : Node) : Node = lastSibling (node.firstChild)\n\nlet rec firstSiblingWhere (node:Node) (condition:Node -> bool) =\n    if isNull node then null else if condition node then node else firstSiblingWhere (node.nextSibling) condition\n\nlet firstChildWhere (node:Node) (condition:Node -> bool) =\n    firstSiblingWhere node.firstChild condition\n\nlet rec lastSiblingWhere (node:Node) (condition:Node -> bool) =\n    if isNull node then\n        null\n    else if (condition node && (isNull node.nextSibling || not (condition node.nextSibling))) then\n        node\n    else\n        lastSiblingWhere node.nextSibling condition\n\nlet lastChildWhere (node:Node) (condition:Node->bool) =\n    lastSiblingWhere node.firstChild condition\n\nlet rec visitElementChildren (parent:Node) (f : HTMLElement -> unit) =\n    visitChildren parent\n                    (fun child ->\n                        if (child.nodeType = 1.0) then f(downcast child)\n                        true)\n\n\n//let registeredDisposables = new System.Collections.Generic.Dictionary<IDisposable,Node>()\n\nlet disposeOnUnmount (ds : IDisposable list) = nodeFactory <| fun ctx ->\n    ds |> List.iter (fun d-> SutilNode.RegisterDisposable(ctx.Parent,d))\n    unitResult(ctx, \"disposeOnUnmount\")\n\nlet unsubscribeOnUnmount (ds : (unit->unit) list) = nodeFactory <| fun ctx ->\n    ds |> List.iter (fun d -> SutilNode.RegisterUnsubscribe(ctx.Parent,d))\n    unitResult(ctx, \"unsubscribeOnUnmount\")\n\nlet private updateCustom (el:HTMLElement) (name:string) (property:string) (value:obj) =\n    let r = NodeKey.getCreate el name (fun () -> {| |})\n    Interop.set r property value\n    Interop.set el name r\n\nlet exclusive (f : SutilElement) = nodeFactory <| fun ctx ->\n    log $\"exclusive {ctx.Parent}\"\n    ctx.Parent.Clear()\n    ctx |> build f\n\nlet hookContext (hook: BuildContext -> unit) : SutilElement = nodeFactory <| fun ctx ->\n    hook ctx\n    unitResult(ctx, \"hookContext\")\n\nlet hookParent (hook: Node -> unit) : SutilElement = nodeFactory <| fun ctx ->\n    hook ctx.Parent.AsDomNode\n    unitResult(ctx, \"hookParent\")\n\nlet addTransform (node:HTMLElement) (a : ClientRect) =\n    let b = node.getBoundingClientRect()\n    if (a.left <> b.left || a.top <> b.top) then\n        let s = Window.getComputedStyle(node)\n        let transform = if s.transform = \"none\" then \"\" else s.transform\n        node.style.transform <- sprintf \"%s translate(%fpx, %fpx)\" transform (a.left - b.left) (a.top - b.top)\n        log node.style.transform\n\nlet fixPosition (node:HTMLElement) =\n    let s = Window.getComputedStyle(node)\n    if (s.position <> \"absolute\" && s.position <> \"fixed\") then\n        log $\"fixPosition {nodeStr node}\"\n        let width  = s.width\n        let height = s.height\n        let a = node.getBoundingClientRect()\n        node.style.position <- \"absolute\"\n        node.style.width <- width\n        node.style.height <- height\n        addTransform node a\n\n//let removeNode (node:#Node) =\n//    log <| sprintf \"removing node %A\" node.textContent\n//    DomEdit.removeChild node.parentNode node\n\nlet buildChildren(xs : seq<SutilElement>) (ctx:BuildContext) : unit =\n    let e = ctx.Parent\n\n    let mutable prev = EmptyNode\n\n    //log($\"buildChildren for {ctx.Parent}\")\n\n    // Effect 2\n    for x in xs do\n        //log($\"  buildChildren: prev={prev}\")\n        match ctx |> ContextHelpers.withPrevious prev |> build x with\n        | EmptyNode -> ()\n        | r -> prev <- r\n\n    // Effect 3\n    match ctx.StyleSheet with\n    | Some namedSheet ->\n        e.AddClass(namedSheet.Name)\n        e.AsDomNode |> applyIfElement (applyCustomRules namedSheet)\n    | None -> ()\n\n    ()\n\nlet fragment (elements : SutilElement seq) = nodeFactory <| fun ctx ->\n    let group = SutilNode.MakeGroup(\"fragment\",ctx.Parent,ctx.Previous)\n    let fragmentNode = GroupNode group\n    ctx.AddChild fragmentNode\n\n    let childCtx = { ctx with Parent = fragmentNode; Action = Append }\n    childCtx |> buildChildren elements\n\n    sutilResult fragmentNode\n\nopen Fable.Core.JS\n\n// ----------------------------------------------------------------------------\n// Serialize tasks through an element. If the task already has a running task\n// wait for it to complete before starting the new task. Otherwise, run the\n// new task immediately\n//\nlet wait (el:HTMLElement) (andThen : unit -> Promise<unit>) =\n    let key = NodeKey.Promise\n    let run() = andThen() |> Interop.set el key\n    if Interop.exists el key then\n        let p = Interop.get<Promise<unit>> el key\n        Interop.delete el key\n        p.``then`` run |> ignore\n    else\n        run()\n\nopen Fable.Core\n[<Global>]\ntype ShadowRoot() =\n    member this.appendChild(el: Browser.Types.Node) = jsNative\n\nlet mountOnShadowRoot app (host : Node) : (unit -> unit)=\n    let el = build app (makeShadowContext host)\n    match el with\n    | DomNode node ->\n        let shadowRoot : ShadowRoot = host?shadowRoot\n        shadowRoot.appendChild(node)\n    | GroupNode group ->\n        let shadowRoot : ShadowRoot = host?shadowRoot\n        for node in group.DomNodes() do\n            shadowRoot.appendChild(node)\n    | EmptyNode ->\n        failwith \"Custom components must return at least one node\"\n\n    let dispose() =\n        //JS.console.log($\"mountOnShadowRoot: disposing {el}\")\n        el.Dispose()\n    dispose\n\nlet mountOn app host =\n    build app (makeContext host)\n\nlet mountAfter app (node : HTMLElement) =\n    build app  { (makeContext node.parentElement) with Previous = DomNode node }\n\nlet computedStyleOpacity e =\n    try\n        float (Window.getComputedStyle(e).opacity)\n    with\n    | _ ->\n        log(sprintf \"parse error: '%A'\" (Window.getComputedStyle(e).opacity))\n        1.0\n\nlet computedStyleTransform node =\n    let style = Window.getComputedStyle(node)\n    if style.transform = \"none\" then \"\" else style.transform\n\nlet declareResource<'T when 'T :> IDisposable> (init : unit -> 'T) (f : 'T -> unit) = nodeFactory <| fun ctx ->\n    let r = init()\n    SutilNode.RegisterDisposable(ctx.Parent,r)\n    f(r)\n    unitResult(ctx, \"declareResource\")\n\n// ----------------------------------------------------------------------------\n// Element builder with namespace\n\nlet elns ns tag (xs : seq<SutilElement>) : SutilElement = nodeFactory <| fun ctx ->\n\n    let e : Element = if ns = \"\" then upcast ctx.Document.createElement(tag) else ctx.Document.createElementNS(ns, tag)\n    let snodeEl = DomNode e\n\n    // Considering packing these effects into pipeline that lives on ctx.\n    // User can then extend the pipeline, or even re-arrange. No immediate\n    // need for it right now.\n\n    // Effect 1\n    let id = domId()\n    log $\"create <{tag}> #{id}\"\n    setSvId e id\n\n    ctx |> ContextHelpers.withParent snodeEl |> buildChildren xs\n\n    ctx.AddChild (DomNode e)\n    // Effect 4\n    //appendReplaceChild e ctx |> ignore\n\n    // Effect 5\n    dispatchSimple e Event.ElementReady\n\n    domResult e\n\n// ----------------------------------------------------------------------------\n// Element builder for DOM\n\nlet el tag (xs : seq<SutilElement>) : SutilElement = nodeFactory <| fun ctx ->\n    let e : Element = upcast ctx.Document.createElement(tag)\n    let snodeEl = DomNode e\n\n    // Considering packing these effects into pipeline that lives on ctx.\n    // User can then extend the pipeline, or even re-arrange. No immediate\n    // need for it right now.\n\n    // Effect 1\n    let id = domId()\n    log(\"create <\" + tag + \"> #\" + string id)\n    setSvId e id\n\n    ctx |> ContextHelpers.withParent snodeEl |> buildChildren xs\n\n    // Effect 4\n    ctx.AddChild (DomNode e)\n\n    // Effect 5\n    dispatchSimple e Event.ElementReady\n\n    domResult e\n\nlet elAppend selector (xs : seq<SutilElement>) : SutilElement = nodeFactory <| fun ctx ->\n    let e : Element = ctx.Document.querySelector(selector)\n    if isNull e then\n        failwith (\"Not found \" + selector)\n    let snodeEl = DomNode e\n\n    let id = domId()\n    log(\"append <\" + selector + \"> #\" + string id)\n    setSvId e id\n\n    ctx |> ContextHelpers.withParent snodeEl |> buildChildren xs\n\n    unitResult(ctx,\"elAppend\")\n(*\nlet buildSolitaryElement (f : SutilElement) ctx : HTMLElement =\n    log $\"buildSolitaryElement: {ctx.Action}\"\n    let node = expectSolitary f ctx\n    if isElementNode node then\n        node :?> HTMLElement\n    else\n        let spanWrapper = el \"span\" [ nodeFactory <| (fun _ -> nodeResult node) ]\n        (expectSolitary spanWrapper ctx) :?> HTMLElement\n*)\nlet inject (elements : SutilElement seq) (element : SutilElement) = nodeFactory <| fun ctx ->\n    let e = build element ctx\n    e.collectDomNodes() |> List.iter (fun n -> ctx |> ContextHelpers.withParent (DomNode n) |> buildChildren elements |> ignore)\n    e\n\nlet setValue<'T> (key : string) (value : 'T) = nodeFactory <| fun ctx ->\n    Interop.set ctx.ParentNode key value\n    unitResult(ctx, \"setValue\")\n\n// ----------------------------------------------------------------------------\n// Text node\n\nlet textNode (doc : Document) value : Node =\n    let id = domId()\n    log $\"create \\\"{value}\\\" #{id}\"\n    let n = doc.createTextNode(value)\n    setSvId n id\n    upcast n\n\nlet text value : SutilElement =\n    nodeFactory <| fun ctx ->\n        let tn = textNode ctx.Document value\n        ctx.AddChild (DomNode tn)\n        domResult tn\n\n// ----------------------------------------------------------------------------\n// Raw html node\n\nlet html text : SutilElement = nodeFactory <| fun ctx ->\n    ctx.Parent.AsDomNode |> applyIfElement (fun el ->\n        el.innerHTML <- text\n        match ctx.StyleSheet with\n        | None -> ()\n        | Some ns -> visitElementChildren el (fun ch ->\n                                            ch.classList.add ns.Name\n                                            applyCustomRules ns ch)\n        Event.notifyUpdated ctx.Document)\n    sutilResult <| ctx.Parent\n\nlet host (render : HTMLElement -> unit) = nodeFactory <| fun ctx ->\n    ctx.ParentElement |> render\n    unitResult(ctx,\"host\")\n\nlet nothing = nodeFactory <| fun ctx -> unitResult(ctx, \"nothing\")\n","import { Choice_tryValueIfChoice1Of2, Choice_tryValueIfChoice2Of2 } from \"./Choice.js\";\nimport { value } from \"./Option.js\";\nexport class Observer {\n    constructor(onNext, onError, onCompleted) {\n        this.OnNext = onNext;\n        this.OnError = onError || ((_e) => { return; });\n        this.OnCompleted = onCompleted || (() => { return; });\n    }\n}\nclass Observable {\n    constructor(subscribe) {\n        this.Subscribe = subscribe;\n    }\n}\nexport function protect(f, succeed, fail) {\n    try {\n        return succeed(f());\n    }\n    catch (e) {\n        fail(e);\n    }\n}\nexport function add(callback, source) {\n    source.Subscribe(new Observer(callback));\n}\nexport function choose(chooser, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => protect(() => chooser(t), (u) => { if (u != null) {\n        observer.OnNext(value(u));\n    } }, observer.OnError), observer.OnError, observer.OnCompleted)));\n}\nexport function filter(predicate, source) {\n    return choose((x) => predicate(x) ? x : null, source);\n}\nexport function map(mapping, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => {\n        protect(() => mapping(t), observer.OnNext, observer.OnError);\n    }, observer.OnError, observer.OnCompleted)));\n}\nexport function merge(source1, source2) {\n    return new Observable((observer) => {\n        let stopped = false;\n        let completed1 = false;\n        let completed2 = false;\n        const h1 = source1.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed1 = true;\n                if (completed2) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        const h2 = source2.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed2 = true;\n                if (completed1) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        return {\n            Dispose() {\n                h1.Dispose();\n                h2.Dispose();\n            },\n        };\n    });\n}\nexport function pairwise(source) {\n    return new Observable((observer) => {\n        let last;\n        return source.Subscribe(new Observer((next) => {\n            if (last != null) {\n                observer.OnNext([last, next]);\n            }\n            last = next;\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function partition(predicate, source) {\n    return [filter(predicate, source), filter((x) => !predicate(x), source)];\n}\nexport function scan(collector, state, source) {\n    return new Observable((observer) => {\n        return source.Subscribe(new Observer((t) => {\n            protect(() => collector(state, t), (u) => { state = u; observer.OnNext(u); }, observer.OnError);\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function split(splitter, source) {\n    return [\n        choose((v) => Choice_tryValueIfChoice1Of2(splitter(v)), source),\n        choose((v) => Choice_tryValueIfChoice2Of2(splitter(v)), source)\n    ];\n}\nexport function subscribe(callback, source) {\n    return source.Subscribe(new Observer(callback));\n}\n","namespace Sutil\n\nopen System\nopen Browser.Dom\nopen System.Collections.Generic\nopen Browser.Types\nopen Interop\n\n[<RequireQualifiedAccess>]\nmodule ObservableStore =\n\n    let log s = Logging.log \"store\" s\n\n    type StoreCons<'Model, 'Store> = (unit -> 'Model) -> ('Model -> unit) -> 'Store * Update<'Model>\n\n    module internal Helpers =\n        type CmdHandler<'Msg>(handler, ?dispose) =\n            member _.Handle(cmd: Cmd<'Msg>): unit = handler cmd\n            member _.Dispose() = match dispose with Some d -> d () | None -> ()\n            interface IDisposable with\n                member this.Dispose() = this.Dispose()\n\n    #if FABLE_COMPILER\n        open Fable.Core\n\n        [<Emit(\"$0 === $1\")>]\n        let fastEquals (x: 'T) (y: 'T): bool = jsNative\n\n        let cmdHandler (dispatch: 'Msg -> unit): CmdHandler<'Msg> =\n            new CmdHandler<_>(List.iter (fun cmd -> JS.setTimeout (fun _ -> cmd dispatch) 0 |> ignore))\n    #else\n        let fastEquals (x: 'T) (y: 'T): bool = Unchecked.equals x y\n\n        let cmdHandler (dispatch: 'Msg -> unit): CmdHandler<'Msg> =\n            let cts = new Threading.CancellationTokenSource()\n\n            let mb = MailboxProcessor.Start(fun inbox -> async {\n                while true do\n                    let! msg = inbox.Receive()\n                    dispatch msg\n            }, cts.Token)\n\n            new CmdHandler<_>(List.iter (fun cmd -> cmd mb.Post), fun _ -> cts.Cancel())\n    #endif\n\n    module Registry =\n        open Fable.Core\n        open Fable.Core.JsInterop\n\n        let mutable nextId = 0\n        let idToStore = new Dictionary<int,obj>()\n        let storeToId = new Dictionary<obj,int>()\n        //let disposed = new Dictionary<obj,int>()\n\n        let notifyUpdateStore s v =\n            DOM.dispatch Window.document DOM.Event.UpdateStore {| Value = v |}\n\n        let notifyMakeStore s =\n            if storeToId.ContainsKey(s) then failwith \"Store is already registered!\"\n            let id = nextId\n            log $\"make store #{id}\"\n            nextId <- nextId + 1\n            idToStore.[id] <- s\n            storeToId.[s] <- id\n            DOM.dispatchSimple Window.document DOM.Event.NewStore\n\n        let notifyDisposeStore (s:obj) =\n            //if not (storeToId.ContainsKey(s)) then\n            //    if disposed.ContainsKey(s) then\n            //        failwith $\"Store {disposed.[s]} has already been disposed\"\n            //    else\n            //        failwith \"Store is unknown to registry\"\n\n            let id = storeToId.[s]\n            log($\"dispose store #{id}\")\n            try\n                idToStore.Remove(id) |> ignore\n                storeToId.Remove(s) |> ignore\n                //disposed.[s] <- id\n            with\n            | x -> Logging.error $\"disposing store {id}: {x.Message}\"\n\n        let getStoreById id : IStoreDebugger =\n            (idToStore.[id] :?> IStore<obj>).Debugger\n\n        let controlBlock () : DevToolsControl.IControlBlock = {\n            new DevToolsControl.IControlBlock with\n                member _.ControlBlockVersion = 1\n                member _.Version = { Major = 0; Minor = 1; Patch = 0 }\n                member _.GetOptions() = DevToolsControl.Options\n                member _.SetOptions(op) = DevToolsControl.Options <- op\n                member _.GetStores() = storeToId.Values |> Seq.toArray\n                member _.GetStoreById(id) = getStoreById id\n                member _.GetLogCategories() = Logging.enabled |> Seq.map (fun k -> k.Key , k.Value) |> Seq.toArray\n                member _.SetLogCategories(states) =\n                    Logging.initWith states\n                member _.PrettyPrint(id) =\n                    (DOM.findNodeWithSvId Window.document id) |> Option.iter (fun n -> (DOM.DomNode n).PrettyPrint(\"Node #\" + string id))\n                member _.GetMountPoints() = [| |]\n                    //DOM.allMountPoints()\n                    //    |> List.map (fun mp -> { new DevToolsControl.IMountPoint with\n                    //                        member _.Id = mp.MountId\n                    //                        member _.Remount() = mp.Mount() |> ignore })\n                    //    |> List.toArray\n        }\n\n        let initialise (doc:Document) =\n            DevToolsControl.initialise doc (controlBlock())\n\n    let mutable private _nextStoreId = 0\n    let private nextStoreId() =\n        let n = _nextStoreId\n        _nextStoreId <- n + 1\n        n\n\n    // Allow stores that can handle mutable 'Model types (eg, <input>.FileList). In this\n    // case we can pass (fun _ _ -> true)\n    type Store<'Model>(init: unit -> 'Model, dispose: 'Model -> unit) =\n        let mutable uid = 0\n        let storeId = nextStoreId()\n        let mutable name = \"store-\" + (string storeId)\n        let mutable _modelInitialized = false\n        let mutable _model = Unchecked.defaultof<_>\n        let model() =\n            if not _modelInitialized then\n                _model <- init()\n                _modelInitialized <- true\n            _model\n        let subscribers =\n            Collections.Generic.Dictionary<_, IObserver<'Model>>()\n\n        override _.ToString() = $\"#{storeId}={_model}\"\n\n        member _.Value = model()\n\n        member this.Update(f: 'Model -> 'Model) =\n            let newModel = f (model())\n\n            // Send every update. Use 'distinctUntilChanged' with fastEquals to get previous behaviour\n            //Fable.Core.JS.console.log($\"Update {_model} -> {newModel}\")\n            _model <- newModel\n\n            if subscribers.Count > 0 then\n                subscribers.Values\n                    |> Seq.iter (fun s -> s.OnNext(_model))\n\n        member this.Subscribe(observer: IObserver<'Model>): IDisposable =\n            let id = uid\n            uid <- uid + 1\n\n            Logging.log \"store\" $\"subscribe {id}\"\n\n            subscribers.Add(id, observer)\n\n            // TODO: Is this the right way to report the model to the subscriber immediately?\n            //Fable.Core.JS.setTimeout (fun _ -> observer.OnNext(model)) 0 |> ignore\n\n            // Sutil depends on an immediate callback\n            observer.OnNext(model())\n\n            Helpers.disposable <| fun () ->\n                Logging.log \"store\" $\"unsubscribe {id}\"\n                subscribers.Remove(id) |> ignore\n\n        member this.Name with get() = name and set (v) = name <- v\n\n        member this.Dispose() =\n            subscribers.Values |> Seq.iter (fun x -> x.OnCompleted())\n            subscribers.Clear()\n            dispose (model())\n            _model <- Unchecked.defaultof<_>\n            Registry.notifyDisposeStore this\n\n        interface IStore<'Model> with\n            member this.Subscribe(observer: IObserver<'Model>) = this.Subscribe(observer)\n            member this.Update(f) = this.Update(f)\n            member this.Value = this.Value\n            member this.Name with get() = this.Name and set (v:string) = this.Name <- v\n            member this.Debugger = {\n                    new IStoreDebugger with\n                        member _.Value = upcast this.Value\n                        member _.NumSubscribers = subscribers.Count }\n\n        interface IDisposable with\n            member this.Dispose() = this.Dispose()\n\n    let makeElmishWithCons (init: 'Props -> 'Model * Cmd<'Msg>)\n                           (update: 'Msg -> 'Model -> 'Model * Cmd<'Msg>)\n                           (dispose: 'Model -> unit)\n                           (cons: StoreCons<'Model, 'Store>)\n                           : 'Props -> 'Store * Dispatch<'Msg> =\n\n        let mutable _storeDispatch: ('Store * Dispatch<'Msg>) option = None\n\n        let mutable _cmdHandler = Unchecked.defaultof<Helpers.CmdHandler<'Msg>>\n            //new Helpers.CmdHandler<'Msg>(ignore)\n\n        fun props ->\n            match _storeDispatch with\n            | Some storeDispatch ->\n                storeDispatch\n            | None ->\n                let store, storeUpdate =\n                    cons\n                        (fun () ->\n                            let m, cmd = init props\n                            _cmdHandler.Handle cmd\n                            m)\n                        (fun m ->\n                            _cmdHandler.Dispose()\n                            dispose m)\n\n                let dispatch msg =\n                    let mutable _cmds = []\n                    storeUpdate(fun model ->\n                        let model, cmds = update msg model\n                        _cmds <- cmds\n                        model)\n                    _cmdHandler.Handle _cmds\n\n                _cmdHandler <- Helpers.cmdHandler dispatch\n                _storeDispatch <- Some(store, dispatch)\n                store, dispatch\n\n    let makeStore<'Model> (init:unit->'Model) (dispose:'Model->unit) =\n        let s = new Store<'Model>(init,dispose)\n        Registry.notifyMakeStore s\n        // We have to delay this, because it will provoke a call through the subscribers, and _cmdHandler isn't set yet\n        DOM.rafu <| fun () -> s.Subscribe(Registry.notifyUpdateStore s) |> ignore\n        s\n\n    let makeElmishWithDocument (doc:Document) (init: 'Props -> 'Model * Cmd<'Msg>)\n                   (update: 'Msg -> 'Model -> 'Model * Cmd<'Msg>)\n                   (dispose: 'Model -> unit)\n                   : 'Props -> IStore<'Model> * Dispatch<'Msg> =\n\n        //Registry.initialise doc\n\n        makeElmishWithCons init update dispose (fun i d ->\n            let s = makeStore i  d\n            let u = (fun f -> s.Update(f); DOM.Event.notifyUpdated doc)\n            upcast s, u)\n\n    let makeElmishSimpleWithDocument (doc:Document) (init: 'Props -> 'Model)\n                   (update: 'Msg -> 'Model -> 'Model)\n                   (dispose: 'Model -> unit)\n                   : 'Props -> IStore<'Model> * Dispatch<'Msg> =\n\n        //Registry.initialise doc\n\n        let init p = init p, []\n        let update msg model = update msg model, []\n        makeElmishWithCons init update dispose (fun i d ->\n            let s = makeStore i  d\n            let u = (fun f -> s.Update(f); DOM.Event.notifyUpdated doc)\n            upcast s, u)\n\n    let makeElmishSimple i u d = makeElmishSimpleWithDocument document i u d\n    let makeElmish       i u d = makeElmishWithDocument       document i u d\n\n\n#if USE_ELMISH_PROGRAM\ntype Program<'Arg,'Model,'Msg,'View> = private {\n    Init : 'Arg -> 'Model * Cmd<'Msg>\n    Update: 'Msg -> 'Model -> 'Model * Cmd<'Msg>\n    Dispose: 'Model -> unit\n    View: IStore<'Model> -> Dispatch<'Msg> -> 'View\n}\n\nmodule Program =\n    let map mapInit mapUpdate mapView mapDispose program = {\n        Init = mapInit program.Init\n        Update = mapUpdate program.Update\n        View = mapView program.View\n        Dispose = mapDispose program.Dispose\n    }\n\n    let mkSimple init update view =\n        {\n            Init = fun () -> init(), Cmd.none\n            Update = fun msg model -> update msg model, Cmd.none\n            Dispose = ignore\n            View = view\n        }\n\n    let mkProgram init update view =\n        {\n            Init = init\n            Update = update\n            Dispose = ignore\n            View = view\n        }\n\n    let run element arg p =\n        let model, dispatch = arg |> ObservableStore.makeElmish p.Init p.Update p.Dispose\n        p.View model dispatch |> DOM.mountElement element\n#endif\n","module Sutil.Program\n\n    open Sutil.DOM\n    open Browser.Types\n    open Browser.Dom\n\n    type MountPoint = {\n            Doc : Document\n            MountId : string\n            App : SutilElement\n        }\n        with\n            member this.Mount() =\n                let host = this.Doc.querySelector($\"#{this.MountId}\")\n                mountOn (exclusive this.App) host\n\n    // Tried to make these into static members, but get error\n    // \"These element declarations are not permitted in an augmentation F# compiler\"\n    // MountPoint is passed to DevTools\n    let mutable private _allMountPoints = []\n\n    let allMountPoints() = _allMountPoints\n\n    let private createMountPoint doc id app =\n        let self = { Doc = doc; MountId = id; App = app }\n        _allMountPoints <- self :: _allMountPoints\n        self\n\n    //\n    // Mount a top-level application SutilElement into an existing document\n    //\n    let rec mountElementOnDocument (doc : Document) id (app : SutilElement)  =\n        let mp = createMountPoint doc id app\n        ObservableStore.Registry.initialise doc\n        mp.Mount() |> ignore\n\n    let rec mountElement id (app : SutilElement)  =\n        mountElementOnDocument document id app\n\n    //let makeComponent name (element : SutilElement) : SutilElement = fun (ctx,parent) ->\n    //    element( { ctx with StyleName = \"\" }, parent )\n\n    //\n    // Sutil Elmish\n    // The model mutates in Sutil, so the function signatures are slightly different to Elmish.\n    // This approach isn't necessary, but it could be helpful in that it encourages the view to\n    // dispatch messages that are then processed only in the update function.\n    //\n    let makeProgram host init update view =\n        let doc = Browser.Dom.document\n        let model = init()\n\n        let makeDispatcher update =\n            (fun msg ->\n                update msg model\n                DOM.Event.notifyUpdated doc)\n\n        mountElementOnDocument doc host <| view model (makeDispatcher update)","namespace Sutil\n\nopen System\n\n[<RequireQualifiedAccess>]\nmodule Observable =\n\n    [<AbstractClass>]\n    type BasicObserver<'T>() =\n\n        let mutable stopped = false\n        abstract Next : value : 'T -> unit\n        abstract Error : error : exn -> unit\n        abstract Completed : unit -> unit\n\n        interface IObserver<'T> with\n            member x.OnNext value =\n                if not stopped then x.Next value\n            member x.OnError e =\n                if not stopped then stopped <- true; x.Error e\n            member x.OnCompleted () =\n                if not stopped then stopped <- true; x.Completed ()\n\n    let zip<'A,'B> (a:IObservable<'A>) (b:IObservable<'B>) : IObservable<'A*'B> =\n        { new System.IObservable<'A*'B> with\n            member _.Subscribe( h : IObserver<'A*'B> ) =\n                let mutable initState = 0\n                let mutable valueA = Unchecked.defaultof<'A>\n                let mutable valueB = Unchecked.defaultof<'B>\n\n                let notify() =\n                    if initState = 2 then h.OnNext( valueA, valueB )\n\n                let disposeA = a.Subscribe( fun v ->\n                    if (initState = 0) then initState <- 1\n                    valueA <- v\n                    notify()\n                )\n\n                let disposeB = b.Subscribe( fun v ->\n                    if (initState = 1) then initState <- 2\n                    valueB <- v\n                    notify()\n                )\n\n                Helpers.disposable (fun _ ->\n                    disposeA.Dispose()\n                    disposeB.Dispose()\n                )\n        }\n\n    let distinctUntilChangedCompare<'T> (eq:'T -> 'T -> bool) (source:IObservable<'T>) : IObservable<'T> =\n        { new System.IObservable<'T> with\n            member _.Subscribe( h : IObserver<'T> ) =\n                let mutable value = Unchecked.defaultof<'T>\n                let mutable init = false\n\n                // For Fable: isNull(unbox(None)) = true\n                // Can't use Unchecked.defaultof<'T> as meaning \"init = false\"\n                let safeEq next = init && eq value next\n\n                let disposeA = source.Subscribe( fun next ->\n                    if not (safeEq next) then\n                        h.OnNext next\n                        value <- next\n                        init <- true\n                )\n\n                Helpers.disposable (fun _ ->\n                    disposeA.Dispose()\n                )\n        }\n\n    let distinctUntilChanged<'T when 'T : equality> (source:IObservable<'T>) : IObservable<'T> =\n        source |> distinctUntilChangedCompare (=)\n\n    /// Determines whether an observable sequence contains a specified value\n    /// which satisfies the given predicate\n    let exists predicate (source: IObservable<'T>) =\n        { new System.IObservable<'T> with\n            member _.Subscribe( h : IObserver<'T> ) =\n                let disposeA = source.Subscribe( fun x ->\n                    try h.OnNext (predicate x)\n                    with ex -> h.OnError ex\n                )\n                Helpers.disposable (fun _ -> disposeA.Dispose() )\n        }\n\n    /// Filters the observable elements of a sequence based on a predicate\n    let filter predicate (source: IObservable<'T>) =\n        { new System.IObservable<'T> with\n            member _.Subscribe( h : IObserver<'T> ) =\n                let disposeA = source.Subscribe( fun x ->\n                    try if predicate x then h.OnNext x\n                    with ex -> h.OnError ex\n                )\n                Helpers.disposable (fun _ -> disposeA.Dispose() )\n        }\n\n    //let choose (f : 'T option -> 'R option) (source:IObservable<'T option>) : IObservable<'R> =\n    //    { new System.IObservable<_> with\n    //        member _.Subscribe( h : IObserver<_> ) =\n    //            let disposeA = source.Subscribe( fun x ->\n    //                (try f x with ex -> h.OnError ex;None) |> Option.iter h.OnNext\n    //            )\n    //            Helpers.disposable (fun _ -> disposeA.Dispose() )\n    //    }\n","namespace Sutil\n\nopen System\nopen Browser.Dom\nopen Microsoft.FSharp.Core\nopen Browser.Types\nopen System.Collections.Generic\n\nmodule internal StoreHelpers =\n    let disposable f =\n        { new IDisposable with\n            member _.Dispose() = f () }\n\n[<RequireQualifiedAccess>]\nmodule Store =\n\n    /// <summary>\n    /// Create a new store\n    /// </summary>\n    /// <example>\n    /// <code lang=\"fsharp\">\n    ///     let intStore: IStore&lt;int&gt; = Store.make 1\n    ///\n    ///     let anonymousStore:\n    ///         IStore&lt;{| prop1: number;\n    ///                   prop2: option string |}&gt;\n    ///         = Store.make {| prop1 = 10; prop2 = None |}\n    ///     (* After using the store *)\n    ///     intStore.Dispose()\n    ///     anonymousStore.Dispose()\n    /// </code>\n    /// </example>\n    let make (modelInit: 'T) : IStore<'T> =\n        let init () = modelInit\n        let s = ObservableStore.makeStore init ignore\n        upcast s\n\n    /// <summary>\n    /// Obtains the current value of the store\n    /// </summary>\n    /// <example><code>\n    ///     let value = Store.get initStore\n    ///     value = 1 // true\n    ///     let value2 = Store.get anonymousStore\n    ///     Option.isNone value2.prop2 // true\n    /// </code></example>\n    let get (store: IStore<'T>) : 'T = store.Value\n\n    /// <summary>\n    /// Replaces the current value of the store\n    /// </summary>\n    /// <example><code>\n    ///     Store.set 2 intStore\n    ///     let value = Store.get intStore\n    ///     value = 1 // false\n    /// </code></example>\n    let set (store: IStore<'T>) newValue : unit = store.Update(fun _ -> newValue)\n\n    /// <summary>\n    /// Provides a subscription that invokes a callback\n    /// every time the store value is updated\n    /// </summary>\n    /// <example>\n    ///     let subscription =\n    ///         Store.subscribe (fun value -> printfn $\"{value}\") intStore\n    ///\n    ///     (* after you are done with the subscription *)\n    ///\n    ///     subscription.Dispose()\n    /// </example>\n    let subscribe (callback: 'T -> unit) (store: IObservable<'T>) = store.Subscribe(callback)\n\n    /// <summary>\n    /// Returns an observable that will resolve to the result of said callback\n    /// </summary>\n    /// <example>\n    ///     let subscription: IObservable&lt;string&gt; =\n    ///         Store.map (fun value -> $\"{value}\") intStore\n    ///\n    ///     (* after you are done with the subscription *)\n    ///\n    ///     subscription.Dispose()\n    /// </example>\n    let map<'A, 'B> (callback: 'A -> 'B) (store: IObservable<'A>) = store |> Observable.map callback\n\n    /// <summary>\n    /// Applies a predicate function to obtain an observable of the elements that evaluated to true\n    /// </summary>\n    /// <example>\n    ///     let usersOver18: IObservable&lt;string&gt; =\n    ///         Store.filter (fun user -> user.age > 18) usersStore\n    ///\n    ///     (* after you are done with the subscription *)\n    ///\n    ///     over18.Dispose()\n    /// </example>\n    let filter<'A> (predicate: 'A -> bool) (store: IObservable<'A>) = store |> Observable.filter predicate\n\n    /// <summary>\n    /// Provides an observable that will emit a value only when the updated store value is different from the previous one\n    /// </summary>\n    /// <example>\n    ///     let store = Store.make 0\n    ///     let whenDistinct = Store.distinct store\n    ///     let sub1 = store.subscribe(printfn \"number: %i\")\n    ///     let sub2 = whenDistinct.subscribe(printfn \"number: %i\")\n    ///     Store.set 0 store // store emits\n    ///     Store.set 0 store // when distinct doesn't emit\n    ///     Store.set 1 store // both store and distinct emit\n    ///     Store.set 1 store // when distinct doesn't emit\n    /// </example>\n    let distinct<'T when 'T: equality> (source: IObservable<'T>) = Observable.distinctUntilChanged source\n\n    /// <summary>\n    /// Merges two stores into a single tupled observable\n    /// </summary>\n    /// <example>\n    ///     let tableInfo =\n    ///     Observable.zip\n    ///         (Strore.map(fun model -> model.rows) model)\n    ///         (Strore.map(fun model -> model.columns) model)\n    ///\n    ///     (* once done with tableInfo *)\n    ///\n    ///     tableInfo.Dispose()\n    /// </example>\n    let zip source1 source2 = Observable.zip source1 source2\n\n    let current (store: IObservable<'T>) =\n        let mutable value = Unchecked.defaultof<'T>\n        store.Subscribe(fun v -> value <- v).Dispose() // Works only when root observable is a store, or root responds immediately upon subscription\n        value\n\n    /// <summary>\n    /// Takes a store and applies a mapping function then returns the value from the evaluated function\n    /// </summary>\n    /// <remarks>\n    /// This might be called foldMap\n    /// </remarks>\n    /// <example>\n    /// ```\n    ///     let store: IStore&lt;{| name: string; budget: decimal |}> =\n    ///     Store.make {| name = \"Frank\"; budget = 547863.26M |}\n    ///\n    ///     let formattedBudget: string =\n    ///         Store.getMap\n    ///             (fun model -> sprintf $\"$ %0.00M{model.budget}\")\n    ///             store\n    ///     printf %\"Budget available: {formattedBudget}\n    ///  ```\n    ///  </example>\n    let getMap callback store = store |> get |> callback\n\n    /// <summary>\n    /// Calls the callback upon initialization and whenever the store is updated. This is the same as subscribe\n    /// and ignoring the unsubscription callback\n    /// </summary>\n    /// <example>\n    ///     Store.subscribe (fun value -> printfn $\"{value}\") intStore\n    /// </example>\n    let write<'A> (callback: 'A -> unit) (store: IObservable<'A>) = subscribe callback store |> ignore\n\n    /// <summary>Modify the store by mapping its current value with a callback</summary>\n    /// <example>\n    ///     let store: IStore&lt;int> = Store.make 2\n    ///\n    ///     let squareMe() =\n    ///         Store.modify (fun model -> model * model) store\n    ///\n    ///     Html.div [\n    ///         bindFragment store &lt;| fun model -> text $\"The value is {model}\"\n    ///         Html.button [\n    ///             onClick (fun _ -> squareMe()) []\n    ///             text \"Square me\"\n    ///         ]\n    ///     ]\n    /// </example>\n    let modify (callback: ('T -> 'T)) (store: Store<'T>) = store |> getMap callback |> set store\n\n    /// <summary>\n    /// Takes two observables and subscribes to both with a single callback,\n    /// both values will be cached individually and\n    /// on every notify they will be updated and emitted,\n    /// every notification can come from any of the observables\n    /// </summary>\n    /// <example>\n    ///     let player1Score = Store.make 0\n    ///     let player2Score = Store.make 0\n    ///\n    ///     let printPlayerScores (score1: int * score2: int) =\n    ///         printfn $\"Player 1: {score1}\\nPlayer2: {score2}\"\n    ///\n    ///     let scores =\n    ///         Store.subscribe2\n    ///             player1Score\n    ///             player2Score\n    ///             printPlayerScore\n    ///     (* Game Finished, dispose the observables *)\n    ///     scores.Dispose()\n    /// </example>\n    let subscribe2<'A, 'B>\n        (source1: IObservable<'A>)\n        (source2: IObservable<'B>)\n        (callback: ('A * 'B) -> unit)\n        : System.IDisposable =\n        // Requires that subscribe makes an initializing first callback. Otherwise, there will\n        // be a missing value for A (say) when B (say) sends an update.\n        let mutable initState = 0\n\n        let mutable cachea : 'A = Unchecked.defaultof<'A>\n        let mutable cacheb : 'B = Unchecked.defaultof<'B>\n\n        let notify () =\n            if initState = 2 then\n                callback (cachea, cacheb)\n\n        let unsuba =\n            source1\n            |> subscribe\n                (fun v ->\n                    if initState = 0 then initState <- 1\n                    cachea <- v\n                    notify ())\n\n        let unsubb =\n            source2\n            |> subscribe\n                (fun v ->\n                    if initState = 1 then initState <- 2\n                    cacheb <- v\n                    notify ())\n\n        if (initState <> 2) then\n            console.log (\"Error: subscribe didn't initialize us\")\n            failwith \"Subscribe didn't initialize us\"\n\n        StoreHelpers.disposable\n        <| fun () ->\n            unsuba.Dispose()\n            unsubb.Dispose()\n\n    ///<summary>\n    /// Creates a store and a dispatch method commonly used\n    /// in elmish programs, this can be used to model more complex views that require better\n    /// control flow and a predictable state.\n    /// </summary>\n    /// <example>\n    ///     type State = { count: int }\n    ///     type Msg =\n    ///         | Increment\n    ///         | Decrement\n    ///         | Reset\n    ///     let init _ = { count = 0 }\n    ///\n    ///     let upddate msg state =\n    ///         match msg with\n    ///         | Increment -> { state = state.count + 1 }\n    ///         | Decrement -> { state = state.count - 1 }\n    ///         | Reset -> { state = 0 }\n    ///\n    ///     let view() =\n    ///         let state, dispatch = Store.makeElmishSimple init update ignore ()\n    ///\n    ///         Html.article [\n    ///             disposeOnUnmount [ state ]\n    ///             bindFragment state &lt;| fun state -> text $\"Count: {state.count}\"\n    ///\n    ///             Html.button [ text \"Increment\"; onClick (fun _ -> dispatch) [] ]\n    ///             Html.button [ text \"Decrement\"; onClick (fun _ -> dispatch) [] ]\n    ///             Html.button [ text \"Reset\"; onClick (fun _ -> dispatch Reset) [] ]\n    ///         ]\n    /// </example>\n    let makeElmishSimple<'Props, 'Model, 'Msg>\n        (init: 'Props -> 'Model)\n        (update: 'Msg -> 'Model -> 'Model)\n        (dispose: 'Model -> unit)\n        =\n        ObservableStore.makeElmishSimple init update dispose\n\n    ///<summary>\n    /// Creates a store and a dispatch function as `Store.makeElmishSimple`\n    /// the difference being that this version handles [Elmish commands](https://elmish.github.io/elmish/index.html#Commands)\n    /// as well, generally used in more complex UIs given that with commands you can also handle\n    /// asynchronous code like fetching resources from a server or calling any\n    /// function that returns a promise or async\n    /// </summary>\n    /// <example>\n    ///     type State = { count: int }\n    ///     type Msg =\n    ///         | Increment\n    ///         | Decrement\n    ///         | Reset\n    ///         | AsyncIncrement\n    ///         | AsyncDecrement\n    ///     let init _ = { count = 0 }, Cmd.ofMsg AsyncIncrement\n    ///\n    ///     let wait1S () =\n    ///         async {\n    ///             do! Async.Sleep 1000\n    ///         }\n    ///\n    ///     let upddate msg state =\n    ///         match msg with\n    ///         | Increment -> { state = state.count + 1 }, Cmd.none\n    ///         | Decrement -> { state = state.count - 1 }, Cmd.none\n    ///         | AsyncIncrement ->\n    ///             state, Cmd.ofAsync.perform () wait1S Increment\n    ///         | AsyncDecrement->\n    ///             state, Cmd.ofAsync.perform () wait1S Decrement\n    ///         | Reset -> { state = 0 } Cmd.none\n    ///\n    ///     let view() =\n    ///         let state, dispatch = Store.makeElmish init update ignore ()\n    ///\n    ///         Html.article [\n    ///             disposeOnUnmount [ state ]\n    ///             bindFragment state &lt;| fun state -> text $\"Count: {state.count}\"\n    ///\n    ///             Html.button [ text \"Increment\"; onClick (fun _ -> dispatch Increment) [] ]\n    ///             Html.button [ text \"Async Increment\"; onClick (fun _ -> dispatch AsyncIncrement) [] ]\n    ///             Html.button [ text \"Decrement\"; onClick (fun _ -> dispatch Decrement) [] ]\n    ///             Html.button [ text \"Async Decrement\"; onClick (fun _ -> dispatch AsyncDecrement) [] ]\n    ///             Html.button [ text \"Reset\"; onClick (fun _ -> dispatch Reset) [] ]\n    ///         ]\n    /// </example>\n    let makeElmish<'Props, 'Model, 'Msg>\n        (init: 'Props -> 'Model * Cmd<'Msg>)\n        (update: 'Msg -> 'Model -> 'Model * Cmd<'Msg>)\n        (dispose: 'Model -> unit)\n        =\n        ObservableStore.makeElmish init update dispose\n\n[<AutoOpen>]\nmodule StoreOperators =\n\n    /// <summary>\n    /// Alias for `Store.getMap`, takes a store and applies a mapping function then returns the value from the evaluated function\n    /// </summary>\n    /// <remarks>\n    /// This might be called foldMap\n    /// </remarks>\n    /// <example>\n    ///     let store: IStore&lt;{| name: string; budget: decimal |}> =\n    ///     Store.make {| name = \"Frank\"; budget = 547863.26M |}\n    ///\n    ///     let formattedBudget: string =\n    ///         store |-> (fun model -> sprintf $\"$ %0.00M{model.budget}\")\n    ///     printf %\"Budget available: {formattedBudget}\n    ///  </example>\n    //let (|%>) s f = Store.map f s\n    let (|->) s f = Store.getMap f s\n\n    /// <summary>\n    /// Alias for `Store.map`, returns an observable that will resolve to the result of said callback\n    /// </summary>\n    /// <example>\n    ///     let subscription: IObservable&lt;string&gt; =\n    ///         intStore .> (fun value -> $\"{value}\")\n    ///\n    ///     (* after you are done with the subscription *)\n    ///\n    ///     subscription.Dispose()\n    /// </example>\n    let (.>) s f = Store.map f s\n\n    /// <summary>\n    /// Alias for `Store.set`,  replaces the current value of the store\n    /// </summary>\n    /// <example>\n    ///     intStore &lt;~ 2\n    ///     let value = Store.get intStore\n    ///     value = 1 // false\n    /// </example>\n    let (<~) s v = Store.set s v\n\n    /// <summary>\n    /// Alias for `Store.set`, replaces the current value of the store\n    /// </summary>\n    /// <example>\n    ///     intStore &lt;~- 2\n    ///     let value = Store.get intStore\n    ///     value = 1 // false\n    /// </example>\n    let (<~-) s v = Store.set s v\n\n    /// <summary>\n    /// Alias for `Store.set`,  replaces the current value of the store\n    /// </summary>\n    /// <example>\n    ///     2 -~> intStore\n    ///     let value = Store.get intStore\n    ///     value = 1 // false\n    /// </example>\n    let (-~>) v s = Store.set s v\n\n    /// <summary>\n    /// Alias for `Store.modify`. Modify the store by mapping its current value with a callback\n    /// </summary>\n    /// <example>\n    ///     let store: IStore&lt;int> = Store.make 2\n    ///\n    ///     let squareMe() =\n    ///         store &lt;~= (fun model -> model * model)\n    ///\n    ///     Html.div [\n    ///         bindFragment store &lt;| fun model -> text $\"The value is {model}\"\n    ///         Html.button [\n    ///             onClick (fun _ -> squareMe()) []\n    ///             text \"Square me\"\n    ///         ]\n    ///     ]\n    /// </example>\n    let (<~=) store map = Store.modify map store\n\n    /// <summary>\n    /// /// Alias for `Store.modify` Modify the store by mapping its current value with a callback\n    /// /// </summary>\n    /// <example>\n    ///     let store: IStore&lt;int> = Store.make 2\n    ///\n    ///     let squareMe() =\n    ///         (fun model -> model * model) =~> store\n    ///\n    ///     Html.div [\n    ///         bindFragment store &lt;| fun model -> text $\"The value is {model}\"\n    ///         Html.button [\n    ///             onClick (fun _ -> squareMe()) []\n    ///             text \"Square me\"\n    ///         ]\n    ///     ]\n    /// </example>\n    let (=~>) map store = Store.modify map store\n\n[<AutoOpen>]\nmodule StoreExtensions =\n\n    let firstOf (selectors: IObservable<bool> list) =\n        let matches = new HashSet<int>()\n        let mutable current = -1\n        let s = Store.make current\n\n        let setMatch i state =\n            if state then\n                matches.Add(i) |> ignore\n            else\n                matches.Remove(i) |> ignore\n\n        let scan () =\n            let next =\n                matches\n                |> Seq.fold (fun a i -> if a < 0 || i < a then i else a) -1\n\n            if (next <> current) then\n                s <~ next\n                current <- next\n\n        selectors\n        |> List.iteri\n            (fun i pred ->\n                let u =\n                    pred.Subscribe\n                        (fun state ->\n                            setMatch i state\n                            scan ())\n\n                ())\n\n        s\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","module Sutil.ResizeObserver\n\n// Ported from Svelte\n\nopen Browser.Types\nopen Browser.Dom\nopen Browser.CssExtensions\nopen System\nopen Interop\n\nlet isCrossOrigin = false // TODO\n\ntype private ResizeSubscriber = {\n    Callback: unit -> unit\n    Id : int\n}\n\ntype ResizeObserver( el : HTMLElement ) =\n    let mutable iframe : HTMLIFrameElement = Unchecked.defaultof<_>\n    let mutable subId = 0\n    let mutable unsubscribe : (unit -> unit) = Unchecked.defaultof<_>\n    let mutable subscribers = []\n\n    let notify _ =\n        subscribers |> List.iter (fun sub -> sub.Callback())\n\n    do\n        let computedStyle = Window.getComputedStyle(el)\n        let zIndex =  (try int(computedStyle.zIndex) with |_ -> 0) - 1;\n\n        if computedStyle.position = \"static\" || computedStyle.position = \"\" then\n            el.style.position <- \"relative\"\n\n        iframe <- downcast (DOM.documentOf el).createElement(\"iframe\")\n        let style = sprintf \"%sz-index: %i;\" \"display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none;\" zIndex\n        iframe.setAttribute(\"style\", style)\n        iframe.setAttribute(\"aria-hidden\", \"true\")\n        iframe.setAttribute(\"tabindex\", \"-1\")\n\n        if isCrossOrigin then\n            iframe.setAttribute(\"src\", \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\")\n\n            unsubscribe <- DOM.listen \"message\" window\n                (fun e -> if Helpers.fastEquals (Interop.get e \"source\") iframe.contentWindow then notify(e))\n        else\n            iframe.setAttribute(\"src\", \"about:blank\")\n            iframe.onload <- (fun e ->\n                unsubscribe <- DOM.listen \"resize\" iframe.contentWindow notify)\n\n        el.appendChild(iframe) |> ignore\n\n    member _.Subscribe(callback : (unit -> unit)) =\n        let sub = { Callback = callback; Id = subId }\n        subId <- subId + 1\n        subscribers <- sub :: subscribers\n        Helpers.disposable <| fun () -> subscribers <- subscribers |> List.filter (fun s -> s.Id <> sub.Id)\n\n    member _.Dispose() =\n        try unsubscribe() with |_ -> ()\n        if not (isNull iframe) then\n            iframe.parentNode.removeChild(iframe) |> ignore\n\n    interface IDisposable with\n        member this.Dispose() = this.Dispose()\n\nlet getResizer (el:HTMLElement) : ResizeObserver =\n    DOM.NodeKey.getCreate el DOM.NodeKey.ResizeObserver (fun () -> new ResizeObserver(el))\n","import { toIterator, getEnumerator } from \"./Util.js\";\r\nimport { iterate, map, iterateIndexed, concat } from \"./Seq.js\";\r\nimport { FSharpRef } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { getItemFromDict, tryGetValue } from \"./MapUtil.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class HashSet {\r\n    constructor(items, comparer) {\r\n        const this$ = new FSharpRef(null);\r\n        this.comparer = comparer;\r\n        this$.contents = this;\r\n        this.hashMap = (new Map([]));\r\n        this[\"init@8-2\"] = 1;\r\n        const enumerator = getEnumerator(items);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                HashSet__Add_2B595(this$.contents, enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            enumerator.Dispose();\r\n        }\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"HashSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const this$ = this;\r\n        return getEnumerator(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const this$ = this;\r\n        return getEnumerator(concat(this$.hashMap.values()));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](item) {\r\n        const this$ = this;\r\n        HashSet__Add_2B595(this$, item);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        const this$ = this;\r\n        HashSet__Clear(this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](item) {\r\n        const this$ = this;\r\n        return HashSet__Contains_2B595(this$, item);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](array, arrayIndex) {\r\n        const this$ = this;\r\n        iterateIndexed((i, e) => {\r\n            array[arrayIndex + i] = e;\r\n        }, this$);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const this$ = this;\r\n        return HashSet__get_Count(this$) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return false;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](item) {\r\n        const this$ = this;\r\n        return HashSet__Remove_2B595(this$, item);\r\n    }\r\n    get size() {\r\n        const this$ = this;\r\n        return HashSet__get_Count(this$) | 0;\r\n    }\r\n    add(k) {\r\n        const this$ = this;\r\n        HashSet__Add_2B595(this$, k);\r\n        return this$;\r\n    }\r\n    clear() {\r\n        const this$ = this;\r\n        HashSet__Clear(this$);\r\n    }\r\n    delete(k) {\r\n        const this$ = this;\r\n        return HashSet__Remove_2B595(this$, k);\r\n    }\r\n    has(k) {\r\n        const this$ = this;\r\n        return HashSet__Contains_2B595(this$, k);\r\n    }\r\n    keys() {\r\n        const this$ = this;\r\n        return map((x) => x, this$);\r\n    }\r\n    values() {\r\n        const this$ = this;\r\n        return map((x) => x, this$);\r\n    }\r\n    entries() {\r\n        const this$ = this;\r\n        return map((v) => [v, v], this$);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const this$ = this;\r\n        iterate((x) => {\r\n            f(x, x, this$);\r\n        }, this$);\r\n    }\r\n}\r\n\r\nexport function HashSet$reflection(gen0) {\r\n    return class_type(\"Fable.Collections.HashSet\", [gen0], HashSet);\r\n}\r\n\r\nexport function HashSet_$ctor_Z6150332D(items, comparer) {\r\n    return new HashSet(items, comparer);\r\n}\r\n\r\nfunction HashSet__TryFindIndex_2B595(this$, k) {\r\n    const h = this$.comparer.GetHashCode(k) | 0;\r\n    let matchValue;\r\n    let outArg = null;\r\n    matchValue = [tryGetValue(this$.hashMap, h, new FSharpRef(() => outArg, (v) => {\r\n        outArg = v;\r\n    })), outArg];\r\n    if (matchValue[0]) {\r\n        return [true, h, matchValue[1].findIndex((v_1) => this$.comparer.Equals(k, v_1))];\r\n    }\r\n    else {\r\n        return [false, h, -1];\r\n    }\r\n}\r\n\r\nfunction HashSet__TryFind_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return some(getItemFromDict(this$.hashMap, matchValue[1])[matchValue[2]]);\r\n        }\r\n        case 1: {\r\n            return void 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__get_Comparer(this$) {\r\n    return this$.comparer;\r\n}\r\n\r\nexport function HashSet__Clear(this$) {\r\n    this$.hashMap.clear();\r\n}\r\n\r\nexport function HashSet__get_Count(this$) {\r\n    let count = 0;\r\n    let enumerator = getEnumerator(this$.hashMap.values());\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const items = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            count = ((count + items.length) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return count | 0;\r\n}\r\n\r\nexport function HashSet__Add_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return false;\r\n        }\r\n        case 1: {\r\n            if (matchValue[0]) {\r\n                const value = void (getItemFromDict(this$.hashMap, matchValue[1]).push(k));\r\n                return true;\r\n            }\r\n            else {\r\n                this$.hashMap.set(matchValue[1], [k]);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__Contains_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport function HashSet__Remove_2B595(this$, k) {\r\n    const matchValue = HashSet__TryFindIndex_2B595(this$, k);\r\n    let pattern_matching_result;\r\n    if (matchValue[0]) {\r\n        if (matchValue[2] > -1) {\r\n            pattern_matching_result = 0;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n    }\r\n    else {\r\n        pattern_matching_result = 1;\r\n    }\r\n    switch (pattern_matching_result) {\r\n        case 0: {\r\n            getItemFromDict(this$.hashMap, matchValue[1]).splice(matchValue[2], 1);\r\n            return true;\r\n        }\r\n        case 1: {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { singleton, ofArrayWithTail, head, tail, isEmpty as isEmpty_1, FSharpList, fold as fold_1, empty as empty_1, cons } from \"./List.js\";\r\nimport { fill } from \"./Array.js\";\r\nimport { structuralHash, compare, toIterator, equals, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { tryPick as tryPick_1, pick as pick_1, iterate as iterate_1, compareWith, map as map_1, unfold } from \"./Seq.js\";\r\nimport { format, join } from \"./String.js\";\r\nimport { LanguagePrimitives_FastGenericComparer } from \"./FSharp.Core.js\";\r\n\r\nexport class MapTreeLeaf$2 {\r\n    constructor(k, v) {\r\n        this.k = k;\r\n        this.v = v;\r\n    }\r\n}\r\n\r\nexport function MapTreeLeaf$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeLeaf`2\", [gen0, gen1], MapTreeLeaf$2);\r\n}\r\n\r\nexport function MapTreeLeaf$2_$ctor_5BDDA1(k, v) {\r\n    return new MapTreeLeaf$2(k, v);\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport function MapTreeLeaf$2__get_Value(_) {\r\n    return _.v;\r\n}\r\n\r\nexport class MapTreeNode$2 extends MapTreeLeaf$2 {\r\n    constructor(k, v, left, right, h) {\r\n        super(k, v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function MapTreeNode$2$reflection(gen0, gen1) {\r\n    return class_type(\"Map.MapTreeNode`2\", [gen0, gen1], MapTreeNode$2, MapTreeLeaf$2$reflection(gen0, gen1));\r\n}\r\n\r\nexport function MapTreeNode$2_$ctor_499A11FD(k, v, left, right, h) {\r\n    return new MapTreeNode$2(k, v, left, right, h);\r\n}\r\n\r\nexport function MapTreeNode$2__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function MapTreeNode$2__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function MapTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function MapTreeModule_sizeAux(acc_mut, m_mut) {\r\n    MapTreeModule_sizeAux:\r\n    while (true) {\r\n        const acc = acc_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                acc_mut = MapTreeModule_sizeAux(acc + 1, MapTreeNode$2__get_Left(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_sizeAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_size(x) {\r\n    return MapTreeModule_sizeAux(0, x);\r\n}\r\n\r\nexport function MapTreeModule_mk(l, k, v, r) {\r\n    let hl;\r\n    const m = l;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        hl = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const m_1 = r;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        hr = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m_2 = ((hl < hr) ? hr : hl) | 0;\r\n    if (m_2 === 0) {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n    else {\r\n        return MapTreeNode$2_$ctor_499A11FD(k, v, l, r, m_2 + 1);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_rebalance(t1, k, v, t2) {\r\n    let m_2, m2_2, m_3, m2_3;\r\n    let t1h;\r\n    const m = t1;\r\n    if (m != null) {\r\n        const m2 = m;\r\n        t1h = ((m2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const m_1 = t2;\r\n    if (m_1 != null) {\r\n        const m2_1 = m_1;\r\n        t2h = ((m2_1 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_1) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof MapTreeNode$2) {\r\n            if (((m_2 = MapTreeNode$2__get_Left(matchValue), (m_2 != null) ? ((m2_2 = m_2, (m2_2 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_2) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(MapTreeNode$2__get_Left(matchValue));\r\n                if (matchValue_1 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue_1)), MapTreeLeaf$2__get_Key(matchValue_1), MapTreeLeaf$2__get_Value(matchValue_1), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_1), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeModule_mk(t1, k, v, MapTreeNode$2__get_Left(matchValue)), MapTreeLeaf$2__get_Key(matchValue), MapTreeLeaf$2__get_Value(matchValue), MapTreeNode$2__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof MapTreeNode$2) {\r\n            if (((m_3 = MapTreeNode$2__get_Right(matchValue_2), (m_3 != null) ? ((m2_3 = m_3, (m2_3 instanceof MapTreeNode$2) ? MapTreeNode$2__get_Height(m2_3) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(MapTreeNode$2__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof MapTreeNode$2) {\r\n                    return MapTreeModule_mk(MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeNode$2__get_Left(matchValue_3)), MapTreeLeaf$2__get_Key(matchValue_3), MapTreeLeaf$2__get_Value(matchValue_3), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_3), k, v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Map.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_mk(MapTreeNode$2__get_Left(matchValue_2), MapTreeLeaf$2__get_Key(matchValue_2), MapTreeLeaf$2__get_Value(matchValue_2), MapTreeModule_mk(MapTreeNode$2__get_Right(matchValue_2), k, v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Map.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_mk(t1, k, v, t2);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_add(comparer, k, v, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_add(comparer, k, v, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c < 0) {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, MapTreeModule_empty(), m, 2);\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n        }\r\n        else {\r\n            return MapTreeNode$2_$ctor_499A11FD(k, v, m, MapTreeModule_empty(), 2);\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeLeaf$2_$ctor_5BDDA1(k, v);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryFind(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_tryFind:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c === 0) {\r\n                return some(MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n            else if (m2 instanceof MapTreeNode$2) {\r\n                comparer_mut = comparer;\r\n                k_mut = k;\r\n                m_mut = ((c < 0) ? MapTreeNode$2__get_Left(m2) : MapTreeNode$2__get_Right(m2));\r\n                continue MapTreeModule_tryFind;\r\n            }\r\n            else {\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_find(comparer, k, m) {\r\n    const matchValue = MapTreeModule_tryFind(comparer, k, m);\r\n    if (matchValue == null) {\r\n        throw (new Error());\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition1(comparer, f, k, v, acc1, acc2) {\r\n    if (f(k, v)) {\r\n        return [MapTreeModule_add(comparer, k, v, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, MapTreeModule_add(comparer, k, v, acc2)];\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partitionAux(comparer_mut, f_mut, m_mut, acc_0_mut, acc_1_mut) {\r\n    MapTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_2 = MapTreeModule_partitionAux(comparer, f, MapTreeNode$2__get_Right(m2), acc[0], acc[1]);\r\n                const acc_3 = MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue MapTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_partition1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_partition(comparer, f, m) {\r\n    return MapTreeModule_partitionAux(comparer, f, m, MapTreeModule_empty(), MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_filter1(comparer, f, k, v, acc) {\r\n    if (f(k, v)) {\r\n        return MapTreeModule_add(comparer, k, v, acc);\r\n    }\r\n    else {\r\n        return acc;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filterAux(comparer_mut, f_mut, m_mut, acc_mut) {\r\n    MapTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, m = m_mut, acc = acc_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const acc_1 = MapTreeModule_filterAux(comparer, f, MapTreeNode$2__get_Left(m2), acc);\r\n                const acc_2 = MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc_1);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                acc_mut = acc_2;\r\n                continue MapTreeModule_filterAux;\r\n            }\r\n            else {\r\n                return MapTreeModule_filter1(comparer, f, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_filter(comparer, f, m) {\r\n    return MapTreeModule_filterAux(comparer, f, m, MapTreeModule_empty());\r\n}\r\n\r\nexport function MapTreeModule_spliceOutSuccessor(m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (MapTreeNode$2__get_Left(m2) == null) {\r\n                return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2)];\r\n            }\r\n            else {\r\n                const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Left(m2));\r\n                return [patternInput[0], patternInput[1], MapTreeModule_mk(patternInput[2], MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2))];\r\n            }\r\n        }\r\n        else {\r\n            return [MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Map.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_remove(comparer, k, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_remove(comparer, k, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return MapTreeModule_empty();\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_change(comparer, k, u, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c < 0) {\r\n                return MapTreeModule_rebalance(MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeNode$2__get_Right(m2));\r\n            }\r\n            else if (c === 0) {\r\n                const matchValue_1 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_1 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_1), MapTreeNode$2__get_Left(m2), MapTreeNode$2__get_Right(m2), MapTreeNode$2__get_Height(m2));\r\n                }\r\n                else if (MapTreeNode$2__get_Left(m2) == null) {\r\n                    return MapTreeNode$2__get_Right(m2);\r\n                }\r\n                else if (MapTreeNode$2__get_Right(m2) == null) {\r\n                    return MapTreeNode$2__get_Left(m2);\r\n                }\r\n                else {\r\n                    const patternInput = MapTreeModule_spliceOutSuccessor(MapTreeNode$2__get_Right(m2));\r\n                    return MapTreeModule_mk(MapTreeNode$2__get_Left(m2), patternInput[0], patternInput[1], patternInput[2]);\r\n                }\r\n            }\r\n            else {\r\n                return MapTreeModule_rebalance(MapTreeNode$2__get_Left(m2), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), MapTreeModule_change(comparer, k, u, MapTreeNode$2__get_Right(m2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (c_1 < 0) {\r\n                const matchValue_2 = u(void 0);\r\n                if (matchValue_2 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_2), MapTreeModule_empty(), m, 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n            else if (c_1 === 0) {\r\n                const matchValue_3 = u(some(MapTreeLeaf$2__get_Value(m2)));\r\n                if (matchValue_3 != null) {\r\n                    return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue_3));\r\n                }\r\n                else {\r\n                    return MapTreeModule_empty();\r\n                }\r\n            }\r\n            else {\r\n                const matchValue_4 = u(void 0);\r\n                if (matchValue_4 != null) {\r\n                    return MapTreeNode$2_$ctor_499A11FD(k, value_1(matchValue_4), m, MapTreeModule_empty(), 2);\r\n                }\r\n                else {\r\n                    return m;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const matchValue = u(void 0);\r\n        if (matchValue != null) {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(k, value_1(matchValue));\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mem(comparer_mut, k_mut, m_mut) {\r\n    MapTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            const c = comparer.Compare(k, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Left(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iterOpt(f_mut, m_mut) {\r\n    MapTreeModule_iterOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                MapTreeModule_iterOpt(f, MapTreeNode$2__get_Left(m2));\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_iterOpt;\r\n            }\r\n            else {\r\n                f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_iter(f, m) {\r\n    MapTreeModule_iterOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_tryPickOpt(f_mut, m_mut) {\r\n    MapTreeModule_tryPickOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const matchValue = MapTreeModule_tryPickOpt(f, MapTreeNode$2__get_Left(m2));\r\n                if (matchValue == null) {\r\n                    const matchValue_1 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                    if (matchValue_1 == null) {\r\n                        f_mut = f;\r\n                        m_mut = MapTreeNode$2__get_Right(m2);\r\n                        continue MapTreeModule_tryPickOpt;\r\n                    }\r\n                    else {\r\n                        return matchValue_1;\r\n                    }\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_tryPick(f, m) {\r\n    return MapTreeModule_tryPickOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_existsOpt(f_mut, m_mut) {\r\n    MapTreeModule_existsOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_existsOpt(f, MapTreeNode$2__get_Left(m2)) ? true : f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_existsOpt;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_exists(f, m) {\r\n    return MapTreeModule_existsOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_forallOpt(f_mut, m_mut) {\r\n    MapTreeModule_forallOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                if (MapTreeModule_forallOpt(f, MapTreeNode$2__get_Left(m2)) && f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2))) {\r\n                    f_mut = f;\r\n                    m_mut = MapTreeNode$2__get_Right(m2);\r\n                    continue MapTreeModule_forallOpt;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_forall(f, m) {\r\n    return MapTreeModule_forallOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_map(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_map(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_map(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapiOpt(f, m) {\r\n    if (m != null) {\r\n        const m2 = m;\r\n        if (m2 instanceof MapTreeNode$2) {\r\n            const l2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Left(m2));\r\n            const v2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            const r2 = MapTreeModule_mapiOpt(f, MapTreeNode$2__get_Right(m2));\r\n            return MapTreeNode$2_$ctor_499A11FD(MapTreeLeaf$2__get_Key(m2), v2, l2, r2, MapTreeNode$2__get_Height(m2));\r\n        }\r\n        else {\r\n            return MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)));\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_empty();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mapi(f, m) {\r\n    return MapTreeModule_mapiOpt(f, m);\r\n}\r\n\r\nexport function MapTreeModule_foldBackOpt(f_mut, m_mut, x_mut) {\r\n    MapTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, m = m_mut, x = x_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                const x_1 = MapTreeModule_foldBackOpt(f, MapTreeNode$2__get_Right(m2), x);\r\n                const x_2 = f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                f_mut = f;\r\n                m_mut = MapTreeNode$2__get_Left(m2);\r\n                x_mut = x_2;\r\n                continue MapTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldBack(f, m, x) {\r\n    return MapTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_foldOpt(f_mut, x_mut, m_mut) {\r\n    MapTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, m = m_mut;\r\n        if (m != null) {\r\n            const m2 = m;\r\n            if (m2 instanceof MapTreeNode$2) {\r\n                f_mut = f;\r\n                x_mut = f(MapTreeModule_foldOpt(f, x, MapTreeNode$2__get_Left(m2)), MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n                m_mut = MapTreeNode$2__get_Right(m2);\r\n                continue MapTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_fold(f, x, m) {\r\n    return MapTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x) {\r\n    const foldFromTo = (f_1_mut, m_1_mut, x_1_mut) => {\r\n        foldFromTo:\r\n        while (true) {\r\n            const f_1 = f_1_mut, m_1 = m_1_mut, x_1 = x_1_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    const cLoKey = comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) | 0;\r\n                    const cKeyHi = comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) | 0;\r\n                    const x_2 = (cLoKey < 0) ? foldFromTo(f_1, MapTreeNode$2__get_Left(m2), x_1) : x_1;\r\n                    const x_3 = ((cLoKey <= 0) && (cKeyHi <= 0)) ? f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_2) : x_2;\r\n                    if (cKeyHi < 0) {\r\n                        f_1_mut = f_1;\r\n                        m_1_mut = MapTreeNode$2__get_Right(m2);\r\n                        x_1_mut = x_3;\r\n                        continue foldFromTo;\r\n                    }\r\n                    else {\r\n                        return x_3;\r\n                    }\r\n                }\r\n                else if ((comparer.Compare(lo, MapTreeLeaf$2__get_Key(m2)) <= 0) && (comparer.Compare(MapTreeLeaf$2__get_Key(m2), hi) <= 0)) {\r\n                    return f_1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2), x_1);\r\n                }\r\n                else {\r\n                    return x_1;\r\n                }\r\n            }\r\n            else {\r\n                return x_1;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    if (comparer.Compare(lo, hi) === 1) {\r\n        return x;\r\n    }\r\n    else {\r\n        return foldFromTo(f, m, x);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_foldSection(comparer, lo, hi, f, m, x) {\r\n    return MapTreeModule_foldSectionOpt(comparer, lo, hi, f, m, x);\r\n}\r\n\r\nexport function MapTreeModule_toList(m) {\r\n    const loop = (m_1_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const m_1 = m_1_mut, acc = acc_mut;\r\n            if (m_1 != null) {\r\n                const m2 = m_1;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    m_1_mut = MapTreeNode$2__get_Left(m2);\r\n                    acc_mut = cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], loop(MapTreeNode$2__get_Right(m2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons([MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)], acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(m, empty_1());\r\n}\r\n\r\nexport function MapTreeModule_copyToArray(m, arr, i) {\r\n    let j = i;\r\n    MapTreeModule_iter((x, y) => {\r\n        arr[j] = [x, y];\r\n        j = ((j + 1) | 0);\r\n    }, m);\r\n}\r\n\r\nexport function MapTreeModule_toArray(m) {\r\n    const n = MapTreeModule_size(m) | 0;\r\n    const res = fill(new Array(n), 0, n, [null, null]);\r\n    MapTreeModule_copyToArray(m, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofList(comparer, l) {\r\n    return fold_1((acc, tupledArg) => MapTreeModule_add(comparer, tupledArg[0], tupledArg[1], acc), MapTreeModule_empty(), l);\r\n}\r\n\r\nexport function MapTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    MapTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const patternInput = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            comparer_mut = comparer;\r\n            acc_mut = MapTreeModule_add(comparer, patternInput[0], patternInput[1], acc);\r\n            e_mut = e;\r\n            continue MapTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_ofArray(comparer, arr) {\r\n    let res = MapTreeModule_empty();\r\n    for (let idx = 0; idx <= (arr.length - 1); idx++) {\r\n        const forLoopVar = arr[idx];\r\n        res = MapTreeModule_add(comparer, forLoopVar[0], forLoopVar[1], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function MapTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return MapTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return MapTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return MapTreeModule_mkFromEnumerator(comparer, MapTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            ie.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport class MapTreeModule_MapIterator$2 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_MapIterator$2$reflection(gen0, gen1) {\r\n    return record_type(\"Map.MapTreeModule.MapIterator`2\", [gen0, gen1], MapTreeModule_MapIterator$2, () => [[\"stack\", list_type(option_type(MapTreeLeaf$2$reflection(gen0, gen1)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function MapTreeModule_collapseLHS(stack_mut) {\r\n    MapTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const rest = tail(stack);\r\n            const m = head(stack);\r\n            if (m != null) {\r\n                const m2 = m;\r\n                if (m2 instanceof MapTreeNode$2) {\r\n                    stack_mut = ofArrayWithTail([MapTreeNode$2__get_Left(m2), MapTreeLeaf$2_$ctor_5BDDA1(MapTreeLeaf$2__get_Key(m2), MapTreeLeaf$2__get_Value(m2)), MapTreeNode$2__get_Right(m2)], rest);\r\n                    continue MapTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue MapTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIterator(m) {\r\n    return new MapTreeModule_MapIterator$2(MapTreeModule_collapseLHS(singleton(m)), false);\r\n}\r\n\r\nexport function MapTreeModule_notStarted() {\r\n    throw (new Error(\"enumeration not started\"));\r\n}\r\n\r\nexport function MapTreeModule_alreadyFinished() {\r\n    throw (new Error(\"enumeration already finished\"));\r\n}\r\n\r\nexport function MapTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n                }\r\n                else {\r\n                    return [MapTreeLeaf$2__get_Key(m), MapTreeLeaf$2__get_Value(m)];\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for current\"));\r\n            }\r\n        }\r\n        else {\r\n            return MapTreeModule_alreadyFinished();\r\n        }\r\n    }\r\n    else {\r\n        return MapTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const m = head(matchValue);\r\n                if (m instanceof MapTreeNode$2) {\r\n                    throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = MapTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Map iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function MapTreeModule_mkIEnumerator(m) {\r\n    let i = MapTreeModule_mkIterator(m);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return MapTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return MapTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = MapTreeModule_mkIterator(m);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function MapTreeModule_toSeq(s) {\r\n    return unfold((en_1) => {\r\n        if (en_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return [en_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), en_1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, MapTreeModule_mkIEnumerator(s));\r\n}\r\n\r\nexport class FSharpMap {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpMap__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        if (that instanceof FSharpMap) {\r\n            const e1 = getEnumerator(this$);\r\n            try {\r\n                const e2 = getEnumerator(that);\r\n                try {\r\n                    const loop = () => {\r\n                        const m1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                        if (m1 === e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            if (!m1) {\r\n                                return true;\r\n                            }\r\n                            else {\r\n                                const e1c = e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                const e2c = e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                                if (equals(e1c[0], e2c[0]) && equals(e1c[1], e2c[1])) {\r\n                                    return loop();\r\n                                }\r\n                                else {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    };\r\n                    return loop();\r\n                }\r\n                finally {\r\n                    e2.Dispose();\r\n                }\r\n            }\r\n            finally {\r\n                e1.Dispose();\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"map [\" + join(\"; \", map_1((kv) => format(\"({0}, {1})\", kv[0], kv[1]), this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpMap\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    GetEnumerator() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const __ = this;\r\n        return MapTreeModule_mkIEnumerator(__.tree);\r\n    }\r\n    CompareTo(obj) {\r\n        const m = this;\r\n        if (obj instanceof FSharpMap) {\r\n            return compareWith((kvp1, kvp2) => {\r\n                const c = m.comparer.Compare(kvp1[0], kvp2[0]) | 0;\r\n                return ((c !== 0) ? c : compare(kvp1[1], kvp2[1])) | 0;\r\n            }, m, obj) | 0;\r\n        }\r\n        else {\r\n            throw (new Error(\"not comparable\\\\nParameter name: obj\"));\r\n        }\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, x[0]) && equals(FSharpMap__get_Item(m, x[0]), x[1]);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const m = this;\r\n        MapTreeModule_copyToArray(m.tree, arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    get size() {\r\n        const m = this;\r\n        return FSharpMap__get_Count(m) | 0;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n    }\r\n    delete(_arg1) {\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return false;\r\n    }\r\n    entries() {\r\n        const m = this;\r\n        return map_1((p) => [p[0], p[1]], m);\r\n    }\r\n    get(k) {\r\n        const m = this;\r\n        return FSharpMap__get_Item(m, k);\r\n    }\r\n    has(k) {\r\n        const m = this;\r\n        return FSharpMap__ContainsKey(m, k);\r\n    }\r\n    keys() {\r\n        const m = this;\r\n        return map_1((p) => p[0], m);\r\n    }\r\n    set(k, v) {\r\n        const m = this;\r\n        throw (new Error(\"Map cannot be mutated\"));\r\n        return m;\r\n    }\r\n    values() {\r\n        const m = this;\r\n        return map_1((p) => p[1], m);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const m = this;\r\n        iterate_1((p) => {\r\n            f(p[1], p[0], m);\r\n        }, m);\r\n    }\r\n}\r\n\r\nexport function FSharpMap$reflection(gen0, gen1) {\r\n    return class_type(\"Map.FSharpMap\", [gen0, gen1], FSharpMap);\r\n}\r\n\r\nexport function FSharpMap_$ctor(comparer, tree) {\r\n    return new FSharpMap(comparer, tree);\r\n}\r\n\r\n(() => {\r\n    FSharpMap.empty = FSharpMap_$ctor(LanguagePrimitives_FastGenericComparer(), MapTreeModule_empty());\r\n})();\r\n\r\nexport function FSharpMap_get_Empty() {\r\n    return FSharpMap.empty;\r\n}\r\n\r\nexport function FSharpMap_Create(ie) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofSeq(comparer, ie));\r\n}\r\n\r\nexport function FSharpMap__get_Comparer(m) {\r\n    return m.comparer;\r\n}\r\n\r\nexport function FSharpMap__get_Tree(m) {\r\n    return m.tree;\r\n}\r\n\r\nexport function FSharpMap__Add(m, key, value) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_add(m.comparer, key, value, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Change(m, key, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_change(m.comparer, key, f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__get_IsEmpty(m) {\r\n    return m.tree == null;\r\n}\r\n\r\nexport function FSharpMap__get_Item(m, key) {\r\n    return MapTreeModule_find(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__TryPick(m, f) {\r\n    return MapTreeModule_tryPick(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Exists(m, predicate) {\r\n    return MapTreeModule_exists(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Filter(m, predicate) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_filter(m.comparer, predicate, m.tree));\r\n}\r\n\r\nexport function FSharpMap__ForAll(m, predicate) {\r\n    return MapTreeModule_forall(predicate, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Fold(m, f, acc) {\r\n    return MapTreeModule_foldBack(f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__FoldSection(m, lo, hi, f, acc) {\r\n    return MapTreeModule_foldSection(m.comparer, lo, hi, f, m.tree, acc);\r\n}\r\n\r\nexport function FSharpMap__Iterate(m, f) {\r\n    MapTreeModule_iter(f, m.tree);\r\n}\r\n\r\nexport function FSharpMap__MapRange(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_map(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Map(m, f) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_mapi(f, m.tree));\r\n}\r\n\r\nexport function FSharpMap__Partition(m, predicate) {\r\n    const patternInput = MapTreeModule_partition(m.comparer, predicate, m.tree);\r\n    return [FSharpMap_$ctor(m.comparer, patternInput[0]), FSharpMap_$ctor(m.comparer, patternInput[1])];\r\n}\r\n\r\nexport function FSharpMap__get_Count(m) {\r\n    return MapTreeModule_size(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ContainsKey(m, key) {\r\n    return MapTreeModule_mem(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__Remove(m, key) {\r\n    return FSharpMap_$ctor(m.comparer, MapTreeModule_remove(m.comparer, key, m.tree));\r\n}\r\n\r\nexport function FSharpMap__TryGetValue(__, key, value) {\r\n    const matchValue = MapTreeModule_tryFind(__.comparer, key, __.tree);\r\n    if (matchValue == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        const v = value_1(matchValue);\r\n        value.contents = v;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function FSharpMap__get_Keys(__) {\r\n    return Array.from(map_1((kvp) => kvp[0], MapTreeModule_toSeq(__.tree)));\r\n}\r\n\r\nexport function FSharpMap__get_Values(__) {\r\n    return Array.from(map_1((kvp) => kvp[1], MapTreeModule_toSeq(__.tree)));\r\n}\r\n\r\nexport function FSharpMap__TryFind(m, key) {\r\n    return MapTreeModule_tryFind(m.comparer, key, m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToList(m) {\r\n    return MapTreeModule_toList(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ToArray(m) {\r\n    return MapTreeModule_toArray(m.tree);\r\n}\r\n\r\nexport function FSharpMap__ComputeHashCode(this$) {\r\n    const combineHash = (x, y) => (((x << 1) + y) + 631);\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const activePatternResult5790 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (combineHash(res, structuralHash(activePatternResult5790[0])) | 0);\r\n            res = (combineHash(res, structuralHash(activePatternResult5790[1])) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return res | 0;\r\n}\r\n\r\nexport function isEmpty(table) {\r\n    return FSharpMap__get_IsEmpty(table);\r\n}\r\n\r\nexport function add(key, value, table) {\r\n    return FSharpMap__Add(table, key, value);\r\n}\r\n\r\nexport function change(key, f, table) {\r\n    return FSharpMap__Change(table, key, f);\r\n}\r\n\r\nexport function find(key, table) {\r\n    return FSharpMap__get_Item(table, key);\r\n}\r\n\r\nexport function tryFind(key, table) {\r\n    return FSharpMap__TryFind(table, key);\r\n}\r\n\r\nexport function remove(key, table) {\r\n    return FSharpMap__Remove(table, key);\r\n}\r\n\r\nexport function containsKey(key, table) {\r\n    return FSharpMap__ContainsKey(table, key);\r\n}\r\n\r\nexport function iterate(action, table) {\r\n    FSharpMap__Iterate(table, action);\r\n}\r\n\r\nexport function tryPick(chooser, table) {\r\n    return FSharpMap__TryPick(table, chooser);\r\n}\r\n\r\nexport function pick(chooser, table) {\r\n    const matchValue = tryPick(chooser, table);\r\n    if (matchValue != null) {\r\n        return value_1(matchValue);\r\n    }\r\n    else {\r\n        throw (new Error());\r\n    }\r\n}\r\n\r\nexport function exists(predicate, table) {\r\n    return FSharpMap__Exists(table, predicate);\r\n}\r\n\r\nexport function filter(predicate, table) {\r\n    return FSharpMap__Filter(table, predicate);\r\n}\r\n\r\nexport function partition(predicate, table) {\r\n    return FSharpMap__Partition(table, predicate);\r\n}\r\n\r\nexport function forAll(predicate, table) {\r\n    return FSharpMap__ForAll(table, predicate);\r\n}\r\n\r\nexport function map(mapping, table) {\r\n    return FSharpMap__Map(table, mapping);\r\n}\r\n\r\nexport function fold(folder, state, table) {\r\n    return MapTreeModule_fold(folder, state, FSharpMap__get_Tree(table));\r\n}\r\n\r\nexport function foldBack(folder, table, state) {\r\n    return MapTreeModule_foldBack(folder, FSharpMap__get_Tree(table), state);\r\n}\r\n\r\nexport function toSeq(table) {\r\n    return map_1((kvp) => [kvp[0], kvp[1]], table);\r\n}\r\n\r\nexport function findKey(predicate, table) {\r\n    return pick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function tryFindKey(predicate, table) {\r\n    return tryPick_1((kvp) => {\r\n        const k = kvp[0];\r\n        if (predicate(k, kvp[1])) {\r\n            return some(k);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, table);\r\n}\r\n\r\nexport function ofList(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofSeq(elements) {\r\n    return FSharpMap_Create(elements);\r\n}\r\n\r\nexport function ofArray(elements) {\r\n    const comparer = LanguagePrimitives_FastGenericComparer();\r\n    return FSharpMap_$ctor(comparer, MapTreeModule_ofArray(comparer, elements));\r\n}\r\n\r\nexport function toList(table) {\r\n    return FSharpMap__ToList(table);\r\n}\r\n\r\nexport function toArray(table) {\r\n    return FSharpMap__ToArray(table);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpMap_get_Empty();\r\n}\r\n\r\nexport function count(table) {\r\n    return FSharpMap__get_Count(table);\r\n}\r\n\r\n","[<AutoOpen>]\nmodule Sutil.Bindings\n\nopen Transition\nopen DOM\nopen Browser.Types\nopen System\nopen Fable.Core\n\nlet private log s = Logging.log \"bind\" s\n\nlet private bindId = Helpers.makeIdGenerator()\n\n// Binding helper\nlet bindSub<'T> (source : IObservable<'T>) (handler : BuildContext -> 'T -> unit) = nodeFactory <| fun ctx ->\n    let unsub = source.Subscribe( handler ctx )\n    SutilNode.RegisterDisposable(ctx.Parent,unsub)\n    unitResult(ctx,\"bindSub\")\n\nlet bindElementCO<'T>  (store : IObservable<'T>) (element: IObservable<'T> -> SutilElement) (compare : 'T -> 'T -> bool)= nodeFactory <| fun ctx ->\n    let mutable node = EmptyNode\n    let group = SutilNode.MakeGroup(\"bind\",ctx.Parent,ctx.Previous)\n    let bindNode = GroupNode group\n\n    log($\"bind: {group.Id} ctx={ctx.Action} prev={ctx.Previous}\")\n    ctx.AddChild bindNode\n\n    let run() =\n        let bindCtx = { ctx with Parent = bindNode }\n        let disposable = store |> Observable.distinctUntilChangedCompare compare |> Store.subscribe (fun next ->\n            try\n                log($\"bind: rebuild {group.Id} with {next}\")\n                node <- build (element(store)) (bindCtx |> ContextHelpers.withReplace (node,group.NextDomNode))\n            with\n            | x -> Logging.error $\"Exception in bindo: {x.Message} parent {ctx.Parent} node {node.ToString()} node.Parent \"\n        )\n        group.SetDispose ( fun () ->\n            log($\"dispose: Bind.el: {group}\")\n            disposable.Dispose())\n\n\n    run()\n\n    sutilResult bindNode\n\nlet bindElement<'T>  (store : IObservable<'T>)  (element: 'T -> SutilElement) : SutilElement=\n    bindElementCO store (Store.current >> element) (fun _ _-> false)\n\n/// Backwards compatibility\nlet bindFragment = bindElement\n\nlet bindElement2<'A,'B> (a : IObservable<'A>) (b : IObservable<'B>)  (element: ('A*'B) -> SutilElement) = nodeFactory <| fun ctx ->\n    let mutable node : SutilNode = EmptyNode\n    let group = SutilNode.MakeGroup(\"bind2\",ctx.Parent,ctx.Previous)\n    let bindNode = GroupNode group\n    ctx.AddChild bindNode\n\n    let bindCtx = { ctx with Parent = bindNode }\n\n    let d = Store.subscribe2 a b (fun next ->\n        try\n            node <- build (element(next)) (bindCtx |> ContextHelpers.withReplace (node,group.NextDomNode))\n        with\n        | x -> Logging.error $\"Exception in bind: {x.Message}\"\n    )\n\n    group.SetDispose (Helpers.unsubify d)\n\n    sutilResult bindNode\n\nlet bindElementKO<'T,'K when 'K : equality> (store : IObservable<'T>) (element: IObservable<'T> -> SutilElement) (key : 'T -> 'K) : SutilElement =\n    let compare a b = key a = key b\n    bindElementCO store element compare\n\nlet bindPromiseStore<'T>  (p : ObservablePromise<'T>)\n        (waiting : SutilElement)\n        (result: 'T -> SutilElement)\n        (fail : Exception -> SutilElement)\n        : SutilElement =\n    bindElement p <| (function\n        | Waiting -> waiting\n        | Result r -> result r\n        | Error x -> fail x)\n\nlet bindPromise<'T>  (p : JS.Promise<'T>)\n        (waiting : SutilElement)\n        (result: 'T -> SutilElement)\n        (fail : Exception -> SutilElement)\n        : SutilElement =\n    let x = ObservablePromise<'T>()\n    x.Run p\n    bindPromiseStore x waiting result fail\n\ntype BindFn<'T> = IObservable<'T> -> ('T -> SutilElement) -> SutilElement\nlet private getInputChecked el = Interop.get el \"checked\"\nlet private setInputChecked (el : Node) (v:obj) = Interop.set el \"checked\" v\nlet private getInputValue el : string = Interop.get el \"value\"\nlet private setInputValue el (v:string) = Interop.set el \"value\" v\n\nlet bindSelected<'T when 'T : equality> (selection:IObservable<List<'T>>) (dispatch : List<'T> -> unit) : SutilElement = nodeFactory <| fun ctx ->\n\n    let selectElement = ctx.ParentElement :?> HTMLSelectElement\n    let selOps = selectElement.selectedOptions\n    let op (coll:HTMLCollection) i = coll.[i] :?> HTMLOptionElement\n    let opValue op : 'T = Interop.get op \"__value\"\n\n    let getValueList() =\n        [0..selOps.length-1] |> List.map (fun i -> opValue (op selOps i))\n\n    let updateSelected (v : List<'T>) =\n        let ops = selectElement.options\n        for i in [0..ops.length-1] do\n            let o = op ops i\n            o.selected <- v |> List.contains (opValue o)\n\n    let unsubInput = listen \"input\" selectElement <| fun _ ->\n        getValueList() |> dispatch\n\n    // We need to finalize checked status after all attrs have been processed for input,\n    // in case 'value' hasn't been set yet\n    once Event.ElementReady selectElement <| fun _ ->\n        let unsub = selection |> Store.subscribe (updateSelected)\n        SutilNode.RegisterDisposable(ctx.Parent, unsub)\n\n    SutilNode.RegisterUnsubscribe(ctx.Parent,unsubInput)\n\n    unitResult(ctx,\"bindSelected\")\n\nlet bindSelectMultiple<'T when 'T : equality> (store:IStore<List<'T>>) : SutilElement =\n    bindSelected store (fun sln -> store <~ sln)\n\nlet bindSelectSingle<'T when 'T : equality> (store:IStore<'T>) : SutilElement =\n    bindSelected (store .> List.singleton) (fun sln -> sln |> List.exactlyOne |> Store.set store)\n\nlet bindSelectOptional<'T when 'T : equality> (store:IStore<'T option>) : SutilElement =\n    let toList topt = match topt with |None -> []|Some t -> List.singleton t\n    let fromList list = match list with |[] -> None |x::_ -> Some x\n    bindSelected (store .> toList) (fun sln -> sln |> fromList |> Store.set store)\n\nlet private isNullString (obj:obj) =\n    isNull obj || System.String.IsNullOrEmpty(downcast obj)\n\nlet private getId (s : IStore<'T>) = s.GetHashCode()\n\nlet bindGroup<'T> (store:Store<List<string>>) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let name = match Interop.get parent \"name\" with\n                | s when isNullString s -> $\"store-{getId store}\"\n                | s -> s\n\n    // Group this input with all other inputs that reference the same store\n    Interop.set parent \"name\" name\n\n    let getValueList() =\n        let inputs = (documentOf parent).querySelectorAll(@$\"input[name=\"\"{name}\"\"]\")\n        [0..(inputs.length-1)] |> List.map (fun i -> inputs.[i]) |> List.filter getInputChecked |> List.map getInputValue\n\n    let updateChecked (v : List<string>) =\n        setInputChecked parent ( v |> List.contains (getInputValue parent) )\n\n    // Update the store when the radio box is clicked on\n    let unsubInput = DOM.listen \"input\" parent <| fun _ ->\n        getValueList() |> Store.set store\n\n    // We need to finalize checked status after all attrs have been processed for input,\n    // in case 'value' hasn't been set yet\n    once Event.ElementReady parent <| fun _ ->\n        store |> Store.get |> updateChecked\n\n    // When store changes make sure check status is synced\n    let unsub = store |> Store.subscribe (updateChecked)\n\n    SutilNode.RegisterDisposable(ctx.Parent,unsub)\n    SutilNode.RegisterUnsubscribe(ctx.Parent,unsubInput)\n\n    unitResult(ctx,\"bindGroup\")\n\n// T can realistically only be numeric or a string. We're relying (I think!) on JS's ability\n// to turn a string into an int automatically in the Store.set call (maybe it's Fable doing that)\n//\nlet bindRadioGroup<'T> (store:Store<'T>) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let name = match Interop.get parent \"name\" with\n                | s when isNullString s -> $\"store-{getId store}\"\n                | s -> s\n    // Group this input with all other inputs that reference the same store\n    Interop.set parent \"name\" name\n\n    let updateChecked (v : obj) =\n        setInputChecked parent ( (string v) = getInputValue parent )\n\n    // Update the store when the radio box is clicked on\n    let inputUnsub = listen \"input\" parent <| fun _ ->\n        Interop.get parent \"value\" |> Store.set store\n\n    // We need to finalize checked status after all attrs have been processed for input,\n    // in case 'value' hasn't been set yet\n    once Event.ElementReady parent <| fun _ ->\n        store |> Store.get |> updateChecked\n\n    // When store changes make sure check status is synced\n    let unsub = store |> Store.subscribe updateChecked\n\n    SutilNode.RegisterDisposable(ctx.Parent,unsub)\n    SutilNode.RegisterUnsubscribe(ctx.Parent,inputUnsub)\n\n    unitResult(ctx,\"bindRadioGroup\")\n\nlet bindClassToggle (toggle:IObservable<bool>) (classesWhenTrue:string) (classesWhenFalse:string) =\n    bindSub toggle <| fun ctx active ->\n        if active then\n            ctx.ParentElement |> removeFromClasslist classesWhenFalse\n            ctx.ParentElement |> addToClasslist classesWhenTrue\n        else\n            ctx.ParentElement |> removeFromClasslist classesWhenTrue\n            ctx.ParentElement |> addToClasslist classesWhenFalse\n\n// Deprecated\nlet bindClass (toggle:IObservable<bool>) (classes:string) = bindClassToggle toggle classes \"\"\n\nlet bindClassNames (classNames:IObservable<#seq<string>>)  =\n    bindSub classNames <| fun ctx current ->\n        ctx.ParentElement.className <- \"\"\n        ctx.ParentElement.classList.add( current |> Array.ofSeq )\n\nlet bindClassName (classNames:IObservable<string>)  =\n    bindSub classNames <| fun ctx current ->\n        ctx.ParentElement.className <- current\n\n// Bind a store value to an element attribute. Updates to the element are unhandled\nlet bindAttrIn<'T> (attrName:string) (store : IObservable<'T>) : SutilElement = nodeFactory <| fun ctx ->\n    let unsub =\n        if attrName = \"class\" then\n            store |> Store.subscribe (fun cls -> ctx.ParentElement.className <- (string cls))\n        else\n            store |> Store.subscribe (DOM.setAttribute ctx.ParentElement attrName)\n    SutilNode.RegisterDisposable(ctx.Parent,unsub)\n    unitResult(ctx,\"bindAttrIn\")\n\nlet bindAttrOut<'T> (attrName:string) (onchange : 'T -> unit) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let unsubInput = listen \"input\" parent <| fun _ ->\n        Interop.get parent attrName |> onchange\n    SutilNode.RegisterUnsubscribe(ctx.Parent,unsubInput)\n    unitResult(ctx,\"bindAttrOut\")\n\n// Bind a scalar value to an element attribute. Listen for onchange events and dispatch the\n// attribute's current value to the given function. This form is useful for view templates\n// where v is invariant (for example, an each that already filters on the value of v, like Todo.Done)\nlet attrNotify<'T> (attrName:string) (value :'T) (onchange : 'T -> unit) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let unsubInput = listen \"input\" parent  <| fun _ ->\n        Interop.get parent attrName |> onchange\n    Interop.set parent attrName value\n    SutilNode.RegisterUnsubscribe(ctx.Parent,unsubInput)\n    unitResult(ctx,\"attrNotify\")\n\n// Bind an observable value to an element attribute. Listen for onchange events and dispatch the\n// attribute's current value to the given function\nlet bindAttrBoth<'T> (attrName:string) (value : IObservable<'T>) (onchange : 'T -> unit) : SutilElement =\n    fragment [\n        bindAttrIn attrName value\n        bindAttrOut attrName onchange\n    ]\n\nlet bindListen<'T> (attrName:string) (store : IObservable<'T>) (event:string) (handler : Event -> unit) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let unsubA = Sutil.DOM.listen event parent handler\n    let unsubB = store |> Store.subscribe ( Interop.set parent attrName )\n    SutilNode.RegisterUnsubscribe(ctx.Parent,unsubA)\n    SutilNode.RegisterDisposable(ctx.Parent,unsubB)\n    unitResult(ctx,\"bindListen\")\n\n// Bind a store value to an element attribute. Listen for onchange events write the converted\n// value back to the store\nlet private bindAttrConvert<'T> (attrName:string) (store : Store<'T>) (convert : obj -> 'T) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    //let attrName' = if attrName = \"value\" then \"__value\" else attrName\n    let unsubInput = DOM.listen \"input\" parent <| fun _ ->\n        Interop.get parent attrName |> convert |> Store.set store\n    let unsub = store |> Store.subscribe ( Interop.set parent attrName )\n    SutilNode.RegisterUnsubscribe(parent,unsubInput)\n    SutilNode.RegisterDisposable(parent,unsub)\n    unitResult(ctx,\"bindAttrConvert\")\n\n// Unsure how to safely convert Element.getAttribute():string to 'T\nlet private convertObj<'T> (v:obj) : 'T  =\n    v :?> 'T\n\n// Bind a store to an attribute in both directions\nlet bindAttrStoreBoth<'T> (attrName:string) (store : Store<'T>) =\n    bindAttrConvert attrName store convertObj<'T>\n\nlet bindAttrStoreOut<'T> (attrName:string) (store : Store<'T>) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let unsubInput = DOM.listen \"input\" parent <| fun _ ->\n        Interop.get parent attrName |> convertObj<'T> |> Store.set store\n    //(asEl parent).addEventListener(\"input\", (fun _ -> Interop.get parent attrName |> convertObj<'T> |> Store.set store ))\n    SutilNode.RegisterUnsubscribe(ctx.Parent,unsubInput)\n    unitResult(ctx,\"bindAttrStoreOut\")\n\nlet private attrIsSizeRelated  (attrName:string) =\n    let upr = attrName.ToUpper()\n    upr.IndexOf(\"WIDTH\") >= 0 || upr.IndexOf(\"HEIGHT\") >= 0\n\nlet listenToProp<'T> (attrName:string) (dispatch: 'T -> unit) : SutilElement = nodeFactory <| fun ctx ->\n    let parent = ctx.ParentNode\n    let notify() = Interop.get parent attrName |> convertObj<'T> |> dispatch\n\n    once Event.ElementReady parent <| fun _ ->\n        if attrIsSizeRelated attrName then\n            SutilNode.RegisterDisposable(parent,(ResizeObserver.getResizer (downcast parent)).Subscribe( notify ))\n        else\n            SutilNode.RegisterUnsubscribe(parent,DOM.listen \"input\" parent (fun _ -> notify()))\n\n        rafu notify\n\n    unitResult(ctx,\"listenToProp\")\n\nlet bindPropOut<'T> (attrName:string) (store : Store<'T>) : SutilElement =\n    listenToProp attrName (Store.set store)\n\ntype KeyedStoreItem<'T,'K> = {\n    Key : 'K\n    //CachedElement : HTMLElement\n    Node : SutilNode\n    SvId : int\n    Position : IStore<int>\n    Value: IStore<'T>\n    Rect: ClientRect\n}\n\nlet private findCurrentNode doc (current:Node) (id:int) =\n    if (isNull current || isNull current.parentNode) then\n        log($\"each: Find node with id {id}\")\n        match DOM.findNodeWithSvId doc id with\n        | None ->\n            log(\"each: Disaster: cannot find node\")\n            null\n        | Some n ->\n            log($\"each: Found it: {n}\")\n            n\n    else\n        //log($\"Cannot find node with id {id}\")\n        current\n\nlet private findCurrentElement doc (current:Node) (id:int) =\n    let node = findCurrentNode doc current id\n    match node with\n    | null -> null\n    | n when isElementNode n -> n :?> HTMLElement\n    | x ->  log $\"each: Disaster: found node but it's not an HTMLElement\"\n            null\n\nlet private genEachId = Helpers.makeIdGenerator()\n\nlet eachiko (items:IObservable<list<'T>>) (view : IObservable<int> * IObservable<'T> -> SutilElement) (key:int*'T->'K) (trans : TransitionAttribute list) : SutilElement =\n    let log s = Logging.log \"each\" s\n    nodeFactory <| fun ctx ->\n        log($\"eachiko: Previous = {ctx.Previous}\")\n        let eachGroup = SutilNode.MakeGroup(\"each\",ctx.Parent,ctx.Previous)\n        let eachNode = GroupNode eachGroup\n        ctx.AddChild eachNode\n\n        let mutable state : KeyedStoreItem<'T,'K> list = []\n        let eachId = genEachId() + 1\n        let idKey = \"svEachId\"\n        let hasEid (n : Node) = Interop.exists n idKey\n        let eachIdOf n : int = if hasEid n then  Interop.get n idKey else -1\n        let setEid n = Interop.set n idKey eachId\n        let eachCtx = ctx |> ContextHelpers.withParent eachNode\n\n        let logState state' =\n            Browser.Dom.console.groupCollapsed(\"each state #\" + eachGroup.Id)\n            state' |> List.map (fun s -> sprintf \"%s %f,%f\" (string s.Key) s.Rect.left s.Rect.top) |> List.iter (fun s -> log(s))\n            Browser.Dom.console.groupEnd()\n\n        let logItems (items : list<'T>) =\n            Browser.Dom.console.groupCollapsed(\"each items #\" + eachGroup.Id)\n            items |> List.mapi (fun i s -> sprintf \"%s\" (string (key(i,s)))) |> List.iter (fun s -> log(s))\n            Browser.Dom.console.groupEnd()\n\n        let unsub = items |> Store.subscribe (fun newItems ->\n            let wantAnimate = true\n\n            log(\"-- Each Block Render -------------------------------------\")\n            log($\"caching rects for render. Previous: {state |> List.length} items. Current {newItems |> List.length} items\")\n\n            state <- state |> List.map (fun ki ->\n                let el = findCurrentElement ctx.Document (*ki.Element*)null ki.SvId\n                { ki with (*Element = el; *)Rect = el.getBoundingClientRect() })\n\n            //logItems newItems\n            //logState state\n\n            // Last child that doesn't have our eachId\n            log($\"Previous = {ctx.Previous}\")\n            //let prevNodeInit : Node = vnode.PrevDomNode\n            let mutable prevNode = EmptyNode\n\n            let newState = newItems |> List.mapi (fun itemIndex item ->\n                let itemKey = key(itemIndex,item)\n                let optKi = state |> Seq.tryFind (fun x -> x.Key = itemKey)\n                match optKi with\n                | None ->\n                    let storePos = Store.make itemIndex\n                    let storeVal = Store.make item\n                    let ctx2 = eachCtx |> ContextHelpers.withPrevious prevNode\n                    DomEdit.log $\"++ creating new item '{item}' (key={itemKey}) with prev='{prevNode}' action={ctx2.Action}\"\n                    let sutilNode = ctx2 |> build (view (storePos,storeVal))\n                    let itemNode = ctx2 |> asDomElement sutilNode\n                    DomEdit.log $\"-- created #{svId itemNode} with prev='{nodeStrShort (itemNode.previousSibling)}'\"\n                    setEid itemNode\n                    SutilNode.RegisterDisposable(itemNode,storePos)\n                    SutilNode.RegisterDisposable(itemNode,storeVal)\n                    transitionNode itemNode trans [Key (string itemKey)] true ignore ignore\n                    let newKi = {\n                        SvId = svId itemNode\n                        Key = itemKey\n                        Node = sutilNode\n                        //CachedElement = itemNode\n                        Position = storePos\n                        Rect = itemNode.getBoundingClientRect()\n                        Value = storeVal\n                    }\n\n                    let prevEl = itemNode.previousSibling :?> HTMLElement\n                    log $\"new item #{newKi.SvId} eid={eachIdOf itemNode} {itemKey} {rectStr newKi.Rect} prevNode={prevNode} prevSibling={nodeStr prevEl}\"\n                    prevNode <- sutilNode\n                    newKi\n                | Some ki ->\n                    ki.Position |> Store.modify (fun _ -> itemIndex)\n                    ki.Value |> Store.modify (fun _ -> item)\n                    let el = findCurrentElement ctx.Document null ki.SvId (*ki.Element*)\n                    log $\"existing item {ki.SvId} {ki.Key} {rectStr ki.Rect}\"\n                    if wantAnimate then\n                        clearAnimations el\n                        animateNode el (ki.Rect)\n                    prevNode <- ki.Node\n                    ki\n            )\n\n            //logState newState\n\n            log(\"Remove old items\")\n            // Remove old items\n            for oldItem in state do\n                if not (newState |> Seq.exists (fun x -> x.Key = oldItem.Key)) then\n                    log($\"removing key {oldItem.Key}\")\n                    let el = findCurrentElement ctx.Document null oldItem.SvId (*oldItem.Element*)\n                    fixPosition el\n                    //ctx.Parent.RemoveChild(el) |> ignore\n                    ctx.Parent.InsertBefore(el,null) |> ignore\n                    //oldItem.Node.Dispose()\n                    transitionNode el trans [Key (string oldItem.Key)] false\n                        ignore (fun e -> eachGroup.RemoveChild(oldItem.Node))\n\n            //ctx.Parent.PrettyPrint(\"each #\" + vnode.Id + \": before reorder\")\n\n            // Reorder\n            let mutable prevDomNode = eachGroup.PrevDomNode\n            for ki in newState do\n                log($\"Re-order: #{ki.SvId}\")\n                let el = findCurrentElement ctx.Document null ki.SvId (*ki.Element*)\n                if not (isNull el) then\n                    if not(isSameNode prevDomNode el.previousSibling) then\n                        log($\"reordering: ki={nodeStr el} prevNode={nodeStr prevDomNode}\")\n                        log($\"reordering key {ki.Key} {nodeStrShort el} parent={el.parentNode}\")\n                        ctx.Parent.RemoveChild(el) |> ignore\n                        ctx.Parent.InsertAfter(el, prevDomNode)\n                    prevDomNode <- el\n\n            //ctx.Parent.PrettyPrint(\"each #\" + vnode.Id + \": after reorder\")\n\n            state <- newState\n        )\n\n        eachGroup.SetDispose (Helpers.unsubify unsub)\n        sutilResult eachNode\n\nlet private duc = Observable.distinctUntilChanged\n\nlet each (items:IObservable<list<'T>>) (view : 'T -> SutilElement) (trans : TransitionAttribute list) =\n    eachiko items (fun (_,item) -> bindElement (duc item) view) (fun (i,v) -> i,v.GetHashCode()) trans\n\nlet eachi (items:IObservable<list<'T>>) (view : (int*'T) -> SutilElement)  (trans : TransitionAttribute list) : SutilElement =\n    eachiko items (fun (index,item) -> bindElement2 (duc index) (duc item) view) fst trans\n\nlet eachio (items:IObservable<list<'T>>) (view : (IObservable<int>*IObservable<'T>) -> SutilElement)  (trans : TransitionAttribute list) =\n    eachiko items view fst trans\n\nlet eachk (items:IObservable<list<'T>>) (view : 'T -> SutilElement)  (key:'T -> 'K) (trans : TransitionAttribute list) =\n    eachiko\n        items\n        (fun (_,item) -> bindElement (duc item) view)\n        (snd>>key)\n        trans\n\n(*\n    // This is best done with (say) Bind.toggleClass and an event handler updating a store\n\n//\n// Turn events into an IObservable using a map function\n// Pass IObservable to SutilElement function so that containing element can be side-effected (eg, bindClass)\n//\nlet bindEvent<'T> (event:string) (map:Event -> 'T) (app:IObservable<'T> -> DOM.SutilElement) : DOM.SutilElement = nodeFactory <| fun ctx ->\n    let s = Store.make Unchecked.defaultof<'T>\n    let u = listen event ctx.ParentNode (map >> Store.set s)\n    SutilNode.RegisterDisposable(ctx.Parent,s)\n    SutilNode.RegisterUnsubscribe(ctx.Parent,u)\n    ctx |> (s |> app |> build)\n\nlet bindEventU<'T> (event:string) (map:Event -> 'T) (app:IObservable<'T> -> unit) : DOM.SutilElement =\n     bindEvent event map (fun s -> app(s); fragment[])\n*)\n\nlet bindStore<'T> (init:'T) (app:Store<'T> -> DOM.SutilElement) : DOM.SutilElement = nodeFactory <| fun ctx ->\n    let s = Store.make init\n    SutilNode.RegisterDisposable(ctx.Parent,s)\n    ctx |> (s |> app |> build)\n\nlet declareStore<'T> (init : 'T) (f : Store<'T> -> unit) =\n    declareResource (fun () -> Store.make init) f\n\nlet (|=>) store element = bindElement store element\n\n(*\nlet selectApp (selectors : (IObservable<bool> * (unit ->SutilElement)) list) = nodeFactory <| fun ctx ->\n    let s = selectors |> List.map fst |> firstOf\n    let apps = selectors |> List.map snd |> Array.ofList\n\n    let u = s.Subscribe(fun i ->\n        if i >= 0 then\n            build (exclusive (apps.[i]())) ctx |> ignore\n    )\n\n    unitResult(ctx,\"selectApp\")\n*)\n\n// BindApi is a way for me to refactor this module into a public-facing documentation API with\n// overloads where appropriate.\n// Some examples will still be referencing Bindings.*\n\n[<AutoOpen>]\nmodule BindApi =\n\n    let private cssAttrsToString (cssAttrs) =\n        cssAttrs |> Seq.map (fun (n,v) -> $\"{n}: {v};\") |> String.concat \"\"\n    type Bind =\n\n        static member visibility( isVisible : IObservable<bool>) = Transition.transition [] isVisible\n        static member visibility( isVisible : IObservable<bool>,trans : TransitionAttribute list) = Transition.transition trans isVisible\n\n        /// Dual-binding for a given attribute. Changes to value are written to the attribute, while\n        /// changes to the attribute are written back to the store. Note that an IStore is also\n        /// an IObservable, for which a separate overload exists.\n        static member attr<'T> (name:string, value: IStore<'T>) = bindAttrStoreBoth name value\n\n        /// One-way binding from value to attribute. Note that passing store to this function will\n        /// select the more specific `attr<'T>( string, IStore<'T>)` overload.\n        /// If that looks to be a problem, we'll rename both of them to force a considered choice.\n        static member attr<'T> (name:string, value: IObservable<'T>) = bindAttrIn name value\n\n        /// One-way binding from attribute to dispatch function\n        static member attr<'T> (name:string, dispatch: 'T -> unit) = bindAttrOut name dispatch\n\n        /// Two-way binding from value to attribute and from attribute to dispatch function\n        static member attr<'T> (name:string, value: IObservable<'T>, dispatch: 'T -> unit) =\n            bindAttrBoth name value dispatch\n\n        static member style (attrs : IObservable<#seq<string * obj>>) =\n            Bind.attr(\"style\", attrs |> Store.map cssAttrsToString)\n\n        static member toggleClass (toggle:IObservable<bool>, activeClass : string, inactiveClass : string) =\n            bindClassToggle toggle activeClass inactiveClass\n\n        static member toggleClass (toggle:IObservable<bool>, activeClass : string) =\n            bindClassToggle toggle activeClass \"\"\n\n        static member className (name:IObservable<string>) =\n            bindClassName name\n\n        static member classNames (name:IObservable<#seq<string>>) =\n            bindClassNames name\n\n        /// Binding from value to a DOM fragment. Each change in value replaces the current DOM fragment\n        /// with a new one.\n        static member el<'T>  (value : IObservable<'T>, element: 'T -> SutilElement) : SutilElement =\n            bindElement value element\n\n        static member el<'T,'K when 'K : equality>  (value : IObservable<'T>, key:'T->'K, element: IObservable<'T> -> SutilElement) : SutilElement =\n            bindElementKO value element key\n\n        /// Deprecated naming, use Bind.el\n        static member fragment<'T>  (value : IObservable<'T>)  (element: 'T -> SutilElement) = bindElement value element\n\n\n        /// Binding from two values to a DOM fragment. See fragment<'T>\n        static member el2<'A,'B>  (valueA : IObservable<'A>) (valueB : IObservable<'B>) (element: 'A * 'B -> SutilElement) = bindElement2 valueA valueB element\n\n        /// Deprecated naming, use Bind.el\n        static member fragment2<'A,'B>  (valueA : IObservable<'A>) (valueB : IObservable<'B>) (element: 'A * 'B -> SutilElement) = bindElement2 valueA valueB element\n\n        static member selected<'T when 'T : equality>  (value : IObservable<'T list>, dispatch : 'T list -> unit) = bindSelected value dispatch\n        static member selected<'T when 'T : equality>  (store : IStore<'T list>) = bindSelectMultiple store\n        static member selected<'T when 'T : equality>  (store : IStore<'T option>) = bindSelectOptional store\n        static member selected<'T when 'T : equality>  (store : IStore<'T>) = bindSelectSingle store\n\n        // -- Simple cases: 'T -> view ---------------------------\n\n        /// Bind collections to a simple template, with transitions\n        static member each (items:IObservable<list<'T>>, view : 'T -> SutilElement, trans : TransitionAttribute list) =\n            each items view trans\n\n        /// Bind collections to a simple template\n        static member each (items:IObservable<list<'T>>, view : 'T -> SutilElement) =\n            each items view []\n\n        // -- Keyed ----------------------------------------------\n\n        /// Bind keyed collections to a simple template, with transitions\n        /// Deprecated: Use a view template that takes IObservable<'T>\n        static member each (items:IObservable<list<'T>>, view : 'T -> SutilElement, key:'T -> 'K, trans : TransitionAttribute list) : SutilElement =\n            eachk items view key trans\n\n        /// Bind keyed collections to a simple template\n        /// Deprecated: Use a view template that takes IObservable<'T>\n        static member each (items:IObservable<list<'T>>, view : 'T -> SutilElement, key:'T -> 'K) : SutilElement =\n            eachk items view key []\n\n        /// Bind keyed collections to a simple template, with transitions\n        static member each (items:IObservable<list<'T>>, view : IObservable<'T> -> SutilElement, key:'T -> 'K, trans : TransitionAttribute list) : SutilElement =\n            eachiko items (snd>>view) (snd>>key) trans\n\n        /// Bind keyed collections to a simple template, with transitions\n        static member each (items:IObservable<list<'T>>, view : IObservable<'T> -> SutilElement, key:'T -> 'K) : SutilElement =\n            eachiko items (snd>>view) (snd>>key) []\n\n        // -- Indexed --------------------------------------------\n        static member eachi (items:IObservable<list<'T>>, view : (int*'T) -> SutilElement, trans : TransitionAttribute list) : SutilElement =\n            eachi items view trans\n\n        static member eachi (items:IObservable<list<'T>>, view : (int*'T) -> SutilElement ) : SutilElement =\n            eachi items view []\n\n        // -- Observable views\n\n\n        static member eachi (items:IObservable<list<'T>>, view : IObservable<int> * IObservable<'T> -> SutilElement, trans : TransitionAttribute list) : SutilElement =\n            eachio items view trans\n\n        static member eachi (items:IObservable<list<'T>>, view : IObservable<int> * IObservable<'T> -> SutilElement ) : SutilElement =\n            eachio items view []\n\n        static member eachi (items:IObservable<list<'T>>,view : IObservable<int> * IObservable<'T> -> SutilElement,key:int*'T->'K,trans : TransitionAttribute list) : SutilElement =\n            eachiko items view key trans\n\n        static member eachi (items:IObservable<list<'T>>,view : IObservable<int> * IObservable<'T> -> SutilElement,key:int*'T->'K) : SutilElement =\n            eachiko items view key []\n\n","import { compare, physicalHash, equals, structuralHash } from \"./Util.js\";\r\n\r\nexport function HashIdentity_FromFunctions(hash, eq) {\r\n    return {\r\n        Equals(x, y) {\r\n            return eq(x, y);\r\n        },\r\n        GetHashCode(x_1) {\r\n            return hash(x_1);\r\n        },\r\n    };\r\n}\r\n\r\nexport function HashIdentity_Structural() {\r\n    return HashIdentity_FromFunctions((obj) => structuralHash(obj), (e1, e2) => equals(e1, e2));\r\n}\r\n\r\nexport function HashIdentity_Reference() {\r\n    return HashIdentity_FromFunctions((obj) => physicalHash(obj), (e1, e2) => (e1 === e2));\r\n}\r\n\r\nexport function ComparisonIdentity_FromFunction(comparer) {\r\n    return {\r\n        Compare(x, y) {\r\n            return comparer(x, y);\r\n        },\r\n    };\r\n}\r\n\r\nexport function ComparisonIdentity_Structural() {\r\n    return ComparisonIdentity_FromFunction((e1, e2) => compare(e1, e2));\r\n}\r\n\r\n","module Sutil.Transition\n// Adapted from svelte/transitions/index.js\n\nopen Browser.Dom\nopen Browser.CssExtensions\nopen Browser.Types\nopen Sutil.Styling\nopen Sutil.DOM\nopen System.Collections.Generic\nopen System\nopen Fable.Core\nopen Interop\n\nlet log = Sutil.Logging.log \"trans\"\n\nmodule private LoopTasks =\n\n    type private Task = { C : float -> bool; F : unit -> unit }\n\n    type LoopTask = { Promise : JS.Promise<unit>; Abort: (unit -> unit) }\n\n    let mutable private tasks = new HashSet<Task>()\n\n    let rec runTasks(now) =\n        tasks |> Array.ofSeq |> Array.iter (fun task ->\n            if not (task.C(now)) then\n                tasks.Remove(task) |> ignore\n                task.F()\n        )\n        if tasks.Count <> 0 then\n            raf runTasks |> ignore\n\n    (**\n     * For testing purposes only!\n     *)\n    let private clearLoops =\n        tasks.Clear()\n\n    (**\n     * Creates a new task that runs on each raf frame\n     * until it returns a falsy value or is aborted\n     *)\n    let loop (callback: float -> bool) =\n        let mutable task = Unchecked.defaultof<Task>\n\n        if tasks.Count = 0 then\n            raf runTasks |> ignore\n\n        {\n            Promise = Promise.create( fun fulfill _ ->\n                task <- { C = callback;  F = fulfill }\n                tasks.Add(task) |> ignore\n            )\n\n            Abort = fun _ -> tasks.Remove (task) |> ignore\n        }\n\ntype TransitionProp =\n    | Key of string\n    | X of float\n    | Y of float\n    | Opacity of float\n    | Delay of float\n    | Duration of float\n    | DurationFn of (float -> float)\n    | Ease of (float -> float)\n    | CssGen of (float -> float -> string )\n    | Tick of (float -> float -> unit)\n    | Speed of float\n    | Fallback of TransitionBuilder\n\nand Transition =\n    {\n        Key : string\n        X : float\n        Y : float\n        Opacity : float\n        Delay : float\n        Duration : float\n        DurationFn : (float->float) option\n        Speed : float\n        Ease : (float -> float)\n        CssGen : (float -> float -> string ) option\n        Tick: (float -> float -> unit) option\n        Fallback: TransitionBuilder option\n    } with\n            static member Default = {\n                Key =\"\"\n                X = 0.0\n                Y = 0.0\n                Delay = 0.0\n                Opacity = 0.0\n                Duration = 0.0\n                DurationFn = None\n                Speed = 0.0\n                Ease = Easing.linear\n                CssGen = None\n                Fallback = None\n                Tick = None }\n\nand CreateTransition =\n     unit -> Transition\n\nand TransitionBuilder = TransitionProp list -> HTMLElement -> CreateTransition\n\ntype Animation = {\n    From: ClientRect\n    To: ClientRect\n}\n\nlet mergeProps newerProps existingProps : TransitionProp list =\n    existingProps @ newerProps\n\nlet withProps (userProps : TransitionProp list) (f : TransitionBuilder) : TransitionBuilder =\n    fun (initProps : TransitionProp list) ->\n        initProps |> mergeProps userProps |> f\n\ntype TransitionAttribute =\n    | InOut of TransitionBuilder\n    | In of TransitionBuilder\n    | Out of TransitionBuilder\n\nlet private overrideDuration d = if Sutil.DevToolsControl.Options.SlowAnimations then 10.0 * d else d\nlet private overrideDurationFn fo = if Sutil.DevToolsControl.Options.SlowAnimations then (fo |> Option.map (fun f -> ((*)10.0 << f))) else fo\n\nlet private applyProp (r:Transition) (prop : TransitionProp) =\n    match prop with\n    | Delay d -> { r with Delay = d }\n    | Duration d -> { r with Duration = d; DurationFn = None }\n    | DurationFn fo -> { r with DurationFn = Some fo; Duration = 0.0 }\n    | Ease f -> { r with Ease = f }\n    | CssGen f -> { r with CssGen = Some f }\n    | Tick f -> { r with Tick = Some f }\n    | Speed s -> { r with Speed = s }\n    | X n -> { r with X = n }\n    | Y n -> { r with Y = n }\n    | Opacity n -> { r with Opacity = n }\n    | Key f -> { r with Key = f }\n    | Fallback f -> { r with Fallback = Some f }\n\nlet applyProps (props : TransitionProp list) (tr:Transition) = props |> List.fold applyProp tr\nlet makeTransition (props : TransitionProp list) = applyProps props Transition.Default\nlet mapTrans (f: Transition -> TransitionProp list) t = applyProps (f t) t\n\nlet element (doc:Document) tag = doc.createElement(tag)\n\nlet mutable private numActiveAnimations = 0\nlet mutable private tasks : (unit -> unit) list = []\nlet mutable private activeDocs : Map<int,Document> = Map.empty\n\nlet private registerDoc (doc:Document) =\n    activeDocs <- activeDocs.Add( doc.GetHashCode(), doc )\n    log($\"Active docs: {activeDocs.Count}\")\n\nlet private runTasks() =\n    let copy = tasks\n    tasks <- []\n    if (copy.Length > 0) then\n        log($\"- - - Tasks: running {copy.Length} tasks - - - - - - - - - - - - - -\")\n    for f in copy do f()\n\nlet private waitAnimationFrame f =\n    let init = tasks.IsEmpty\n    tasks <- f :: tasks\n    if init then\n        Window.requestAnimationFrame( fun _ ->\n            runTasks()\n        ) |> ignore\n\nlet private getSutilStyleElement (doc : Document) =\n    let mutable e = doc.querySelector(\"head style#__sutil_keyframes\")\n    if (isNull e) then\n        e <- element doc \"style\"\n        e.setAttribute(\"id\", \"__sutil_keyframes\")\n        doc.head.appendChild(e) |> ignore\n    e\n\nlet private dotSheet styleElem : CSSStyleSheet = Interop.get styleElem \"sheet\"\n\nlet private getSutilStylesheet (doc : Document) = getSutilStyleElement doc |> dotSheet\n\nlet private nextRuleId = Helpers.makeIdGenerator()\n\nlet private toEmptyStr s = if System.String.IsNullOrEmpty(s) then \"\" else s\n\nlet createRule (node : HTMLElement) (a:float) (b:float) tr (uid:int) =\n    registerDoc (documentOf node)\n\n    let css = match tr.CssGen with\n                | Some f -> f\n                | None -> failwith \"No CSS function supplied\"\n\n    if (tr.DurationFn.IsSome) then\n        failwith \"Duration function not permitted in createRule\"\n\n    let durn = tr.Duration |> overrideDuration\n\n    let step = 16.666 / durn\n    let mutable keyframes = [ \"{\\n\" ];\n\n    for p in [0.0 ..step.. 1.0] do\n        let t = a + (b - a) * tr.Ease(p)\n        keyframes <- keyframes @ [ sprintf \"%f%%{%s}\\n\" (p * 100.0) (css t (1.0 - t)) ]\n\n    let rule = keyframes @ [ sprintf \"100%% {%s}\\n\" (css b (1.0 - b)) ] |> String.concat \"\"\n\n    let name = sprintf \"__sutil_%d\" (if uid = 0 then nextRuleId() else uid)\n    let keyframeText = sprintf \"@keyframes %s %s\" name rule\n    log <| sprintf \"keyframe: %s\" (keyframes |> List.skip (keyframes.Length / 2) |> List.head)\n    log($\"createRule {name} {durn}ms for {nodeStr node}\")\n\n    let stylesheet = getSutilStylesheet (documentOf node)\n    stylesheet.insertRule( keyframeText, stylesheet.cssRules.length) |> ignore\n\n    let animations =\n        if String.IsNullOrEmpty(node.style.animation) then [] else [ node.style.animation ]\n        @ [ sprintf \"%s %fms linear %fms 1 both\" name durn tr.Delay ]\n\n    node.style.animation <- animations |> String.concat \", \"\n    numActiveAnimations <- numActiveAnimations + 1\n    name\n\nlet clearAnimations (node:HTMLElement) = node.style.animation <-\"\"\n\nlet private clearRules() =\n    Window.requestAnimationFrame( fun _ ->\n        if (numActiveAnimations = 0) then\n            for kv in activeDocs do\n                let doc = kv.Value\n                let stylesheet = getSutilStylesheet doc\n                log <| sprintf \"clearing %d rules\" (int stylesheet.cssRules.length)\n                for i in [(int stylesheet.cssRules.length-1) .. -1 .. 0] do\n                    stylesheet.deleteRule( float i )\n            //doc.__svelte_rules = {};\n        activeDocs <- Map.empty\n    ) |> ignore\n\nlet private deleteRule (node:HTMLElement) (name:string) =\n    let previous = (toEmptyStr node.style.animation).Split( ',' )\n    let next =\n        previous |> Array.filter\n            (if System.String.IsNullOrEmpty(name)\n                then (fun anim -> anim.IndexOf(name) < 0) // remove specific animation\n                else (fun anim -> anim.IndexOf(\"__sutil\") < 0)) // remove all Svelte animations\n    let deleted = previous.Length - next.Length\n    if (deleted > 0) then\n        //log <| sprintf \"Deleted rule(s) %s (%d removed)\" name deleted\n        node.style.animation <- next |> Array.map (fun s -> s.Trim()) |> String.concat \", \"\n        numActiveAnimations <- numActiveAnimations - deleted\n        if (numActiveAnimations = 0) then clearRules()\n\n\nlet flip (node:Element) (animation:Animation) props =\n    let tr = applyProps props  {\n            Transition.Default with\n                Delay = 0.0\n                DurationFn = Some (fun d -> System.Math.Sqrt(d) * 60.0)\n                Ease = Easing.quintOut }\n    let style = Window.getComputedStyle(node)\n    let transform = if style.transform = \"none\" then \"\" else style.transform\n    let scaleX = animation.From.width / node.clientWidth\n    let scaleY = animation.From.height / node.clientHeight\n    let dx = (animation.From.left - animation.To.left) / scaleX\n    let dy = (animation.From.top - animation.To.top) / scaleY\n    let d = Math.Sqrt(dx * dx + dy * dy)\n    log $\"flip: {dx},{dy} {transform} {animation.From} -> {animation.To}\"\n    {\n        tr with\n            Duration = match tr.DurationFn with\n                        | None -> tr.Duration //\n                        | Some f -> f(d) // Use user's function or our default\n            DurationFn = None  // Original converts any function into a scalar value\n            CssGen = Some (fun t u -> sprintf \"transform: %s translate(%fpx, %fpx);`\" transform (u * dx) (u * dy))\n    }\n\nlet createAnimation (node:HTMLElement) (from:ClientRect) (animateFn : Element -> Animation -> TransitionProp list -> Transition) props =\n    //if (!from)\n    //    return noop;\n    let tgt (* to *) = node.getBoundingClientRect()\n\n    let shouldCreate = not (isNull from) && not (from.left = tgt.left && from.right = tgt.right && from.top = tgt.top && from.bottom = tgt.bottom)\n    //    return noop;\n\n    //let { delay = 0, duration = 300, easing = identity,\n    //        start: start_time = exports.now() + delay,\n    //        end = start_time + duration, tick = noop, css } = fn(node, { From = from; To = tgt }, props);\n\n    // TODO : Tick loop\n\n    if (shouldCreate) then\n        let a = animateFn node { From = from; To = tgt } props\n        let r = { a with Duration = if (a.Duration = 0.0 && a.DurationFn.IsNone) then 300.0 else a.Duration }\n        createRule node 0.0 1.0 r 0\n    else\n        \"\"\n\nlet private waitAnimationEnd (el : HTMLElement) (f : unit -> unit) =\n    let rec cb _ =\n        el.removeEventListener(\"animationend\",cb)\n        f()\n    el.addEventListener(\"animationend\", cb)\n\nlet animateNode (node : HTMLElement) from =\n    waitAnimationFrame <| fun () ->\n        let name = createAnimation node from flip []\n        waitAnimationEnd node <| fun _ ->\n            deleteRule node name\n\nlet private tickGen = Helpers.makeIdGenerator()\n\nlet private findTransition (intro:bool) (trans : TransitionAttribute list) : TransitionBuilder option =\n    let mutable result : TransitionBuilder option = None\n    for x in trans do\n        result <- match result, x, intro with\n                    | Some _, _, _ -> result\n                    | None, In x, true -> Some x\n                    | None, Out x, false -> Some x\n                    | None, InOut x, _ -> Some x\n                    | _ -> None\n    result\n\nlet transitionNode  (el : HTMLElement)\n                    (trans : TransitionAttribute list)\n                    (initProps : TransitionProp list) // Likely to just be Key, if anything\n                    (isVisible : bool)\n                    (start: HTMLElement -> unit)\n                    (complete: HTMLElement -> unit) =\n\n    let mutable ruleName = \"\"\n\n    let cancelTick () =\n        match NodeKey.get<Unsubscribe> el NodeKey.TickTask with\n        | Some f ->\n            NodeKey.clear el NodeKey.TickTask\n            f()\n        | None -> ()\n\n    let runTick tr b durn =\n        let log = Logging.log \"tick\"\n\n        let a = if b = 0.0 then 1.0 else 0.0\n        let d = b - a\n        let tickId = tickGen()\n        let tick = match tr.Tick with|Some f -> f|None -> failwith \"No tick function supplied\"\n        let ease = tr.Ease\n        let delay = tr.Delay\n\n        let mutable t = a\n        let mutable start = 0.0\n        let mutable finish = 0.0\n        let mutable started = false\n        let mutable finished = false\n\n        Interop.set el NodeKey.TickTask (fun () ->\n            log $\"#{tickId}: cancel\"\n            finished <- true\n        )\n\n        log $\"#{tickId}: run b={b} durn={durn}\"\n        if (b > 0.0) then\n            tick 0.0 1.0\n\n        LoopTasks.loop <| fun now ->\n            if not started then\n                start <- now + delay\n                finish <- start + durn\n                log $\"#{tickId}: start: start={start} finish={finish}\"\n                started <- true\n\n            if finished || now >= finish then\n                log $\"#{tickId}: finish: t={t}\"\n                t <- b\n                tick t (1.0 - t)\n                finished <- true\n\n            else if now >= start then\n                let e = now - start\n                let t0 = e / durn\n                t <- a + d * (ease t0)\n                log $\"#{tickId}: tick: t={t} t0={t0} e={e}\"\n                tick t (1.0 - t)\n\n            not finished\n\n    let hide() =\n        log $\"hide {nodeStr el}\"\n        showEl el false\n        complete el\n        if ruleName <> \"\" then deleteRule el ruleName\n        dispatchSimple el \"outroend\"\n\n    let show() =\n        log $\"show {nodeStr el}\"\n        showEl el true\n        complete el\n        if ruleName <> \"\" then deleteRule el ruleName\n        dispatchSimple el \"introend\"\n\n    let tr = findTransition isVisible trans\n\n    let startTransition createTrans =\n        let event = if isVisible then \"introstart\" else \"outrostart\"\n        let (a,b) = if isVisible then (0.0, 1.0)   else (1.0, 0.0)\n        let onEnd = if isVisible then show         else hide\n\n        cancelTick()\n\n        waitAnimationFrame <| fun () ->\n            dispatchSimple el event\n            start el\n            waitAnimationEnd el onEnd\n            if (isVisible) then\n                showEl el true // Check: we're doing this again at animationEnd\n            let tr = createTrans()\n            if tr.DurationFn.IsSome then failwith \"Duration function not permitted\"\n            let d = tr.Duration\n            if tr.CssGen.IsSome then\n                ruleName <- createRule el a b tr 0\n            if tr.Tick.IsSome then\n                // Wait for the cancelled runTick to finish\n                DOM.wait el (fun () ->\n                    let t = runTick tr b d\n                    t.Promise)\n\n    // Save the value of display for use by showEl\n    let _display = el.style.display\n    if not (isNull _display) && _display <> \"\" && _display <> \"none\" then\n        Interop.set el \"_display\" _display\n\n    match tr with\n    | None ->\n        showEl el isVisible\n        complete el\n    | Some init ->\n        deleteRule el \"\"\n        let createTrans = (init initProps) el\n        startTransition createTrans\n\ntype Hideable = {\n    predicate : IObservable<bool>\n    element   : SutilElement\n    transOpt  : TransitionAttribute list\n}\n\ntype HideableRuntime = {\n    hideable : Hideable\n    mutable target : SutilNode\n    mutable cache : bool\n    mutable unsubscribe : System.IDisposable\n}\n\nlet createHideableRuntime h =\n    {\n        hideable = h\n        target = EmptyNode\n        cache = false\n        unsubscribe = null\n    }\n\n\nlet collectNodes (sn : SutilNode option) = sn |> Option.map (fun n -> n.collectDomNodes()) |> Option.defaultValue []\n\nlet transitionList (list : Hideable list) : SutilElement = nodeFactory <| fun ctx ->\n    let runtimes = list |> List.map createHideableRuntime\n    for rt in runtimes do\n        rt.unsubscribe <- rt.hideable.predicate |> Store.subscribe ( fun show ->\n            if (rt.target.IsEmpty) then\n                rt.target <- build  rt.hideable.element ctx\n                rt.cache <- not show\n\n            if (rt.cache <> show) then\n                rt.cache <- show\n                rt.target.collectDomNodes() |> List.iter (fun node ->\n                        transitionNode (node :?> HTMLElement) rt.hideable.transOpt [] show ignore ignore )\n        )\n    unitResult(ctx, \"transitionList\")\n\ntype MatchOption<'T> = ('T -> bool) *  SutilElement * TransitionAttribute list\n\nlet makeHideable guard element transOpt = {\n    element = element\n    transOpt = transOpt\n    predicate = guard\n}\n\nlet transitionMatch<'T> (store : IObservable<'T>) (options : MatchOption<'T> list) =\n    options |> List.map (fun (p,e,t) -> makeHideable (store |> Store.map p) e t) |> transitionList\n\nlet transitionOpt   (trans : TransitionAttribute list)\n                    (store : IObservable<bool>)\n                    (element: SutilElement)\n                    (elseElement : SutilElement option) : SutilElement = nodeFactory <| fun ctx ->\n    let transResult = SutilNode.MakeGroup( \"transition\", ctx.Parent, ctx.Previous ) |> GroupNode\n    ctx.AddChild transResult\n    let transCtx = ctx |> ContextHelpers.withParent transResult\n\n    let mutable target : SutilNode = EmptyNode\n    let mutable cache = false\n    let mutable targetElse : SutilNode = EmptyNode\n\n    let unsub = store |> Store.subscribe (fun isVisible ->\n        let wantTransition = not target.IsEmpty\n\n        if target.IsEmpty then\n            target <- build element transCtx\n            cache <- not isVisible\n            match elseElement with\n            | Some e -> targetElse <- build e transCtx\n            | None -> ()\n\n        if cache <> isVisible then\n            cache <- isVisible\n            let trans' = if wantTransition then trans else []\n\n            target.collectDomNodes() |> List.iter (fun node ->\n                transitionNode (node :?> HTMLElement) trans' [] isVisible ignore ignore\n            )\n            targetElse.collectDomNodes() |> List.iter (fun node ->\n                transitionNode (node :?> HTMLElement) trans' [] (not isVisible) ignore ignore\n            )\n            //if not (isNull targetElse) then transitionNode (targetElse :?> HTMLElement) trans' [] (not isVisible) ignore ignore\n    )\n\n    sutilResult(transResult)\n//    unitResult(ctx, \"transitionOpt\")\n\n// Show or hide according to a Store<bool> using a transition\nlet transition<'T> (trans : TransitionAttribute list) store element =\n    transitionOpt trans store element None\n\n// Alternate between a pair of elements according to a Store<bool> with no transition\nlet transitionElse<'T> (trans : TransitionAttribute list) store element otherElement=\n    transitionOpt trans store element (Some otherElement)\n\n// Show or hide according to a Store<bool> with no transition\nlet showIf<'T> store element =\n    transitionOpt [] store element None\n\n// Alternate between a pair of elements according to a Store<bool> with no transition\nlet showIfElse<'T> store element otherElement=\n    transitionOpt [] store element (Some otherElement)\n\n\n\n","import { Observer } from \"./Observable.js\";\nimport { some, value } from \"./Option.js\";\nimport { Choice_tryValueIfChoice1Of2, Choice_tryValueIfChoice2Of2 } from \"./Choice.js\";\nexport class Event {\n    constructor() {\n        this.delegates = [];\n    }\n    Add(f) {\n        this._addHandler(f);\n    }\n    get Publish() {\n        return this;\n    }\n    Trigger(senderOrValue, valueOrUndefined) {\n        let sender;\n        let value;\n        if (valueOrUndefined === undefined) {\n            sender = null;\n            value = senderOrValue;\n        }\n        else {\n            sender = senderOrValue;\n            value = valueOrUndefined;\n        }\n        this.delegates.forEach((f) => f.length === 1 ? f(value) : f(sender, value));\n    }\n    // IDelegateEvent<T> methods\n    AddHandler(handler) {\n        this._addHandler(handler);\n    }\n    RemoveHandler(handler) {\n        this._removeHandler(handler);\n    }\n    // IObservable<T> methods\n    Subscribe(arg) {\n        const callback = typeof arg === \"function\"\n            ? arg\n            : arg.OnNext;\n        this._addHandler(callback);\n        return { Dispose: () => { this._removeHandler(callback); } };\n    }\n    _addHandler(f) {\n        this.delegates.push(f);\n    }\n    _removeHandler(f) {\n        const index = this.delegates.indexOf(f);\n        if (index > -1) {\n            this.delegates.splice(index, 1);\n        }\n    }\n}\nexport function add(callback, sourceEvent) {\n    if (sourceEvent instanceof Event) {\n        sourceEvent.Add(callback);\n    }\n    else {\n        sourceEvent.Subscribe(new Observer(callback));\n    }\n}\nexport function choose(chooser, sourceEvent) {\n    const ev = new Event();\n    add((t) => {\n        const u = chooser(t);\n        if (u != null) {\n            ev.Trigger(value(u));\n        }\n    }, sourceEvent);\n    return ev;\n}\nexport function filter(predicate, sourceEvent) {\n    return choose((x) => predicate(x) ? some(x) : undefined, sourceEvent);\n}\nexport function map(mapping, sourceEvent) {\n    const ev = new Event();\n    add((t) => ev.Trigger(mapping(t)), sourceEvent);\n    return ev;\n}\nexport function merge(event1, event2) {\n    const ev = new Event();\n    const fn = (x) => ev.Trigger(x);\n    add(fn, event1);\n    add(fn, event2);\n    return ev;\n}\nexport function pairwise(sourceEvent) {\n    const ev = new Event();\n    let last;\n    let haveLast = false;\n    add((next) => {\n        if (haveLast) {\n            ev.Trigger([last, next]);\n        }\n        last = next;\n        haveLast = true;\n    }, sourceEvent);\n    return ev;\n}\nexport function partition(predicate, sourceEvent) {\n    return [filter(predicate, sourceEvent), filter((x) => !predicate(x), sourceEvent)];\n}\nexport function scan(collector, state, sourceEvent) {\n    return map((t) => state = collector(state, t), sourceEvent);\n}\nexport function split(splitter, sourceEvent) {\n    return [\n        choose((v) => Choice_tryValueIfChoice1Of2(splitter(v)), sourceEvent),\n        choose((v) => Choice_tryValueIfChoice2Of2(splitter(v)), sourceEvent),\n    ];\n}\nexport function createEvent(addHandler, removeHandler) {\n    return {\n        AddHandler(h) { addHandler(h); },\n        RemoveHandler(h) { removeHandler(h); },\n        Subscribe(r) {\n            const h = (_, args) => r.OnNext(args);\n            addHandler(h);\n            return {\n                Dispose() { removeHandler(h); }\n            };\n        }\n    };\n}\nexport default Event;\n","﻿namespace Feliz\r\n\r\nopen System\r\n\r\ntype HtmlEngine<'Node>\r\n    /// <summary>Customizable HTML generator API.</summary>\r\n    ///\r\n    /// <param name=\"mk\">Make a node with tag name and children.</param>\r\n    /// <param name=\"ofStr\">Make a node from a string.</param>\r\n    /// <param name=\"empty\">Make an empty node.</param>\r\n    (mk: string -> 'Node seq -> 'Node, ofStr: string -> 'Node, empty: unit -> 'Node) =\r\n\r\n    /// Create a custom element\r\n    ///\r\n    /// You generally shouldn't need to use this, if you notice an element missing please submit an issue.\r\n    member _.custom (key: string, children: seq<'Node>) = mk key children\r\n    /// The empty element, renders nothing on screen\r\n    member _.none : 'Node = empty()\r\n\r\n    member _.a (children: seq<'Node>) = mk \"a\" children\r\n\r\n    member _.abbr (value: float) = mk \"abbr\" [Util.asString value |> ofStr]\r\n    member _.abbr (value: int) = mk \"abbr\" [Util.asString value |> ofStr]\r\n    member _.abbr (value: 'Node) = mk \"abbr\" [value]\r\n    member _.abbr (value: string) = mk \"abbr\" [ofStr value]\r\n    member _.abbr (children: seq<'Node>) = mk \"abbr\" children\r\n\r\n    member _.address (value: float) = mk \"address\" [Util.asString value |> ofStr]\r\n    member _.address (value: int) = mk \"address\" [Util.asString value |> ofStr]\r\n    member _.address (value: 'Node) = mk \"address\" [value]\r\n    member _.address (value: string) = mk \"address\" [ofStr value]\r\n    member _.address (children: seq<'Node>) = mk \"address\" children\r\n\r\n    member _.anchor (children: seq<'Node>) = mk \"a\" children\r\n\r\n    member _.area (children: seq<'Node>) = mk \"area\" children\r\n\r\n    member _.article (children: seq<'Node>) = mk \"article\" children\r\n\r\n    member _.aside (children: seq<'Node>) = mk \"aside\" children\r\n\r\n    member _.audio (children: seq<'Node>) = mk \"audio\" children\r\n\r\n    member _.b (value: float) = mk \"b\" [Util.asString value |> ofStr]\r\n    member _.b (value: int) = mk \"b\" [Util.asString value |> ofStr]\r\n    member _.b (value: 'Node) = mk \"b\" [value]\r\n    member _.b (value: string) = mk \"b\" [ofStr value]\r\n    member _.b (children: seq<'Node>) = mk \"b\" children\r\n\r\n    member _.base' (children: seq<'Node>) = mk \"base\" children\r\n\r\n    member _.bdi (value: float) = mk \"bdi\" [Util.asString value |> ofStr]\r\n    member _.bdi (value: int) = mk \"bdi\" [Util.asString value |> ofStr]\r\n    member _.bdi (value: 'Node) = mk \"bdi\" [value]\r\n    member _.bdi (value: string) = mk \"bdi\" [ofStr value]\r\n    member _.bdi (children: seq<'Node>) = mk \"bdi\" children\r\n\r\n    member _.bdo (value: float) = mk \"bdo\" [Util.asString value |> ofStr]\r\n    member _.bdo (value: int) = mk \"bdo\" [Util.asString value |> ofStr]\r\n    member _.bdo (value: 'Node) = mk \"bdo\" [value]\r\n    member _.bdo (value: string) = mk \"bdo\" [ofStr value]\r\n    member _.bdo (children: seq<'Node>) = mk \"bdo\" children\r\n\r\n    member _.blockquote (value: float) = mk \"blockquote\" [Util.asString value |> ofStr]\r\n    member _.blockquote (value: int) = mk \"blockquote\" [Util.asString value |> ofStr]\r\n    member _.blockquote (value: 'Node) = mk \"blockquote\" [value]\r\n    member _.blockquote (value: string) = mk \"blockquote\" [ofStr value]\r\n    member _.blockquote (children: seq<'Node>) = mk \"blockquote\" children\r\n\r\n    member _.body (value: float) = mk \"body\" [Util.asString value |> ofStr]\r\n    member _.body (value: int) = mk \"body\" [Util.asString value |> ofStr]\r\n    member _.body (value: 'Node) = mk \"body\" [value]\r\n    member _.body (value: string) = mk \"body\" [ofStr value]\r\n    member _.body (children: seq<'Node>) = mk \"body\" children\r\n\r\n    member _.br (children: seq<'Node>) = mk \"br\" children\r\n\r\n    member _.button (children: seq<'Node>) = mk \"button\" children\r\n\r\n    member _.canvas (children: seq<'Node>) = mk \"canvas\" children\r\n\r\n    member _.caption (value: float) = mk \"caption\" [Util.asString value |> ofStr]\r\n    member _.caption (value: int) = mk \"caption\" [Util.asString value |> ofStr]\r\n    member _.caption (value: 'Node) = mk \"caption\" [value]\r\n    member _.caption (value: string) = mk \"caption\" [ofStr value]\r\n    member _.caption (children: seq<'Node>) = mk \"caption\" children\r\n\r\n    member _.cite (value: float) = mk \"cite\" [Util.asString value |> ofStr]\r\n    member _.cite (value: int) = mk \"cite\" [Util.asString value |> ofStr]\r\n    member _.cite (value: 'Node) = mk \"cite\" [value]\r\n    member _.cite (value: string) = mk \"cite\" [ofStr value]\r\n    member _.cite (children: seq<'Node>) = mk \"cite\" children\r\n\r\n    // member _.code (value: bool) = mk \"code\" value\r\n    member _.code (value: float) = mk \"code\" [Util.asString value |> ofStr]\r\n    member _.code (value: int) = mk \"code\" [Util.asString value |> ofStr]\r\n    member _.code (value: 'Node) = mk \"code\" [value]\r\n    member _.code (value: string) = mk \"code\" [ofStr value]\r\n    member _.code (children: seq<'Node>) = mk \"code\" children\r\n\r\n    member _.col (children: seq<'Node>) = mk \"col\" children\r\n\r\n    member _.colgroup (children: seq<'Node>) = mk \"colgroup\" children\r\n\r\n    member _.data (value: float) = mk \"data\" [Util.asString value |> ofStr]\r\n    member _.data (value: int) = mk \"data\" [Util.asString value |> ofStr]\r\n    member _.data (value: 'Node) = mk \"data\" [value]\r\n    member _.data (value: string) = mk \"data\" [ofStr value]\r\n    member _.data (children: seq<'Node>) = mk \"data\" children\r\n\r\n    member _.datalist (value: float) = mk \"datalist\" [Util.asString value |> ofStr]\r\n    member _.datalist (value: int) = mk \"datalist\" [Util.asString value |> ofStr]\r\n    member _.datalist (value: 'Node) = mk \"datalist\" [value]\r\n    member _.datalist (value: string) = mk \"datalist\" [ofStr value]\r\n    member _.datalist (children: seq<'Node>) = mk \"datalist\" children\r\n\r\n    member _.dd (value: float) = mk \"dd\" [Util.asString value |> ofStr]\r\n    member _.dd (value: int) = mk \"dd\" [Util.asString value |> ofStr]\r\n    member _.dd (value: 'Node) = mk \"dd\" [value]\r\n    member _.dd (value: string) = mk \"dd\" [ofStr value]\r\n    member _.dd (children: seq<'Node>) = mk \"dd\" children\r\n\r\n    member _.del (value: float) = mk \"del\" [Util.asString value |> ofStr]\r\n    member _.del (value: int) = mk \"del\" [Util.asString value |> ofStr]\r\n    member _.del (value: 'Node) = mk \"del\" [value]\r\n    member _.del (value: string) = mk \"del\" [ofStr value]\r\n    member _.del (children: seq<'Node>) = mk \"del\" children\r\n\r\n    member _.details (children: seq<'Node>) = mk \"details\" children\r\n\r\n    member _.dfn (value: float) = mk \"dfn\" [Util.asString value |> ofStr]\r\n    member _.dfn (value: int) = mk \"dfn\" [Util.asString value |> ofStr]\r\n    member _.dfn (value: 'Node) = mk \"dfn\" [value]\r\n    member _.dfn (value: string) = mk \"dfn\" [ofStr value]\r\n    member _.dfn (children: seq<'Node>) = mk \"dfn\" children\r\n\r\n    member _.dialog (value: float) = mk \"dialog\" [Util.asString value |> ofStr]\r\n    member _.dialog (value: int) = mk \"dialog\" [Util.asString value |> ofStr]\r\n    member _.dialog (value: 'Node) = mk \"dialog\" [value]\r\n    member _.dialog (value: string) = mk \"dialog\" [ofStr value]\r\n    member _.dialog (children: seq<'Node>) = mk \"dialog\" children\r\n\r\n    member _.div (value: float) = mk \"div\" [Util.asString value |> ofStr]\r\n    member _.div (value: int) = mk \"div\" [Util.asString value |> ofStr]\r\n    member _.div (value: 'Node) = mk \"div\" [value]\r\n    member _.div (value: string) = mk \"div\" [ofStr value]\r\n    /// The `<div>` tag defines a division or a section in an HTML document\r\n    member _.div (children: seq<'Node>) = mk \"div\" children\r\n\r\n    member _.dl (children: seq<'Node>) = mk \"dl\" children\r\n\r\n    member _.dt (value: float) = mk \"dt\" [Util.asString value |> ofStr]\r\n    member _.dt (value: int) = mk \"dt\" [Util.asString value |> ofStr]\r\n    member _.dt (value: 'Node) = mk \"dt\" [value]\r\n    member _.dt (value: string) = mk \"dt\" [ofStr value]\r\n    member _.dt (children: seq<'Node>) = mk \"dt\" children\r\n\r\n    member _.em (value: float) = mk \"em\" [Util.asString value |> ofStr]\r\n    member _.em (value: int) = mk \"em\" [Util.asString value |> ofStr]\r\n    member _.em (value: 'Node) = mk \"em\" [value]\r\n    member _.em (value: string) = mk \"em\" [ofStr value]\r\n    member _.em (children: seq<'Node>) = mk \"em\" children\r\n\r\n    member _.fieldSet (children: seq<'Node>) = mk \"fieldset\" children\r\n\r\n    member _.figcaption (children: seq<'Node>) = mk \"figcaption\" children\r\n\r\n    member _.figure (children: seq<'Node>) = mk \"figure\" children\r\n\r\n    member _.footer (children: seq<'Node>) = mk \"footer\" children\r\n\r\n    member _.form (children: seq<'Node>) = mk \"form\" children\r\n\r\n    member _.h1 (value: float) = mk \"h1\" [Util.asString value |> ofStr]\r\n    member _.h1 (value: int) = mk \"h1\" [Util.asString value |> ofStr]\r\n    member _.h1 (value: 'Node) = mk \"h1\" [value]\r\n    member _.h1 (value: string) = mk \"h1\" [ofStr value]\r\n    member _.h1 (children: seq<'Node>) = mk \"h1\" children\r\n    member _.h2 (value: float) = mk \"h2\" [Util.asString value |> ofStr]\r\n    member _.h2 (value: int) = mk \"h2\" [Util.asString value |> ofStr]\r\n    member _.h2 (value: 'Node) = mk \"h2\" [value]\r\n    member _.h2 (value: string) = mk \"h2\" [ofStr value]\r\n    member _.h2 (children: seq<'Node>) = mk \"h2\" children\r\n\r\n    member _.h3 (value: float) = mk \"h3\" [Util.asString value |> ofStr]\r\n    member _.h3 (value: int) = mk \"h3\" [Util.asString value |> ofStr]\r\n    member _.h3 (value: 'Node) = mk \"h3\" [value]\r\n    member _.h3 (value: string) = mk \"h3\" [ofStr value]\r\n    member _.h3 (children: seq<'Node>) = mk \"h3\" children\r\n\r\n    member _.h4 (value: float) = mk \"h4\" [Util.asString value |> ofStr]\r\n    member _.h4 (value: int) = mk \"h4\" [Util.asString value |> ofStr]\r\n    member _.h4 (value: 'Node) = mk \"h4\" [value]\r\n    member _.h4 (value: string) = mk \"h4\" [ofStr value]\r\n    member _.h4 (children: seq<'Node>) = mk \"h4\" children\r\n\r\n    member _.h5 (value: float) = mk \"h5\" [Util.asString value |> ofStr]\r\n    member _.h5 (value: int) = mk \"h5\" [Util.asString value |> ofStr]\r\n    member _.h5 (value: 'Node) = mk \"h5\" [value]\r\n    member _.h5 (value: string) = mk \"h5\" [ofStr value]\r\n    member _.h5 (children: seq<'Node>) = mk \"h5\" children\r\n\r\n    member _.h6 (value: float) = mk \"h6\" [Util.asString value |> ofStr]\r\n    member _.h6 (value: int) = mk \"h6\" [Util.asString value |> ofStr]\r\n    member _.h6 (value: 'Node) = mk \"h6\" [value]\r\n    member _.h6 (value: string) = mk \"h6\" [ofStr value]\r\n    member _.h6 (children: seq<'Node>) = mk \"h6\" children\r\n\r\n    member _.head (children: seq<'Node>) = mk \"head\" children\r\n\r\n    member _.header (children: seq<'Node>) = mk \"header\" children\r\n\r\n    member _.hr (children: seq<'Node>) = mk \"hr\" children\r\n\r\n    member _.html (children: seq<'Node>) = mk \"html\" children\r\n\r\n    member _.i (value: float) = mk \"i\" [Util.asString value |> ofStr]\r\n    member _.i (value: int) = mk \"i\" [Util.asString value |> ofStr]\r\n    member _.i (value: 'Node) = mk \"i\" [value]\r\n    member _.i (value: string) = mk \"i\" [ofStr value]\r\n    member _.i (children: seq<'Node>) = mk \"i\" children\r\n\r\n    member _.iframe (children: seq<'Node>) = mk \"iframe\" children\r\n\r\n    member _.img (children: seq<'Node>) = mk \"img\" children\r\n\r\n    member _.input (children: seq<'Node>) = mk \"input\" children\r\n\r\n    member _.ins (value: float) = mk \"ins\" [Util.asString value |> ofStr]\r\n    member _.ins (value: int) = mk \"ins\" [Util.asString value |> ofStr]\r\n    member _.ins (value: 'Node) = mk \"ins\" [value]\r\n    member _.ins (value: string) = mk \"ins\" [ofStr value]\r\n    member _.ins (children: seq<'Node>) = mk \"ins\" children\r\n\r\n    member _.kbd (value: float) = mk \"kbd\" [Util.asString value |> ofStr]\r\n    member _.kbd (value: int) = mk \"kbd\" [Util.asString value |> ofStr]\r\n    member _.kbd (value: 'Node) = mk \"kbd\" [value]\r\n    member _.kbd (value: string) = mk \"kbd\" [ofStr value]\r\n    member _.kbd (children: seq<'Node>) = mk \"kbd\" children\r\n\r\n    member _.label (children: seq<'Node>) = mk \"label\" children\r\n\r\n    member _.legend (value: float) = mk \"legend\" [Util.asString value |> ofStr]\r\n    member _.legend (value: int) = mk \"legend\" [Util.asString value |> ofStr]\r\n    member _.legend (value: 'Node) = mk \"legend\" [value]\r\n    member _.legend (value: string) = mk \"legend\" [ofStr value]\r\n    member _.legend (children: seq<'Node>) = mk \"legend\" children\r\n\r\n    member _.li (value: float) = mk \"li\" [Util.asString value |> ofStr]\r\n    member _.li (value: int) = mk \"li\" [Util.asString value |> ofStr]\r\n    member _.li (value: 'Node) = mk \"li\" [value]\r\n    member _.li (value: string) = mk \"li\" [ofStr value]\r\n    member _.li (children: seq<'Node>) = mk \"li\" children\r\n\r\n    member _.listItem (value: float) = mk \"li\" [Util.asString value |> ofStr]\r\n    member _.listItem (value: int) = mk \"li\" [Util.asString value |> ofStr]\r\n    member _.listItem (value: 'Node) = mk \"li\" [value]\r\n    member _.listItem (value: string) = mk \"li\" [ofStr value]\r\n    member _.listItem (children: seq<'Node>) = mk \"li\" children\r\n\r\n    member _.main (children: seq<'Node>) = mk \"main\" children\r\n\r\n    member _.map (children: seq<'Node>) = mk \"map\" children\r\n\r\n    member _.mark (value: float) = mk \"mark\" [Util.asString value |> ofStr]\r\n    member _.mark (value: int) = mk \"mark\" [Util.asString value |> ofStr]\r\n    member _.mark (value: 'Node) = mk \"mark\" [value]\r\n    member _.mark (value: string) = mk \"mark\" [ofStr value]\r\n    member _.mark (children: seq<'Node>) = mk \"mark\" children\r\n\r\n    member _.metadata (children: seq<'Node>) = mk \"metadata\" children\r\n\r\n    member _.meter (value: float) = mk \"meter\" [Util.asString value |> ofStr]\r\n    member _.meter (value: int) = mk \"meter\" [Util.asString value |> ofStr]\r\n    member _.meter (value: 'Node) = mk \"meter\" [value]\r\n    member _.meter (value: string) = mk \"meter\" [ofStr value]\r\n    member _.meter (children: seq<'Node>) = mk \"meter\" children\r\n\r\n    member _.nav (children: seq<'Node>) = mk \"nav\" children\r\n\r\n    member _.noscript (children: seq<'Node>) = mk \"noscript\" children\r\n\r\n    member _.object (children: seq<'Node>) = mk \"object\" children\r\n\r\n    member _.ol (children: seq<'Node>) = mk \"ol\" children\r\n\r\n    member _.option (value: float) = mk \"option\" [Util.asString value |> ofStr]\r\n    member _.option (value: int) = mk \"option\" [Util.asString value |> ofStr]\r\n    member _.option (value: 'Node) = mk \"option\" [value]\r\n    member _.option (value: string) = mk \"option\" [ofStr value]\r\n    member _.option (children: seq<'Node>) = mk \"option\" children\r\n\r\n    member _.optgroup (children: seq<'Node>) = mk \"optgroup\" children\r\n\r\n    member _.orderedList (children: seq<'Node>) = mk \"ol\" children\r\n\r\n    member _.output (value: float) = mk \"output\" [Util.asString value |> ofStr]\r\n    member _.output (value: int) = mk \"output\" [Util.asString value |> ofStr]\r\n    member _.output (value: 'Node) = mk \"output\" [value]\r\n    member _.output (value: string) = mk \"output\" [ofStr value]\r\n    member _.output (children: seq<'Node>) = mk \"output\" children\r\n\r\n    member _.p (value: float) = mk \"p\" [Util.asString value |> ofStr]\r\n    member _.p (value: int) = mk \"p\" [Util.asString value |> ofStr]\r\n    member _.p (value: 'Node) = mk \"p\" [value]\r\n    member _.p (value: string) = mk \"p\" [ofStr value]\r\n    member _.p (children: seq<'Node>) = mk \"p\" children\r\n\r\n    member _.paragraph (value: float) = mk \"p\" [Util.asString value |> ofStr]\r\n    member _.paragraph (value: int) = mk \"p\" [Util.asString value |> ofStr]\r\n    member _.paragraph (value: 'Node) = mk \"p\" [value]\r\n    member _.paragraph (value: string) = mk \"p\" [ofStr value]\r\n    member _.paragraph (children: seq<'Node>) = mk \"p\" children\r\n\r\n    member _.picture (children: seq<'Node>) = mk \"picture\" children\r\n\r\n    // member _.pre (value: bool) = mk \"pre\" value\r\n    member _.pre (value: float) = mk \"pre\" [Util.asString value |> ofStr]\r\n    member _.pre (value: int) = mk \"pre\" [Util.asString value |> ofStr]\r\n    member _.pre (value: 'Node) = mk \"pre\" [value]\r\n    member _.pre (value: string) = mk \"pre\" [ofStr value]\r\n    member _.pre (children: seq<'Node>) = mk \"pre\" children\r\n\r\n    member _.progress (children: seq<'Node>) = mk \"progress\" children\r\n\r\n    member _.q (children: seq<'Node>) = mk \"q\" children\r\n\r\n    member _.rb (value: float) = mk \"rb\" [Util.asString value |> ofStr]\r\n    member _.rb (value: int) = mk \"rb\" [Util.asString value |> ofStr]\r\n    member _.rb (value: 'Node) = mk \"rb\" [value]\r\n    member _.rb (value: string) = mk \"rb\" [ofStr value]\r\n    member _.rb (children: seq<'Node>) = mk \"rb\" children\r\n\r\n    member _.rp (value: float) = mk \"rp\" [Util.asString value |> ofStr]\r\n    member _.rp (value: int) = mk \"rp\" [Util.asString value |> ofStr]\r\n    member _.rp (value: 'Node) = mk \"rp\" [value]\r\n    member _.rp (value: string) = mk \"rp\" [ofStr value]\r\n    member _.rp (children: seq<'Node>) = mk \"rp\" children\r\n\r\n    member _.rt (value: float) = mk \"rt\" [Util.asString value |> ofStr]\r\n    member _.rt (value: int) = mk \"rt\" [Util.asString value |> ofStr]\r\n    member _.rt (value: 'Node) = mk \"rt\" [value]\r\n    member _.rt (value: string) = mk \"rt\" [ofStr value]\r\n    member _.rt (children: seq<'Node>) = mk \"rt\" children\r\n\r\n    member _.rtc (value: float) = mk \"rtc\" [Util.asString value |> ofStr]\r\n    member _.rtc (value: int) = mk \"rtc\" [Util.asString value |> ofStr]\r\n    member _.rtc (value: 'Node) = mk \"rtc\" [value]\r\n    member _.rtc (value: string) = mk \"rtc\" [ofStr value]\r\n    member _.rtc (children: seq<'Node>) = mk \"rtc\" children\r\n\r\n    member _.ruby (value: float) = mk \"ruby\" [Util.asString value |> ofStr]\r\n    member _.ruby (value: int) = mk \"ruby\" [Util.asString value |> ofStr]\r\n    member _.ruby (value: 'Node) = mk \"ruby\" [value]\r\n    member _.ruby (value: string) = mk \"ruby\" [ofStr value]\r\n    member _.ruby (children: seq<'Node>) = mk \"ruby\" children\r\n\r\n    member _.s (value: float) = mk \"s\" [Util.asString value |> ofStr]\r\n    member _.s (value: int) = mk \"s\" [Util.asString value |> ofStr]\r\n    member _.s (value: 'Node) = mk \"s\" [value]\r\n    member _.s (value: string) = mk \"s\" [ofStr value]\r\n    member _.s (children: seq<'Node>) = mk \"s\" children\r\n\r\n    member _.samp (value: float) = mk \"samp\" [Util.asString value |> ofStr]\r\n    member _.samp (value: int) = mk \"samp\" [Util.asString value |> ofStr]\r\n    member _.samp (value: 'Node) = mk \"samp\" [value]\r\n    member _.samp (value: string) = mk \"samp\" [ofStr value]\r\n    member _.samp (children: seq<'Node>) = mk \"samp\" children\r\n\r\n    member _.script (children: seq<'Node>) = mk \"script\" children\r\n\r\n    member _.section (children: seq<'Node>) = mk \"section\" children\r\n\r\n    member _.select (children: seq<'Node>) = mk \"select\" children\r\n    member _.small (value: float) = mk \"small\" [Util.asString value |> ofStr]\r\n    member _.small (value: int) = mk \"small\" [Util.asString value |> ofStr]\r\n    member _.small (value: 'Node) = mk \"small\" [value]\r\n    member _.small (value: string) = mk \"small\" [ofStr value]\r\n    member _.small (children: seq<'Node>) = mk \"small\" children\r\n\r\n    member _.source (children: seq<'Node>) = mk \"source\" children\r\n\r\n    member _.span (value: float) = mk \"span\" [Util.asString value |> ofStr]\r\n    member _.span (value: int) = mk \"span\" [Util.asString value |> ofStr]\r\n    member _.span (value: 'Node) = mk \"span\" [value]\r\n    member _.span (value: string) = mk \"span\" [ofStr value]\r\n    member _.span (children: seq<'Node>) = mk \"span\" children\r\n\r\n    member _.strong (value: float) = mk \"strong\" [Util.asString value |> ofStr]\r\n    member _.strong (value: int) = mk \"strong\" [Util.asString value |> ofStr]\r\n    member _.strong (value: 'Node) = mk \"strong\" [value]\r\n    member _.strong (value: string) = mk \"strong\" [ofStr value]\r\n    member _.strong (children: seq<'Node>) = mk \"strong\" children\r\n\r\n    member _.style (value: string) = mk \"style\" [ofStr value]\r\n\r\n    member _.sub (value: float) = mk \"sub\" [Util.asString value |> ofStr]\r\n    member _.sub (value: int) = mk \"sub\" [Util.asString value |> ofStr]\r\n    member _.sub (value: 'Node) = mk \"sub\" [value]\r\n    member _.sub (value: string) = mk \"sub\" [ofStr value]\r\n    member _.sub (children: seq<'Node>) = mk \"sub\" children\r\n\r\n    member _.summary (value: float) = mk \"summary\" [Util.asString value |> ofStr]\r\n    member _.summary (value: int) = mk \"summary\" [Util.asString value |> ofStr]\r\n    member _.summary (value: 'Node) = mk \"summary\" [value]\r\n    member _.summary (value: string) = mk \"summary\" [ofStr value]\r\n    member _.summary (children: seq<'Node>) = mk \"summary\" children\r\n\r\n    member _.sup (value: float) = mk \"sup\" [Util.asString value |> ofStr]\r\n    member _.sup (value: int) = mk \"sup\" [Util.asString value |> ofStr]\r\n    member _.sup (value: 'Node) = mk \"sup\" [value]\r\n    member _.sup (value: string) = mk \"sup\" [ofStr value]\r\n    member _.sup (children: seq<'Node>) = mk \"sup\" children\r\n\r\n    member _.table (children: seq<'Node>) = mk \"table\" children\r\n\r\n    member _.tableBody (children: seq<'Node>) = mk \"tbody\" children\r\n\r\n    member _.tableCell (children: seq<'Node>) = mk \"td\" children\r\n\r\n    member _.tableHeader (children: seq<'Node>) = mk \"th\" children\r\n\r\n    member _.tableRow (children: seq<'Node>) = mk \"tr\" children\r\n\r\n    member _.tbody (children: seq<'Node>) = mk \"tbody\" children\r\n\r\n    member _.td (value: float) = mk \"td\" [Util.asString value |> ofStr]\r\n    member _.td (value: int) = mk \"td\" [Util.asString value |> ofStr]\r\n    member _.td (value: 'Node) = mk \"td\" [value]\r\n    member _.td (value: string) = mk \"td\" [ofStr value]\r\n    member _.td (children: seq<'Node>) = mk \"td\" children\r\n\r\n    member _.template (children: seq<'Node>) = mk \"template\" children\r\n\r\n    member _.text (value: float) : 'Node = Util.asString value |> ofStr\r\n    member _.text (value: int) : 'Node = Util.asString value |> ofStr\r\n    member _.text (value: string) : 'Node = ofStr value\r\n    member _.text (value: System.Guid) : 'Node = Util.asString value |> ofStr\r\n\r\n    member this.textf fmt = Printf.kprintf this.text fmt\r\n\r\n    member _.textarea (children: seq<'Node>) = mk \"textarea\" children\r\n\r\n    member _.tfoot (children: seq<'Node>) = mk \"tfoot\" children\r\n\r\n    member _.th (value: float) = mk \"th\" [Util.asString value |> ofStr]\r\n    member _.th (value: int) = mk \"th\" [Util.asString value |> ofStr]\r\n    member _.th (value: 'Node) = mk \"th\" [value]\r\n    member _.th (value: string) = mk \"th\" [ofStr value]\r\n    member _.th (children: seq<'Node>) = mk \"th\" children\r\n\r\n    member _.thead (children: seq<'Node>) = mk \"thead\" children\r\n\r\n    member _.time (children: seq<'Node>) = mk \"time\" children\r\n\r\n    member _.tr (children: seq<'Node>) = mk \"tr\" children\r\n\r\n    member _.track (children: seq<'Node>) = mk \"track\" children\r\n\r\n    member _.u (value: float) = mk \"u\" [Util.asString value |> ofStr]\r\n    member _.u (value: int) = mk \"u\" [Util.asString value |> ofStr]\r\n    member _.u (value: 'Node) = mk \"u\" [value]\r\n    member _.u (value: string) = mk \"u\" [ofStr value]\r\n    member _.u (children: seq<'Node>) = mk \"u\" children\r\n\r\n    member _.ul (children: seq<'Node>) = mk \"ul\" children\r\n\r\n    member _.unorderedList (children: seq<'Node>) = mk \"ul\" children\r\n\r\n    member _.var (value: float) = mk \"var\" [Util.asString value |> ofStr]\r\n    member _.var (value: int) = mk \"var\" [Util.asString value |> ofStr]\r\n    member _.var (value: 'Node) = mk \"var\" [value]\r\n    member _.var (value: string) = mk \"var\" [ofStr value]\r\n    member _.var (children: seq<'Node>) = mk \"var\" children\r\n\r\n    member _.video (children: seq<'Node>) = mk \"video\" children\r\n\r\n    member _.wbr (children: seq<'Node>) = mk \"wbr\" children\r\n","﻿namespace Feliz\r\n\r\nopen System\r\nopen Feliz.Styles\r\n\r\ntype AttrEngine<'Node>\r\n    /// <summary>Customizable HTML Attribute generator API.</summary>\r\n    ///\r\n    /// <param name=\"mk\">Make a node with attribute name and value.</param>\r\n    /// <param name=\"mkBool\">Make a node for boolean attribute with name and value.</param>\r\n    (mk: string -> string -> 'Node, mkBool: string -> bool -> 'Node) =\r\n\r\n    /// Create a custom attribute\r\n    ///\r\n    /// You generally shouldn't need to use this, if you notice an attribute missing please submit an issue.\r\n    member _.custom (key: string, value: string) = mk key value\r\n\r\n    /// List of types the server accepts, typically a file type.\r\n    member _.accept (value: string) = mk \"accept\" value\r\n\r\n    /// List of supported charsets.\r\n    member _.acceptCharset (value: string) = mk \"accept-charset\" value\r\n\r\n    /// Defines a keyboard shortcut to activate or add focus to the element.\r\n    member _.accessKey (value: string) = mk \"accesskey\" value\r\n\r\n    /// The URI of a program that processes the information submitted via the form.\r\n    member _.action (value: string) = mk \"action\" value\r\n\r\n    /// Alternative text in case an image can't be displayed.\r\n    member _.alt (value: string) = mk \"alt\" value\r\n\r\n    /// Controls the amplitude of the gamma function of a component transfer element when\r\n    /// its type attribute is gamma.\r\n    member _.amplitude (value: float) = mk \"amplitude\" (Util.asString value)\r\n\r\n    /// Controls the amplitude of the gamma function of a component transfer element when\r\n    /// its type attribute is gamma.\r\n    member _.amplitude (value: int) = mk \"amplitude\" (Util.asString value)\r\n\r\n    /// Identifies the currently active descendant of a `composite` widget.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-activedescendant\r\n    member _.ariaActiveDescendant (id: string) = mk \"aria-activedescendant\" id\r\n\r\n    /// Indicates whether assistive technologies will present all, or only parts\r\n    /// of, the changed region based on the change notifications defined by the\r\n    /// `aria-relevant` attribute.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-atomic\r\n    member _.ariaAtomic (value: bool) = mkBool \"aria-atomic\" value\r\n\r\n    /// Indicates whether an element, and its subtree, are currently being\r\n    /// updated.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-busy\r\n    member _.ariaBusy (value: bool) = mkBool \"aria-busy\" value\r\n\r\n    /// Indicates the current \"checked\" state of checkboxes, radio buttons, and\r\n    /// other widgets. See related `aria-pressed` and `aria-selected`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-checked\r\n    member _.ariaChecked (value: bool) = mkBool \"aria-checked\" value\r\n\r\n    /// Identifies the element (or elements) whose contents or presence are\r\n    /// controlled by the current element. See related `aria-owns`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-controls\r\n    member _.ariaControls ([<ParamArray>] ids: string[]) = mk \"aria-controls\" (String.concat \" \" ids)\r\n\r\n    /// Specifies a URI referencing content that describes the object. See\r\n    /// related `aria-describedby`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-describedat\r\n\r\n    member _.ariaDescribedAt (uri: string) = mk \"aria-describedat\" uri\r\n    /// Identifies the element (or elements) that describes the object. See\r\n    /// related `aria-describedat` and `aria-labelledby`.\r\n    ///\r\n    /// The `aria-labelledby` attribute is similar to `aria-describedby` in that\r\n    /// both reference other elements to calculate a text alternative, but a\r\n    /// label should be concise, where a description is intended to provide more\r\n    /// verbose information.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-describedby\r\n\r\n    member _.ariaDescribedBy ([<ParamArray>] ids: string[]) = mk \"aria-describedby\" (String.concat \" \" ids)\r\n    /// Indicates that the element is perceivable but disabled, so it is not\r\n    /// editable or otherwise operable. See related `aria-hidden` and\r\n    /// `aria-readonly`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-disabled\r\n    member _.ariaDisabled (value: bool) = mkBool \"aria-disabled\" value\r\n\r\n    // /// Indicates what functions can be performed when the dragged object is\r\n    // /// released on the drop target. This allows assistive technologies to\r\n    // /// convey the possible drag options available to users, including whether a\r\n    // /// pop-up menu of choices is provided by the application. Typically, drop\r\n    // /// effect functions can only be provided once an object has been grabbed\r\n    // /// for a drag operation as the drop effect functions available are\r\n    // /// dependent on the object being dragged.\r\n    // ///\r\n    // /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-dropeffect\r\n    // member _.ariaDropEffect ([<ParamArray>] values: AriaDropEffect []) = mk \"aria-dropeffect\" values |> Array.map Util.asString |> String.concat \" \"\r\n\r\n    /// Indicates whether the element, or another grouping element it controls,\r\n    /// is currently expanded or collapsed.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-expanded\r\n    member _.ariaExpanded (value: bool) = mkBool \"aria-expanded\" value\r\n\r\n    /// Identifies the next element (or elements) in an alternate reading order\r\n    /// of content which, at the user's discretion, allows assistive technology\r\n    /// to override the general default of reading in document source order.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-flowto\r\n    member _.ariaFlowTo ([<ParamArray>] ids: string[]) = mk \"aria-flowto\" (String.concat \" \" ids)\r\n\r\n    /// Indicates an element's \"grabbed\" state in a drag-and-drop operation.\r\n    ///\r\n    /// When it is set to true it has been selected for dragging, false\r\n    /// indicates that the element can be grabbed for a drag-and-drop operation,\r\n    /// but is not currently grabbed, and undefined (or no value) indicates the\r\n    /// element cannot be grabbed (default).\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-grabbed\r\n    member _.ariaGrabbed (value: bool) = mkBool \"aria-grabbed\" value\r\n\r\n    /// Indicates that the element has a popup context menu or sub-level menu.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-haspopup\r\n    member _.ariaHasPopup (value: bool) = mkBool \"aria-haspopup\" value\r\n\r\n    /// Indicates that the element and all of its descendants are not visible or\r\n    /// perceivable to any user as implemented by the author. See related\r\n    /// `aria-disabled`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-hidden\r\n    member _.ariaHidden (value: bool) = mkBool \"aria-hidden\" value\r\n\r\n    /// Indicates the entered value does not conform to the format expected by\r\n    /// the application.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-invalid\r\n    member _.ariaInvalid (value: bool) = mkBool \"aria-invalid\" value\r\n\r\n    /// Defines a (Util.asString value) that labels the current element. See related\r\n    /// `aria-labelledby`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-label\r\n    member _.ariaLabel (value: string) = mk \"aria-label\" value\r\n    /// Defines the hierarchical level of an element within a structure.\r\n    ///\r\n    /// This can be applied inside trees to tree items, to headings inside a\r\n    /// document, to nested grids, nested tablists and to other structural items\r\n    /// that may appear inside a container or participate in an ownership\r\n    /// hierarchy. The value for `aria-level` is an integer greater than or\r\n    /// equal to 1.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-level\r\n    member _.ariaLevel (value: int) = mk \"aria-level\" (Util.asString value)\r\n\r\n    /// Identifies the element (or elements) that labels the current element.\r\n    /// See related `aria-label` and `aria-describedby`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-labelledby\r\n    member _.ariaLabelledBy ([<ParamArray>] ids: string[]) = mk \"aria-labelledby\" (String.concat \" \" ids)\r\n\r\n    /// Indicates whether a text box accepts multiple lines of input or only a\r\n    /// single line.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-multiline\r\n    member _.ariaMultiLine (value: bool) = mkBool \"aria-multiline\" value\r\n\r\n    /// Indicates that the user may select more than one item from the current\r\n    /// selectable descendants.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-multiselectable\r\n    member _.ariaMultiSelectable (value: bool) = mkBool \"aria-multiselectable\" value\r\n\r\n    /// Identifies an element (or elements) in order to define a visual,\r\n    /// functional, or contextual parent/child relationship between DOM elements\r\n    /// where the DOM hierarchy cannot be used to represent the relationship.\r\n    /// See related `aria-controls`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-owns\r\n    member _.ariaOwns ([<ParamArray>] ids: string[]) = mk \"aria-owns\" (String.concat \" \" ids)\r\n\r\n    /// Indicates the current \"pressed\" state of toggle buttons. See related\r\n    /// `aria-checked` and `aria-selected`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-pressed\r\n    member _.ariaPressed (value: bool) = mkBool \"aria-pressed\" value\r\n\r\n    /// Defines an element's number or position in the current set of listitems\r\n    /// or treeitems. Not required if all elements in the set are present in the\r\n    /// DOM. See related `aria-setsize`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-posinset\r\n    member _.ariaPosInSet (value: int) = mk \"aria-posinset\" (Util.asString value)\r\n\r\n    /// Indicates that the element is not editable, but is otherwise operable.\r\n    /// See related `aria-disabled`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-readonly\r\n    member _.ariaReadOnly (value: bool) = mkBool \"aria-readonly\" value\r\n\r\n    // /// Indicates what user agent change notifications (additions, removals,\r\n    // /// etc.) assistive technologies will receive within a live region. See\r\n    // /// related `aria-atomic`.\r\n    // ///\r\n    // /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-relevant\r\n    // member _.ariaRelevant ([<ParamArray>] values: AriaRelevant []) = mk \"aria-relevant\" values |> Array.map Util.asString |> String.concat \" \"\r\n\r\n    /// Indicates that user input is required on the element before a form may\r\n    /// be submitted.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-required\r\n    member _.ariaRequired (value: bool) = mkBool \"aria-required\" value\r\n\r\n    /// Indicates the current \"selected\" state of various widgets. See related\r\n    /// `aria-checked` and `aria-pressed`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-selected\r\n    member _.ariaSelected (value: bool) = mkBool \"aria-selected\" value\r\n\r\n    /// Defines the maximum allowed value for a range widget.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuemax\r\n    member _.ariaValueMax (value: float) = mk \"aria-valuemax\" (Util.asString value)\r\n    /// Defines the maximum allowed value for a range widget.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuemax\r\n    member _.ariaValueMax (value: int) = mk \"aria-valuemax\" (Util.asString value)\r\n\r\n    /// Defines the minimum allowed value for a range widget.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuemin\r\n    member _.ariaValueMin (value: float) = mk \"aria-valuemin\" (Util.asString value)\r\n    /// Defines the minimum allowed value for a range widget.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuemin\r\n    member _.ariaValueMin (value: int) = mk \"aria-valuemin\" (Util.asString value)\r\n\r\n    /// Defines the current value for a range widget. See related\r\n    /// `aria-valuetext`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuenow\r\n    member _.ariaValueNow (value: float) = mk \"aria-valuenow\" (Util.asString value)\r\n    /// Defines the current value for a range widget. See related\r\n    /// `aria-valuetext`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuenow\r\n    member _.ariaValueNow (value: int) = mk \"aria-valuenow\" (Util.asString value)\r\n\r\n    /// Defines the human readable text alternative of `aria-valuenow` for a\r\n    /// range widget.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-valuetext\r\n    member _.ariaValueText (value: string) = mk \"aria-valuetext\" value\r\n\r\n    /// Defines the number of items in the current set of listitems or\r\n    /// treeitems. Not required if all elements in the set are present in the\r\n    /// DOM. See related `aria-posinset`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/states_and_properties#aria-setsize\r\n    member _.ariaSetSize (value: int) = mk \"aria-setsize\" (Util.asString value)\r\n\r\n    /// Indicates that the script should be executed asynchronously.\r\n    member _.async (value: bool) = mkBool \"async\" value\r\n\r\n    /// Indicates the name of the CSS property or attribute of the target element\r\n    /// that is going to be changed during an animation.\r\n    member _.attributeName (value: string) = mk \"attributeName\" value\r\n\r\n    /// Indicates whether controls in this form can by default have their values\r\n    /// automatically completed by the browser.\r\n    member _.autoComplete (value: string) = mk \"autocomplete\" value\r\n\r\n    /// The element should be automatically focused after the page loaded.\r\n    member _.autoFocus (value: bool) = mkBool \"autofocus\" value\r\n\r\n    /// The audio or video should play as soon as possible.\r\n    member _.autoPlay (value: bool) = mkBool \"autoplay\" value\r\n\r\n    /// Specifies the direction angle for the light source on the XY plane (clockwise),\r\n    /// in degrees from the x axis.\r\n    member _.azimuth (value: float) = mk \"azimuth\" (Util.asString value)\r\n    /// Specifies the direction angle for the light source on the XY plane (clockwise),\r\n    /// in degrees from the x axis.\r\n    member _.azimuth (value: int) = mk \"azimuth\" (Util.asString value)\r\n\r\n    /// Represents the base frequency parameter for the noise function of the\r\n    /// <feTurbulence> filter primitive.\r\n    member _.baseFrequency (value: float) = mk \"baseFrequency\" (Util.asString value)\r\n    /// Represents the base frequency parameter for the noise function of the\r\n    /// <feTurbulence> filter primitive.\r\n    member _.baseFrequency (value: int) = mk \"baseFrequency\" (Util.asString value)\r\n    /// Represents the base frequency parameter for the noise function of the\r\n    /// <feTurbulence> filter primitive.\r\n    member _.baseFrequency (horizontal: float, vertical: float) = mk \"baseFrequency\" (Util.asString horizontal + \",\" + Util.asString vertical)\r\n    /// Represents the base frequency parameter for the noise function of the\r\n    /// <feTurbulence> filter primitive.\r\n    member _.baseFrequency (horizontal: int, vertical: int) = mk \"baseFrequency\" (Util.asString horizontal + \",\" + Util.asString vertical)\r\n    /// Represents the base frequency parameter for the noise function of the\r\n    /// <feTurbulence> filter primitive.\r\n\r\n    /// Defines when an animation should begin or when an element should be discarded.\r\n    member _.begin' (value: string) = mk \"begin\" value\r\n\r\n    /// Shifts the range of the filter. After applying the kernelMatrix of the <feConvolveMatrix>\r\n    /// element to the input image to yield a number and applied the divisor attribute, the bias\r\n    /// attribute is added to each component. This allows representation of values that would\r\n    /// otherwise be clamped to 0 or 1.\r\n    member _.bias (value: float) = mk \"bias\" (Util.asString value)\r\n    /// Shifts the range of the filter. After applying the kernelMatrix of the <feConvolveMatrix>\r\n    /// element to the input image to yield a number and applied the divisor attribute, the bias\r\n    /// attribute is added to each component. This allows representation of values that would\r\n    /// otherwise be clamped to 0 or 1.\r\n    member _.bias (value: int) = mk \"bias\" (Util.asString value)\r\n\r\n    /// Specifies a relative offset value for an attribute that will be modified during an animation.\r\n    member _.by (value: float) = mk \"by\" (Util.asString value)\r\n    /// Specifies a relative offset value for an attribute that will be modified during an animation.\r\n    member _.by (value: int) = mk \"by\" (Util.asString value)\r\n    /// Specifies a relative offset value for an attribute that will be modified during an animation.\r\n    member _.by (value: string) = mk \"by\" value\r\n\r\n    member _.capture (value: bool) = mkBool \"capture\" value\r\n\r\n    /// This attribute declares the document's character encoding. Must be used in the meta tag.\r\n    member _.charset (value: string) = mk \"charset\" value\r\n\r\n    /// A URL that designates a source document or message for the information quoted. This attribute is intended to\r\n    /// point to information explaining the context or the reference for the quote.\r\n    member _.cite (value: string) = mk \"cite\" value\r\n\r\n    /// Specifies a CSS class for this element.\r\n    member _.className (value: string) = mk \"class\" value\r\n    /// Takes a `seq<string>` and joins them using a space to combine the classses into a single class property.\r\n    ///\r\n    /// `prop.className [ \"one\"; \"two\" ]`\r\n    ///\r\n    /// is the same as\r\n    ///\r\n    /// `prop.className \"one two\"`\r\n    member _.className (names: seq<string>) = mk \"class\" (String.concat \" \" names)\r\n\r\n    /// Takes a `seq<string>` and joins them using a space to combine the classses into a single class property.\r\n    ///\r\n    /// `prop.classes [ \"one\"; \"two\" ]` => `prop.className \"one two\"`\r\n    member _.classes (names: seq<string>) = mk \"class\" (String.concat \" \" names)\r\n\r\n    member _.classes (names: seq<bool * string>) =\r\n        let class' = names |> Seq.choose (function false, _ -> None | true, c -> Some c) |> String.concat \" \"\r\n        mk \"class\" class'\r\n\r\n    /// Defines the number of columns in a textarea.\r\n    member _.cols (value: int) = mk \"cols\" (Util.asString value)\r\n\r\n    /// Defines the number of columns a cell should span.\r\n    member _.colSpan (value: int) = mk \"colspan\" (Util.asString value)\r\n\r\n    /// A value associated with http-equiv or name depending on the context.\r\n    member _.content (value: string) = mk \"content\" value\r\n\r\n    /// Indicates whether the element's content is editable.\r\n    member _.contentEditable (value: bool) = mkBool \"contenteditable\" value\r\n\r\n    /// If true, the browser will offer controls to allow the user to control video playback,\r\n    /// including volume, seeking, and pause/resume playback.\r\n    member _.controls (value: bool) = mkBool \"controls\" value\r\n\r\n    /// The SVG cx attribute define the x-axis coordinate of a center point.\r\n    ///\r\n    /// Three elements are using this attribute: <circle>, <ellipse>, and <radialGradient>\r\n    member _.cx (value: ICssUnit) = mk \"cx\" (Util.asString value)\r\n    /// The SVG cx attribute define the x-axis coordinate of a center point.\r\n    ///\r\n    /// Three elements are using this attribute: <circle>, <ellipse>, and <radialGradient>\r\n    member _.cx (value: int) = mk \"cx\" (Util.asString value)\r\n\r\n    /// The SVG cy attribute define the y-axis coordinate of a center point.\r\n    ///\r\n    /// Three elements are using this attribute: <circle>, <ellipse>, and <radialGradient>\r\n    member _.cy (value: ICssUnit) = mk \"cy\" (Util.asString value)\r\n    /// The SVG cy attribute define the y-axis coordinate of a center point.\r\n    ///\r\n    /// Three elements are using this attribute: <circle>, <ellipse>, and <radialGradient>\r\n    member _.cy (value: int) = mk \"cy\" (Util.asString value)\r\n\r\n    // TODO\r\n    // /// Defines a SVG path to be drawn.\r\n    // member _.d (path: seq<char * (float list list)>) =\r\n    //     PropHelpers.createSvgPathFloat path\r\n    //     |> h.MakeAttr(\"d\",)\r\n    // /// Defines a SVG path to be drawn.\r\n    // member _.d (path: seq<char * (int list list)>) =\r\n    //     PropHelpers.createSvgPathInt path\r\n    //     |> h.MakeAttr(\"d\",)\r\n    /// Defines a SVG path to be drawn.\r\n    member _.d (path: string) = mk \"d\" path\r\n\r\n    // /// Sets the inner Html content of the element.\r\n    // member _.dangerouslySetInnerHTML (content: string) = mk \"dangerouslySetInnerHTML\" (createObj [ \"__html\" ==> content ])\r\n\r\n    /// This attribute indicates the time and/or date of the element.\r\n    member _.dateTime (value: string) = mk \"datetime\" value\r\n\r\n    /// Indicates to a browser that the script is meant to be executed after the document\r\n    /// has been parsed, but before firing DOMContentLoaded.\r\n    ///\r\n    /// Scripts with the defer attribute will prevent the DOMContentLoaded event from\r\n    /// firing until the script has loaded and finished evaluating.\r\n    ///\r\n    /// This attribute must not be used if the src attribute is absent (i.e. for inline scripts),\r\n    /// in this case it would have no effect.\r\n    member _.defer (value: bool) = mkBool \"defer\" value\r\n\r\n    /// Represents the kd value in the Phong lighting model.\r\n    ///\r\n    /// In SVG, this can be any non-negative number.\r\n    member _.diffuseConstant (value: float) = mk \"diffuseConstant\" (Util.asString value)\r\n    /// Represents the kd value in the Phong lighting model.\r\n    ///\r\n    /// In SVG, this can be any non-negative number.\r\n    member _.diffuseConstant (value: int) = mk \"diffuseConstant\" (Util.asString value)\r\n\r\n    /// Sets the directionality of the element.\r\n    member _.dirName (value: string) = mk \"dirName\" value\r\n\r\n    /// Indicates whether the user can interact with the element.\r\n    member _.disabled (value: bool) = mkBool \"disabled\" value\r\n\r\n    /// Specifies the value by which the resulting number of applying the kernelMatrix\r\n    /// of a <feConvolveMatrix> element to the input image color value is divided to\r\n    /// yield the destination color value.\r\n    ///\r\n    /// A divisor that is the sum of all the matrix values tends to have an evening\r\n    /// effect on the overall color intensity of the result.\r\n    member _.divisor (value: float) = mk \"divisor\" (Util.asString value)\r\n    /// Specifies the value by which the resulting number of applying the kernelMatrix\r\n    /// of a <feConvolveMatrix> element to the input image color value is divided to\r\n    /// yield the destination color value.\r\n    ///\r\n    /// A divisor that is the sum of all the matrix values tends to have an evening\r\n    /// effect on the overall color intensity of the result.\r\n    member _.divisor (value: int) = mk \"divisor\" (Util.asString value)\r\n\r\n    /// This attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource.\r\n    member _.download (value: bool) = mkBool \"download\" value\r\n\r\n    /// Indicates whether the the element can be dragged.\r\n    member _.draggable (value: bool) = mkBool \"draggable\" value\r\n\r\n    /// SVG attribute to indicate a shift along the x-axis on the position of an element or its content.\r\n    member _.dx (value: float) = mk \"dx\" (Util.asString value)\r\n    /// SVG attribute to indicate a shift along the x-axis on the position of an element or its content.\r\n    member _.dx (value: int) = mk \"dx\" (Util.asString value)\r\n\r\n    /// SVG attribute to indicate a shift along the y-axis on the position of an element or its content.\r\n    member _.dy (value: float) = mk \"dy\" (Util.asString value)\r\n    /// SVG attribute to indicate a shift along the y-axis on the position of an element or its content.\r\n    member _.dy (value: int) = mk \"dy\" (Util.asString value)\r\n\r\n    /// SVG attribute that specifies the direction angle for the light source from the XY plane towards\r\n    /// the Z-axis, in degrees.\r\n    ///\r\n    /// Note that the positive Z-axis points towards the viewer of the content.\r\n    member _.elevation (value: float) = mk \"elevation\" (Util.asString value)\r\n    /// SVG attribute that specifies the direction angle for the light source from the XY plane towards\r\n    /// the Z-axis, in degrees.\r\n    ///\r\n    /// Note that the positive Z-axis points towards the viewer of the content.\r\n    member _.elevation (value: int) = mk \"elevation\" (Util.asString value)\r\n\r\n    /// Defines an end value for the animation that can constrain the active duration.\r\n    member _.end' (value: string) = mk \"end\" value\r\n    /// Defines an end value for the animation that can constrain the active duration.\r\n    member _.end' (values: seq<string>) = mk \"end\" (String.concat \";\" values)\r\n    /// Defines the exponent of the gamma function.\r\n    member _.exponent (value: float) = mk \"exponent\" (Util.asString value)\r\n    /// Defines the exponent of the gamma function.\r\n    member _.exponent (value: int) = mk \"exponent\" (Util.asString value)\r\n\r\n    // /// Defines the files that will be uploaded when using an input element of the file type.\r\n    // member _.files (value: FileList) = mk \"files\" value\r\n\r\n    /// SVG attribute to define the opacity of the paint server (color, gradient, pattern, etc) applied to a shape.\r\n    member _.fillOpacity (value: float) = mk \"fill-opacity\" (Util.asString value)\r\n    /// SVG attribute to define the opacity of the paint server (color, gradient, pattern, etc) applied to a shape.\r\n    member _.fillOpacity (value: int) = mk \"fill-opacity\" (Util.asString value)\r\n\r\n    /// SVG attribute to define the size of the font from baseline to baseline when multiple\r\n    /// lines of text are set solid in a multiline layout environment.\r\n    member _.fontSize (value: float) = mk \"font-size\" (Util.asString value)\r\n    /// SVG attribute to define the size of the font from baseline to baseline when multiple\r\n    /// lines of text are set solid in a multiline layout environment.\r\n    member _.fontSize (value: int) = mk \"font-size\" (Util.asString value)\r\n\r\n    /// A space-separated list of other elements’ ids, indicating that those elements contributed input\r\n    /// values to (or otherwise affected) the calculation.\r\n    member _.for' (value: string) = mk \"for\" value\r\n    /// A space-separated list of other elements’ ids, indicating that those elements contributed input\r\n    /// values to (or otherwise affected) the calculation.\r\n    member _.for' (ids: #seq<string>) = mk \"for\" (ids |> String.concat \" \")\r\n\r\n    /// The <form> element to associate the <meter> element with (its form owner). The value of this\r\n    /// attribute must be the id of a <form> in the same document. If this attribute is not set, the\r\n    /// <button> is associated with its ancestor <form> element, if any. This attribute is only used\r\n    /// if the <meter> element is being used as a form-associated element, such as one displaying a\r\n    /// range corresponding to an <input type=\"number\">.\r\n    member _.form (value: string) = mk \"form\" value\r\n\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.from (value: float) = mk \"from\" (Util.asString value)\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.from (values: seq<float>) = mk \"from\" (values |> Seq.map Util.asString |> String.concat \" \")\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.from (value: int) = mk \"from\" (Util.asString value)\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.from (values: seq<int>) = mk \"from\" (values |> Seq.map Util.asString |> String.concat \" \")\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.from (value: string) = mk \"from\" value\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.from (values: seq<string>) = mk \"from\" (values |> String.concat \" \")\r\n\r\n    /// Defines the radius of the focal point for the radial gradient.\r\n    member _.fr (value: int) = mk \"fr\" (Util.asString value)\r\n    /// Defines the radius of the focal point for the radial gradient.\r\n    member _.fr (value: ICssUnit) = mk \"fr\" (Util.asString value)\r\n\r\n    /// Defines the x-axis coordinate of the focal point for a radial gradient.\r\n    member _.fx (value: int) = mk \"fx\" (Util.asString value)\r\n    /// Defines the x-axis coordinate of the focal point for a radial gradient.\r\n    member _.fx (value: ICssUnit) = mk \"fx\" (Util.asString value)\r\n\r\n    /// Defines the y-axis coordinate of the focal point for a radial gradient.\r\n    member _.fy (value: int) = mk \"fy\" (Util.asString value)\r\n    /// Defines the y-axis coordinate of the focal point for a radial gradient.\r\n    member _.fy (value: ICssUnit) = mk \"fy\" (Util.asString value)\r\n\r\n    /// Defines an optional additional transformation from the gradient coordinate system\r\n    /// onto the target coordinate system (i.e., userSpaceOnUse or objectBoundingBox).\r\n    ///\r\n    /// This allows for things such as skewing the gradient. This additional transformation\r\n    /// matrix is post-multiplied to (i.e., inserted to the right of) any previously defined\r\n    /// transformations, including the implicit transformation necessary to convert from object\r\n    /// bounding box units to user space.\r\n    member _.gradientTransform (transform: ITransformProperty) =\r\n        mk \"gradientTransform\" (Util.asString transform)\r\n    /// Defines optional additional transformation(s) from the gradient coordinate system\r\n    /// onto the target coordinate system (i.e., userSpaceOnUse or objectBoundingBox).\r\n    ///\r\n    /// This allows for things such as skewing the gradient. This additional transformation\r\n    /// matrix is post-multiplied to (i.e., inserted to the right of) any previously defined\r\n    /// transformations, including the implicit transformation necessary to convert from object\r\n    /// bounding box units to user space.\r\n    member _.gradientTransform (transforms: seq<ITransformProperty>) =\r\n        mk \"gradientTransform\" (transforms |> Seq.map Util.asString |> String.concat \" \")\r\n\r\n    /// Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\r\n    member _.hidden (value: bool) = mkBool \"hidden\" value\r\n\r\n    /// Specifies the height of elements listed here. For all other elements, use the CSS height property.\r\n    ///\r\n    /// HTML: <canvas>, <embed>, <iframe>, <img>, <input>, <object>, <video>\r\n    ///\r\n    /// SVG: <feBlend>, <feColorMatrix>, <feComponentTransfer>, <feComposite>, <feConvolveMatrix>,\r\n    /// <feDiffuseLighting>, <feDisplacementMap>, <feDropShadow>, <feFlood>, <feGaussianBlur>, <feImage>,\r\n    /// <feMerge>, <feMorphology>, <feOffset>, <feSpecularLighting>, <feTile>, <feTurbulence>, <filter>,\r\n    /// <mask>, <pattern>\r\n    member _.height (value: ICssUnit) = mk \"height\" (Util.asString value)\r\n    /// Specifies the height of elements listed here. For all other elements, use the CSS height property.\r\n    ///\r\n    /// HTML: <canvas>, <embed>, <iframe>, <img>, <input>, <object>, <video>\r\n    ///\r\n    /// SVG: <feBlend>, <feColorMatrix>, <feComponentTransfer>, <feComposite>, <feConvolveMatrix>,\r\n    /// <feDiffuseLighting>, <feDisplacementMap>, <feDropShadow>, <feFlood>, <feGaussianBlur>, <feImage>,\r\n    /// <feMerge>, <feMorphology>, <feOffset>, <feSpecularLighting>, <feTile>, <feTurbulence>, <filter>,\r\n    /// <mask>, <pattern>\r\n    member _.height (value: int) = mk \"height\" (Util.asString value)\r\n\r\n    /// The lower numeric bound of the high end of the measured range. This must be less than the\r\n    /// maximum value (max attribute), and it also must be greater than the low value and minimum\r\n    /// value (low attribute and min attribute, respectively), if any are specified. If unspecified,\r\n    /// or if greater than the maximum value, the high value is equal to the maximum value.\r\n    member _.high (value: float) = mk \"high\" (Util.asString value)\r\n    /// The lower numeric bound of the high end of the measured range. This must be less than the\r\n    /// maximum value (max attribute), and it also must be greater than the low value and minimum\r\n    /// value (low attribute and min attribute, respectively), if any are specified. If unspecified,\r\n    /// or if greater than the maximum value, the high value is equal to the maximum value.\r\n    member _.high (value: int) = mk \"high\" (Util.asString value)\r\n\r\n    /// The URL of a linked resource.\r\n    member _.href (value: string) = mk \"href\" value\r\n\r\n    /// Indicates the language of the linked resource. Allowed values are determined by BCP47.\r\n    ///\r\n    /// Use this attribute only if the href attribute is present.\r\n    member _.hrefLang (value: string) = mk \"hreflang\" value\r\n\r\n    member _.htmlFor (value: string) = mk \"for\" value\r\n\r\n    /// Often used with CSS to style a specific element. The value of this attribute must be unique.\r\n    member _.id (value: int) = mk \"id\" ((Util.asString value))\r\n    /// Often used with CSS to style a specific element. The value of this attribute must be unique.\r\n    member _.id (value: string) = mk \"id\" value\r\n\r\n    // /// Alias for `dangerouslySetInnerHTML`, sets the inner Html content of the element.\r\n    // member _.innerHtml (content: string) = mk \"dangerouslySetInnerHTML\" (createObj [ \"__html\" ==> content ])\r\n\r\n    /// Contains inline metadata that a user agent can use to verify that a fetched resource\r\n    /// has been delivered free of unexpected manipulation.\r\n    member _.integrity (value: string) = mk \"integrity\" value\r\n\r\n    /// Defines the intercept of the linear function of color component transfers when the type\r\n    /// attribute is set to linear.\r\n    member _.intercept (value: float) = mk \"intercept\" (Util.asString value)\r\n    /// Defines the intercept of the linear function of color component transfers when the type\r\n    /// attribute is set to linear.\r\n    member _.intercept (value: int) = mk \"intercept\" (Util.asString value)\r\n\r\n    /// Sets the checked attribute for an element.\r\n    member _.isChecked (value: bool) = mkBool \"checked\" value\r\n\r\n    /// Sets the open attribute for an element.\r\n    member _.isOpen (value: bool) = mkBool \"open\" value\r\n\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k1 (value: float) = mk \"k1\" (Util.asString value)\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k1 (value: int) = mk \"k1\" (Util.asString value)\r\n\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k2 (value: float) = mk \"k2\" (Util.asString value)\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k2 (value: int) = mk \"k2\" (Util.asString value)\r\n\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k3 (value: float) = mk \"k3\" (Util.asString value)\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k3 (value: int) = mk \"k3\" (Util.asString value)\r\n\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k4 (value: float) = mk \"k4\" (Util.asString value)\r\n    /// Defines one of the values to be used within the the arithmetic operation of the\r\n    /// <feComposite> filter primitive.\r\n    member _.k4 (value: int) = mk \"k4\" (Util.asString value)\r\n\r\n    /// Defines the list of numbers that make up the kernel matrix for the\r\n    /// <feConvolveMatrix> element.\r\n    member _.kernelMatrix (values: seq<float>) = mk \"kernelMatrix\" (values |> Seq.map Util.asString |> String.concat \" \")\r\n    /// Defines the list of numbers that make up the kernel matrix for the\r\n    /// <feConvolveMatrix> element.\r\n    member _.kernelMatrix (values: seq<int>) = mk \"kernelMatrix\" (values |> Seq.map Util.asString  |> String.concat \" \")\r\n\r\n    /// Indicates the simple duration of an animation.\r\n    member _.keyPoints (values: seq<float>) =\r\n        mk \"keyPoints\" (values |> Seq.map Util.asString  |> String.concat \";\")\r\n\r\n    // /// Indicates the simple duration of an animation.\r\n    // ///\r\n    // /// Each control point description is a set of four values: x1 y1 x2 y2, describing the Bézier\r\n    // /// control points for one time segment.\r\n    // ///\r\n    // /// The keyTimes values that define the associated segment are the Bézier \"anchor points\",\r\n    // /// and the keySplines values are the control points. Thus, there must be one fewer sets of\r\n    // /// control points than there are keyTimes.\r\n    // ///\r\n    // /// The values of x1 y1 x2 y2 must all be in the range 0 to 1.\r\n    // member _.keySplines (values: seq<float * float * float * float>) =\r\n    //     PropHelpers.createKeySplines(values)\r\n    //     |> h.MakeAttr(\"keySplines\",)\r\n\r\n    /// Indicates the simple duration of an animation.\r\n    member _.keyTimes (values: seq<float>) =\r\n        mk \"keyTimes\" (values |> Seq.map Util.asString |> String.concat \";\")\r\n\r\n    /// Helps define the language of an element: the language that non-editable elements are\r\n    /// written in, or the language that the editable elements should be written in by the user.\r\n    member _.lang (value: string) = mk \"lang\" value\r\n\r\n    /// Defines the color of the light source for lighting filter primitives.\r\n    member _.lightingColor (value: string) = mk \"lighting-color\" value\r\n\r\n    /// Represents the angle in degrees between the spot light axis (i.e. the axis between the\r\n    /// light source and the point to which it is pointing at) and the spot light cone. So it\r\n    /// defines a limiting cone which restricts the region where the light is projected.\r\n    ///\r\n    /// No light is projected outside the cone.\r\n    member _.limitingConeAngle (value: float) = mk \"limitingConeAngle\" (Util.asString value)\r\n    /// Represents the angle in degrees between the spot light axis (i.e. the axis between the\r\n    /// light source and the point to which it is pointing at) and the spot light cone. So it\r\n    /// defines a limiting cone which restricts the region where the light is projected.\r\n    ///\r\n    /// No light is projected outside the cone.\r\n    member _.limitingConeAngle (value: int) = mk \"limitingConeAngle\" (Util.asString value)\r\n\r\n    /// If true, the browser will automatically seek back to the start upon reaching the end of the video.\r\n    member _.loop (value: bool) = mkBool \"loop\" value\r\n\r\n    /// The upper numeric bound of the low end of the measured range. This must be greater than\r\n    /// the minimum value (min attribute), and it also must be less than the high value and\r\n    /// maximum value (high attribute and max attribute, respectively), if any are specified.\r\n    /// If unspecified, or if less than the minimum value, the low value is equal to the minimum value.\r\n    member _.low (value: float) = mk \"low\" (Util.asString value)\r\n    /// The upper numeric bound of the low end of the measured range. This must be greater than\r\n    /// the minimum value (min attribute), and it also must be less than the high value and\r\n    /// maximum value (high attribute and max attribute, respectively), if any are specified.\r\n    /// If unspecified, or if less than the minimum value, the low value is equal to the minimum value.\r\n    member _.low (value: int) = mk \"low\" (Util.asString value)\r\n    /// Indicates the maximum value allowed.\r\n    member _.max (value: float) = mk \"max\" (Util.asString value)\r\n    /// Indicates the maximum value allowed.\r\n    member _.max (value: int) = mk \"max\" (Util.asString value)\r\n    /// Indicates the maximum value allowed.\r\n    member _.max (value: DateTime) = mk \"max\" (value.ToString(\"yyyy-MM-dd\"))\r\n\r\n    /// Defines the maximum number of characters allowed in the element.\r\n    member _.maxLength (value: int) = mk \"maxlength\" (Util.asString value)\r\n\r\n    /// This attribute specifies the media that the linked resource applies to.\r\n    /// Its value must be a media type / media query. This attribute is mainly useful\r\n    /// when linking to external stylesheets — it allows the user agent to pick the\r\n    /// best adapted one for the device it runs on.\r\n    ///\r\n    /// In HTML 4, this can only be a simple white-space-separated list of media\r\n    /// description literals, i.e., media types and groups, where defined and allowed\r\n    /// as values for this attribute, such as print, screen, aural, braille. HTML5\r\n    /// extended this to any kind of media queries, which are a superset of the allowed\r\n    /// values of HTML 4.\r\n    ///\r\n    /// Browsers not supporting CSS3 Media Queries won't necessarily recognize the adequate\r\n    /// link; do not forget to set fallback links, the restricted set of media queries\r\n    /// defined in HTML 4.\r\n    member _.media (value: string) = mk \"media\" value\r\n\r\n    /// Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\r\n    member _.method (value: string) = mk \"method\" value\r\n\r\n    /// Indicates the minimum value allowed.\r\n    member _.min (value: float) = mk \"min\" (Util.asString value)\r\n    /// Indicates the minimum value allowed.\r\n    member _.min (value: int) = mk \"min\" (Util.asString value)\r\n    /// Indicates the minimum value allowed.\r\n    member _.min (value: DateTime) = mk \"min\" (value.ToString(\"yyyy-MM-dd\"))\r\n\r\n    /// Defines the minimum number of characters allowed in the element.\r\n    member _.minLength (value: int) = mk \"minlength\" (Util.asString value)\r\n\r\n    /// Indicates whether multiple values can be entered in an input of the type email or file.\r\n    member _.multiple (value: bool) = mkBool \"multiple\" value\r\n\r\n    /// Indicates whether the audio will be initially silenced on page load.\r\n    member _.muted (value: bool) = mkBool \"muted\" value\r\n\r\n    /// Name of the element.\r\n    ///\r\n    /// For example used by the server to identify the fields in form submits.\r\n    member _.name (value: string) = mk \"name\" value\r\n\r\n    /// This Boolean attribute is set to indicate that the script should not be executed in\r\n    /// browsers that support ES2015 modules — in effect, this can be used to serve fallback\r\n    /// scripts to older browsers that do not support modular JavaScript code.\r\n    member _.nomodule (value: bool) = mkBool \"nomodule\" value\r\n\r\n    /// A cryptographic nonce (number used once) to whitelist scripts in a script-src\r\n    /// Content-Security-Policy. The server must generate a unique nonce value each time\r\n    /// it transmits a policy. It is critical to provide a nonce that cannot be guessed\r\n    /// as bypassing a resource's policy is otherwise trivial.\r\n    member _.nonce (value: string) = mk \"nonce\" value\r\n\r\n    /// Defines the number of octaves for the noise function of the <feTurbulence> primitive.\r\n    member _.numOctaves (value: int) = mk \"numOctaves\" (Util.asString value)\r\n\r\n    /// SVG attribute to define where the gradient color will begin or end.\r\n    member _.offset (value: ICssUnit) = mk \"offset\" (Util.asString value)\r\n    /// SVG attribute to define where the gradient color will begin or end.\r\n    member _.offset (value: int) = mk \"offset\" (Util.asString value)\r\n\r\n    /// This attribute indicates the optimal numeric value. It must be within the range (as defined by the min\r\n    /// attribute and max attribute). When used with the low attribute and high attribute, it gives an indication\r\n    /// where along the range is considered preferable. For example, if it is between the min attribute and the\r\n    /// low attribute, then the lower range is considered preferred.\r\n    member _.optimum (value: float) = mk \"optimum\" (Util.asString value)\r\n    /// This attribute indicates the optimal numeric value. It must be within the range (as defined by the min\r\n    /// attribute and max attribute). When used with the low attribute and high attribute, it gives an indication\r\n    /// where along the range is considered preferable. For example, if it is between the min attribute and the\r\n    /// low attribute, then the lower range is considered preferred.\r\n    member _.optimum (value: int) = mk \"optimum\" (Util.asString value)\r\n\r\n    /// Indicates the minimum value allowed.\r\n    member _.order (value: int) = mk \"order\" (Util.asString value)\r\n    /// Indicates the minimum value allowed.\r\n    member _.order (values: seq<int>) = mk \"order\" (values |> Seq.map Util.asString |> String.concat \" \")\r\n\r\n    /// Represents the ideal vertical position of the overline.\r\n    ///\r\n    /// The overline position is expressed in the font's coordinate system.\r\n    member _.overlinePosition (value: float) = mk \"overline-position\" (Util.asString value)\r\n    /// Represents the ideal vertical position of the overline.\r\n    ///\r\n    /// The overline position is expressed in the font's coordinate system.\r\n    member _.overlinePosition (value: int) = mk \"overline-position\" (Util.asString value)\r\n\r\n    /// Represents the ideal thickness of the overline.\r\n    ///\r\n    /// The overline thickness is expressed in the font's coordinate system.\r\n    member _.overlineThickness (value: float) = mk \"overline-thickness\" (Util.asString value)\r\n    /// Represents the ideal thickness of the overline.\r\n    ///\r\n    /// The overline thickness is expressed in the font's coordinate system.\r\n    member _.overlineThickness (value: int) = mk \"overline-thickness\" (Util.asString value)\r\n\r\n    // /// It either defines a text path along which the characters of a text are rendered, or a motion\r\n    // /// path along which a referenced element is animated.\r\n    // member _.path (path: seq<char * (float list list)>) =\r\n    //     PropHelpers.createSvgPathFloat path\r\n    //     |> h.MakeAttr(\"path\")\r\n    // /// It either defines a text path along which the characters of a text are rendered, or a motion\r\n    // /// path along which a referenced element is animated.\r\n    // member _.path (path: seq<char * (int list list)>) =\r\n    //     PropHelpers.createSvgPathInt path\r\n    //     |> h.MakeAttr(\"path\")\r\n    /// It either defines a text path along which the characters of a text are rendered, or a motion\r\n    /// path along which a referenced element is animated.\r\n    member _.path (path: string) = mk \"path\" path\r\n    /// The part global attribute contains a space-separated list of the part names of the element.\r\n    /// Part names allows CSS to select and style specific elements in a shadow tree\r\n    member _.part(value: string) = mk \"part\" value\r\n    /// The part global attribute contains a space-separated list of the part names of the element.\r\n    /// Part names allows CSS to select and style specific elements in a shadow tree\r\n    member _.part(values: #seq<string>) = mk \"part\" (String.concat \" \" values)\r\n    /// Specifies a total length for the path, in user units.\r\n    ///\r\n    /// This value is then used to calibrate the browser's distance calculations with those of the\r\n    /// author, by scaling all distance computations using the ratio pathLength/(computed value of\r\n    /// path length).\r\n    ///\r\n    /// This can affect the actual rendered lengths of paths; including text paths, animation paths,\r\n    /// and various stroke operations. Basically, all computations that require the length of the path.\r\n    member _.pathLength (value: int) = mk \"pathLength\" (Util.asString value)\r\n\r\n    /// Sets the input field allowed input.\r\n    ///\r\n    /// This attribute only applies when the value of the type attribute is text, search, tel, url or email.\r\n    member _.pattern (value: string) = mk \"pattern\" value\r\n\r\n    /// Defines a list of transform definitions that are applied to a pattern tile.\r\n    member _.patternTransform (transform: ITransformProperty) =\r\n        mk \"patternTransform\" (Util.asString transform)\r\n    /// Defines a list of transform definitions that are applied to a pattern tile.\r\n    member _.patternTransform (transforms: seq<ITransformProperty>) =\r\n        mk \"patternTransform\" (transforms |> Seq.map Util.asString |> String.concat \" \")\r\n\r\n    /// Provides a hint to the user of what can be entered in the field.\r\n    member _.placeholder (value: string) = mk \"placeholder\" value\r\n\r\n    /// Indicating that the video is to be played \"inline\", that is within the element's playback area.\r\n    ///\r\n    /// Note that the absence of this attribute does not imply that the video will always be played in fullscreen.\r\n    member _.playsInline (value: bool) = mkBool \"playsinline\" value\r\n\r\n    /// Contains a space-separated list of URLs to which, when the hyperlink is followed,\r\n    /// POST requests with the body PING will be sent by the browser (in the background).\r\n    ///\r\n    /// Typically used for tracking.\r\n    member _.ping (value: string) = mk \"ping\" value\r\n    /// Contains a space-separated list of URLs to which, when the hyperlink is followed,\r\n    /// POST requests with the body PING will be sent by the browser (in the background).\r\n    ///\r\n    /// Typically used for tracking.\r\n    member _.ping (urls: #seq<string>) = mk \"ping\" (urls |> String.concat \" \")\r\n\r\n    // /// Defines a list of points.\r\n    // ///\r\n    // /// Each point is defined by a pair of numbers representing a X and a Y coordinate in\r\n    // /// the user coordinate system.\r\n    // member _.points (coordinates: seq<float * float>) =\r\n    //     PropHelpers.createPointsFloat(coordinates)\r\n    //     |> h.MakeAttr(\"points\")\r\n    // /// Defines a list of points.\r\n    // ///\r\n    // /// Each point is defined by a pair of numbers representing a X and a Y coordinate in\r\n    // /// the user coordinate system.\r\n    // member _.points (coordinates: seq<int * int>) =\r\n    //     PropHelpers.createPointsInt(coordinates)\r\n    //     |> h.MakeAttr(\"points\")\r\n\r\n    /// Defines a list of points.\r\n    ///\r\n    /// Each point is defined by a pair of numbers representing a X and a Y coordinate in\r\n    /// the user coordinate system.\r\n    member _.points (coordinates: string) = mk \"points\" coordinates\r\n\r\n    /// Represents the x location in the coordinate system established by attribute primitiveUnits\r\n    /// on the <filter> element of the point at which the light source is pointing.\r\n    member _.pointsAtX (value: float) = mk \"pointsAtX\" (Util.asString value)\r\n    /// Represents the x location in the coordinate system established by attribute primitiveUnits\r\n    /// on the <filter> element of the point at which the light source is pointing.\r\n    member _.pointsAtX (value: int) = mk \"pointsAtX\" (Util.asString value)\r\n\r\n    /// Represents the y location in the coordinate system established by attribute primitiveUnits\r\n    /// on the <filter> element of the point at which the light source is pointing.\r\n    member _.pointsAtY (value: float) = mk \"pointsAtY\" (Util.asString value)\r\n    /// Represents the y location in the coordinate system established by attribute primitiveUnits\r\n    /// on the <filter> element of the point at which the light source is pointing.\r\n    member _.pointsAtY (value: int) = mk \"pointsAtY\" (Util.asString value)\r\n\r\n    /// Represents the y location in the coordinate system established by attribute primitiveUnits\r\n    /// on the <filter> element of the point at which the light source is pointing, assuming that,\r\n    /// in the initial local coordinate system, the positive z-axis comes out towards the person\r\n    /// viewing the content and assuming that one unit along the z-axis equals one unit in x and y.\r\n    member _.pointsAtZ (value: float) = mk \"pointsAtZ\" (Util.asString value)\r\n    /// Represents the y location in the coordinate system established by attribute primitiveUnits\r\n    /// on the <filter> element of the point at which the light source is pointing, assuming that,\r\n    /// in the initial local coordinate system, the positive z-axis comes out towards the person\r\n    /// viewing the content and assuming that one unit along the z-axis equals one unit in x and y.\r\n    member _.pointsAtZ (value: int) = mk \"pointsAtZ\" (Util.asString value)\r\n\r\n    /// Indicates how a <feConvolveMatrix> element handles alpha transparency.\r\n    member _.preserveAlpha (value: bool) = mkBool \"preserveAlpha\" value\r\n\r\n    /// A URL for an image to be shown while the video is downloading. If this attribute isn't specified, nothing\r\n    /// is displayed until the first frame is available, then the first frame is shown as the poster frame.\r\n    member _.poster (value: string) = mk \"poster\" value\r\n\r\n    /// SVG attribute to define the radius of a circle.\r\n    member _.r (value: ICssUnit) = mk \"r\" (Util.asString value)\r\n    /// SVG attribute to define the radius of a circle.\r\n    member _.r (value: int) = mk \"r\" (Util.asString value)\r\n\r\n    /// Represents the radius (or radii) for the operation on a given <feMorphology> filter primitive.\r\n    member _.radius (value: float) = mk \"radius\" (Util.asString value)\r\n    /// Represents the radius (or radii) for the operation on a given <feMorphology> filter primitive.\r\n    member _.radius (value: int) = mk \"radius\" (Util.asString value)\r\n    /// Represents the radius (or radii) for the operation on a given <feMorphology> filter primitive.\r\n    member _.radius (xRadius: float, yRadius: float) = mk \"radius\" (Util.asString xRadius  + \",\" + Util.asString yRadius)\r\n    /// Represents the radius (or radii) for the operation on a given <feMorphology> filter primitive.\r\n    member _.radius (xRadius: int, yRadius: int) = mk \"radius\" (Util.asString xRadius  + \",\" + Util.asString yRadius)\r\n\r\n    /// Indicates whether the element can be edited.\r\n    member _.readOnly (value: bool) = mkBool \"readOnly\" value\r\n\r\n    // /// Used to reference a DOM element or class component from within a parent component.\r\n    // member _.ref (handler: Element -> unit) = mk \"ref\" handler\r\n    // /// Used to reference a DOM element or class component from within a parent component.\r\n    // member _.ref (ref: IRefValue<#HTMLElement option>) = mk \"ref\" ref\r\n\r\n    /// For anchors containing the href attribute, this attribute specifies the relationship\r\n    /// of the target object to the link object. The value is a space-separated list of link\r\n    /// types values. The values and their semantics will be registered by some authority that\r\n    /// might have meaning to the document author. The default relationship, if no other is\r\n    /// given, is void.\r\n    ///\r\n    /// Use this attribute only if the href attribute is present.\r\n    member _.rel (value: string) = mk \"rel\" value\r\n\r\n    /// Indicates whether this element is required to fill out or not.\r\n    member _.required (value: bool) = mkBool \"required\" value\r\n\r\n    /// Defines the assigned name for this filter primitive.\r\n    ///\r\n    /// If supplied, then graphics that result from processing this filter primitive can be\r\n    /// referenced by an in attribute on a subsequent filter primitive within the same\r\n    /// <filter> element.\r\n    ///\r\n    /// If no value is provided, the output will only be available for re-use as the implicit\r\n    /// input into the next filter primitive if that filter primitive provides no value for\r\n    /// its in attribute.\r\n    member _.result (value: string) = mk \"result\" value\r\n\r\n    /// Sets the aria role\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles\r\n    member _.role ([<System.ParamArray>] roles: string[]) = mk \"role\" (String.concat \" \" roles)\r\n\r\n    /// Defines the number of rows in a text area.\r\n    member _.rows (value: int) = mk \"rows\" (Util.asString value)\r\n\r\n    /// Defines the number of rows a table cell should span over.\r\n    member _.rowSpan (value: int) = mk \"rowspan\" (Util.asString value)\r\n\r\n    /// The SVG rx attribute defines a radius on the x-axis.\r\n    ///\r\n    /// Two elements are using this attribute: <ellipse>, and <rect>\r\n    member _.rx (value: ICssUnit) = mk \"rx\" (Util.asString value)\r\n    /// The SVG rx attribute defines a radius on the x-axis.\r\n    ///\r\n    /// Two elements are using this attribute: <ellipse>, and <rect>\r\n    member _.rx (value: int) = mk \"rx\" (Util.asString value)\r\n\r\n    /// The SVG ry attribute defines a radius on the y-axis.\r\n    ///\r\n    /// Two elements are using this attribute: <ellipse>, and <rect>\r\n    member _.ry (value: ICssUnit) = mk \"ry\" (Util.asString value)\r\n    /// The SVG ry attribute defines a radius on the y-axis.\r\n    ///\r\n    /// Two elements are using this attribute: <ellipse>, and <rect>\r\n    member _.ry (value: int) = mk \"ry\" (Util.asString value)\r\n\r\n    /// Applies extra restrictions to the content in the frame.\r\n    ///\r\n    /// The value of the attribute can either be empty to apply all restrictions,\r\n    /// or space-separated tokens to lift particular restrictions\r\n    member _.sandbox (values: #seq<string>) = mk \"sandbox\" (values |> String.concat \" \")\r\n\r\n    /// Defines the displacement scale factor to be used on a <feDisplacementMap> filter primitive.\r\n    ///\r\n    /// The amount is expressed in the coordinate system established by the primitiveUnits attribute\r\n    /// on the <filter> element.\r\n    member _.scale (value: float) = mk \"scale\" (Util.asString value)\r\n    /// Defines the displacement scale factor to be used on a <feDisplacementMap> filter primitive.\r\n    ///\r\n    /// The amount is expressed in the coordinate system established by the primitiveUnits attribute\r\n    /// on the <filter> element.\r\n    member _.scale (value: int) = mk \"scale\" (Util.asString value)\r\n\r\n    /// Represents the starting number for the pseudo random number generator of the <feTurbulence>\r\n    /// filter primitive.\r\n    member _.seed (value: float) = mk \"seed\" (Util.asString value)\r\n    /// Represents the starting number for the pseudo random number generator of the <feTurbulence>\r\n    /// filter primitive.\r\n    member _.seed (value: int) = mk \"seed\" (Util.asString value)\r\n\r\n    /// Defines a value which will be selected on page load.\r\n    member _.selected (value: bool) = mkBool \"selected\" value\r\n\r\n    /// Sets the beginning index of the selected text.\r\n    ///\r\n    /// When nothing is selected, this returns the position of the text input cursor (caret) inside of the <input> element.\r\n    member _.selectionStart (value: int) = mk \"selectionStart\" (Util.asString value)\r\n\r\n    /// Sets the end index of the selected text.\r\n    ///\r\n    /// When there's no selection, this returns the offset of the character immediately following the current text input cursor position.\r\n    member _.selectionEnd (value: int) = mk \"selectionStart\" (Util.asString value)\r\n\r\n    /// Sets the *visual* size of the control.\r\n    ///\r\n    /// The value is in pixels unless the value of type is text or password, in which case, it is the number of characters.\r\n    ///\r\n    /// This attribute only applies when type is set to text, search, tel, url, email, or password.\r\n    member _.size (value: int) = mk \"size\" (Util.asString value)\r\n\r\n    /// Defines the sizes of the icons for visual media contained in the resource.\r\n    /// It must be present only if the rel contains a value of icon or a non-standard\r\n    /// type such as Apple's apple-touch-icon.\r\n    ///\r\n    /// It may have the following values:\r\n    ///\r\n    /// `any`, meaning that the icon can be scaled to any size as it is in a vector\r\n    /// format, like image/svg+xml.\r\n    ///\r\n    /// A white-space separated list of sizes, each in the format `<width in pixels>x<height in pixels>`\r\n    /// or `<width in pixels>X<height in pixels>`. Each of these sizes must be contained in the resource.\r\n    member _.sizes (value: string) = mk \"sizes\" value\r\n\r\n    /// This attribute contains a positive integer indicating the number of consecutive\r\n    /// columns the <col> element spans. If not present, its default value is 1.\r\n    member _.spam (value: int) = mk \"span\" (Util.asString value)\r\n\r\n    /// Defines whether the element may be checked for spelling errors.\r\n    member _.spellcheck (value: bool) = mkBool \"spellcheck\" value\r\n\r\n    /// Controls the ratio of reflection of the specular lighting.\r\n    ///\r\n    /// It represents the ks value in the Phong lighting model. The bigger the value the stronger the reflection.\r\n    member _.specularConstant (value: float) = mk \"specularConstant\" (Util.asString value)\r\n    /// Controls the ratio of reflection of the specular lighting.\r\n    ///\r\n    /// It represents the ks value in the Phong lighting model. The bigger the value the stronger the reflection.\r\n    member _.specularConstant (value: int) = mk \"specularConstant\" (Util.asString value)\r\n\r\n    /// For <feSpecularLighting>, specularExponent defines the exponent value for the specular term.\r\n    ///\r\n    /// For <feSpotLight>, specularExponent defines the exponent value controlling the focus for the light source.\r\n    member _.specularExponent (value: float) = mk \"specularExponent\" (Util.asString value)\r\n    /// For <feSpecularLighting>, specularExponent defines the exponent value for the specular term.\r\n    ///\r\n    /// For <feSpotLight>, specularExponent defines the exponent value controlling the focus for the light source.\r\n    member _.specularExponent (value: int) = mk \"specularExponent\" (Util.asString value)\r\n\r\n    /// The URL of the embeddable content.\r\n    member _.src (value: string) = mk \"src\" value\r\n\r\n    /// Language of the track text data. It must be a valid BCP 47 language tag.\r\n    ///\r\n    /// If the kind attribute is set to subtitles, then srclang must be defined.\r\n    member _.srcLang (value: string) = mk \"srclang\" value\r\n\r\n    /// One or more responsive image candidates.\r\n    member _.srcset (value: string) = mk \"srcset\" value\r\n\r\n    /// Defines the first number if other than 1.\r\n    member _.start (value: string) = mk \"start\" value\r\n\r\n    /// Defines the standard deviation for the blur operation.\r\n    member _.stdDeviation (value: float) = mk \"stdDeviation\" (Util.asString value)\r\n    /// Defines the standard deviation for the blur operation.\r\n    member _.stdDeviation (value: int) = mk \"stdDeviation\" (Util.asString value)\r\n    /// Defines the standard deviation for the blur operation.\r\n    member _.stdDeviation (xAxis: float, yAxis: float) = mk \"stdDeviation\" (Util.asString xAxis  + \",\" + Util.asString yAxis)\r\n    /// Defines the standard deviation for the blur operation.\r\n    member _.stdDeviation (xAxis: int, yAxis: int) = mk \"stdDeviation\" (Util.asString xAxis  + \",\" + Util.asString yAxis)\r\n\r\n    /// Indicates the stepping interval.\r\n    member _.step (value: float) = mk \"step\" (Util.asString value)\r\n    /// Indicates the stepping interval.\r\n    member _.step (value: int) = mk \"step\" (Util.asString value)\r\n    /// The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the slot element whose name attribute's value matches that slot attribute's value.\r\n    member _.slot(value: string) = mk \"slot\" value\r\n    /// SVG attribute to indicate what color to use at a gradient stop.\r\n    member _.stopColor (value: string) = mk \"stop-color\" value\r\n\r\n    /// SVG attribute to define the opacity of a given color gradient stop.\r\n    member _.stopOpacity (value: float) = mk \"stop-opacity\" (Util.asString value)\r\n    /// SVG attribute to define the opacity of a given color gradient stop.\r\n    member _.stopOpacity (value: int) = mk \"stop-opacity\" (Util.asString value)\r\n\r\n    /// Represents the ideal vertical position of the strikethrough.\r\n    ///\r\n    /// The strikethrough position is expressed in the font's coordinate system.\r\n    member _.strikethroughPosition (value: float) = mk \"strikethrough-position\" (Util.asString value)\r\n    /// Represents the ideal vertical position of the strikethrough.\r\n    ///\r\n    /// The strikethrough position is expressed in the font's coordinate system.\r\n    member _.strikethroughPosition (value: int) = mk \"strikethrough-position\" (Util.asString value)\r\n\r\n    /// Represents the ideal vertical position of the strikethrough.\r\n    ///\r\n    /// The strikethrough position is expressed in the font's coordinate system.\r\n    member _.strikethroughThickness (value: float) = mk \"strikethrough-thickness\" (Util.asString value)\r\n    /// Represents the ideal thickness of the strikethrough.\r\n    ///\r\n    /// The strikethrough thickness is expressed in the font's coordinate system.\r\n    member _.strikethroughThickness (value: int) = mk \"strikethrough-thickness\" (Util.asString value)\r\n\r\n    /// SVG attribute to define the color (or any SVG paint servers like gradients or patterns) used to paint the outline of the shape.\r\n    member _.stroke (color: string) = mk \"stroke\" color\r\n\r\n    /// SVG attribute to define the width of the stroke to be applied to the shape.\r\n    member _.strokeWidth (value: ICssUnit) = mk \"stroke-width\" (Util.asString value)\r\n    /// SVG attribute to define the width of the stroke to be applied to the shape.\r\n    member _.strokeWidth (value: int) = mk \"stroke-width\" (Util.asString value + \"px\")\r\n\r\n    member _.style (css: string) = mk \"style\" css\r\n    // member _.style (properties: #IStyleAttribute list) = mk \"style\" (createObj !!properties)\r\n\r\n    /// Represents the height of the surface for a light filter primitive.\r\n    member _.surfaceScale (value: float) = mk \"surfaceScale\" (Util.asString value)\r\n    /// Represents the height of the surface for a light filter primitive.\r\n    member _.surfaceScale (value: int) = mk \"surfaceScale\" (Util.asString value)\r\n\r\n    /// Represents a list of supported language tags.\r\n    ///\r\n    /// This list is matched against the language defined in the user preferences.\r\n    member _.systemLanguage (value: string) = mk \"systemLanguage\" value\r\n\r\n    /// The `tabindex` global attribute indicates that its element can be focused,\r\n    /// and where it participates in sequential keyboard navigation (usually with the Tab key, hence the name).\r\n    member _.tabIndex (index: int) = mk \"tabindex\" (Util.asString index)\r\n\r\n    /// Controls browser behavior when opening a link.\r\n    member _.target (frameName: string) = mk \"target\" frameName\r\n\r\n    /// Determines the positioning in horizontal direction of the convolution matrix relative to a\r\n    /// given target pixel in the input image.\r\n    ///\r\n    /// The leftmost column of the matrix is column number zero.\r\n    ///\r\n    /// The value must be such that:\r\n    ///\r\n    /// 0 <= targetX < orderX.\r\n    member _.targetX (index: int) = mk \"targetX\" (Util.asString index)\r\n\r\n    /// Determines the positioning in vertical direction of the convolution matrix relative to a\r\n    /// given target pixel in the input image.\r\n    ///\r\n    /// The topmost row of the matrix is row number zero.\r\n    ///\r\n    /// The value must be such that:\r\n    ///\r\n    /// 0 <= targetY < orderY.\r\n    member _.targetY (index: int) = mk \"targetY\" (Util.asString index)\r\n\r\n    /// A shorthand for using custom(\"data-testid\", value). Useful for referencing elements when testing code.\r\n    member _.testId(value: string) = mk \"data-testid\" value\r\n\r\n    // /// Defines the text content of the element. Alias for `children [ Html.text (sprintf ...) ]`\r\n    // member _.textf fmt = Printf.kprintf prop.text fmt\r\n\r\n    /// Specifies the width of the space into which the text will draw.\r\n    ///\r\n    /// The user agent will ensure that the text does not extend farther than that distance, using the method or methods\r\n    /// specified by the lengthAdjust attribute.\r\n    member _.textLength (value: ICssUnit) = mk \"textLength\" (Util.asString value)\r\n    /// Specifies the width of the space into which the text will draw.\r\n    ///\r\n    /// The user agent will ensure that the text does not extend farther than that distance, using the method or methods\r\n    /// specified by the lengthAdjust attribute.\r\n    member _.textLength (value: int) = mk \"textLength\" (Util.asString value)\r\n\r\n    /// The title global attribute contains text representing advisory information related to the element it belongs to.\r\n    member _.title (value: string) = mk \"title\" value\r\n\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.to' (value: float) = mk \"to\" (Util.asString value)\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.to' (values: seq<float>) = mk \"to\" (values |> Seq.map Util.asString |> String.concat \" \")\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.to' (value: int) = mk \"to\" (Util.asString value)\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.to' (values: seq<int>) = mk \"to\" (values |> Seq.map Util.asString |> String.concat \" \")\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.to' (value: string) = mk \"to\" value\r\n    /// Indicates the initial value of the attribute that will be modified during the animation.\r\n    ///\r\n    /// When used with the `to` attribute, the animation will change the modified attribute from\r\n    /// the from value to the to value.\r\n    ///\r\n    /// When used with the `by` attribute, the animation will change the attribute relatively\r\n    /// from the from value by the value specified in by.\r\n    member _.to' (values: seq<string>) = mk \"to\" (values |> String.concat \" \")\r\n\r\n    /// Defines a list of transform definitions that are applied to an element and the element's children.\r\n    member _.transform (transform: ITransformProperty) =\r\n        mk \"transform\" (Util.asString transform)\r\n    /// Defines a list of transform definitions that are applied to an element and the element's children.\r\n    member _.transform (transforms: seq<ITransformProperty>) =\r\n        let unitList = [ \"px\" ; \"deg\" ]\r\n        let removeUnits (s : string) =\r\n            List.fold (fun (ins:string) toReplace -> ins.Replace(toReplace,\"\")) s unitList\r\n        mk \"transform\" (transforms |> Seq.map Util.asString |> Seq.map removeUnits |> String.concat \" \")\r\n\r\n    /// Sets the `type` attribute for the element.\r\n    member _.type' (value: string) = mk \"type\" value\r\n\r\n    /// Represents the ideal vertical position of the underline.\r\n    ///\r\n    /// The underline position is expressed in the font's coordinate system.\r\n    member _.underlinePosition (value: float) = mk \"underline-position\" (Util.asString value)\r\n    /// Represents the ideal vertical position of the underline.\r\n    ///\r\n    /// The underline position is expressed in the font's coordinate system.\r\n    member _.underlinePosition (value: int) = mk \"underline-position\" (Util.asString value)\r\n\r\n    /// Represents the ideal thickness of the underline.\r\n    ///\r\n    /// The underline thickness is expressed in the font's coordinate system.\r\n    member _.underlineThickness (value: float) = mk \"underline-thickness\" (Util.asString value)\r\n    /// Represents the ideal thickness of the underline.\r\n    ///\r\n    /// The underline thickness is expressed in the font's coordinate system.\r\n    member _.underlineThickness (value: int) = mk \"underline-thickness\" (Util.asString value)\r\n\r\n    /// A hash-name reference to a <map> element; that is a '#' followed by the value of a name of a map element.\r\n    member _.usemap (value: string) = mk \"usemap\" value\r\n\r\n    member _.value (value: string) = mk \"value\" value\r\n\r\n    /// The values attribute has different meanings, depending upon the context where itʼs used,\r\n    /// either it defines a sequence of values used over the course of an animation, or itʼs a\r\n    /// list of numbers for a color matrix, which is interpreted differently depending on the\r\n    /// type of color change to be performed. See: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/values\r\n    member _.values (value: string) = mk \"values\" value\r\n\r\n    /// Specifies the width of elements listed here. For all other elements, use the CSS height property.\r\n    ///\r\n    /// HTML: <canvas>, <embed>, <iframe>, <img>, <input>, <object>, <video>\r\n    ///\r\n    /// SVG: <feBlend>, <feColorMatrix>, <feComponentTransfer>, <feComposite>, <feConvolveMatrix>,\r\n    /// <feDiffuseLighting>, <feDisplacementMap>, <feDropShadow>, <feFlood>, <feGaussianBlur>, <feImage>,\r\n    /// <feMerge>, <feMorphology>, <feOffset>, <feSpecularLighting>, <feTile>, <feTurbulence>, <filter>,\r\n    /// <mask>, <pattern>\r\n    member _.width (value: ICssUnit) = mk \"width\" (Util.asString value)\r\n    /// Specifies the width of elements listed here. For all other elements, use the CSS height property.\r\n    ///\r\n    /// HTML: <canvas>, <embed>, <iframe>, <img>, <input>, <object>, <video>\r\n    ///\r\n    /// SVG: <feBlend>, <feColorMatrix>, <feComponentTransfer>, <feComposite>, <feConvolveMatrix>,\r\n    /// <feDiffuseLighting>, <feDisplacementMap>, <feDropShadow>, <feFlood>, <feGaussianBlur>, <feImage>,\r\n    /// <feMerge>, <feMorphology>, <feOffset>, <feSpecularLighting>, <feTile>, <feTurbulence>, <filter>,\r\n    /// <mask>, <pattern>\r\n    member _.width (value: int) = mk \"width\" (Util.asString value)\r\n\r\n    /// SVG attribute to define a x-axis coordinate in the user coordinate system.\r\n    member _.x (value: ICssUnit) = mk \"x\" (Util.asString value)\r\n    /// SVG attribute to define a x-axis coordinate in the user coordinate system.\r\n    member _.x (value: int) = mk \"x\" (Util.asString value)\r\n\r\n    /// The x1 attribute is used to specify the first x-coordinate for drawing an SVG element that\r\n    /// requires more than one coordinate. Elements that only need one coordinate use the x attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.x1 (value: ICssUnit) = mk \"x1\" (Util.asString value)\r\n    /// The x1 attribute is used to specify the first x-coordinate for drawing an SVG element that\r\n    /// requires more than one coordinate. Elements that only need one coordinate use the x attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.x1 (value: int) = mk \"x1\" (Util.asString value)\r\n\r\n    /// The x2 attribute is used to specify the second x-coordinate for drawing an SVG element that requires\r\n    /// more than one coordinate. Elements that only need one coordinate use the x attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.x2 (value: ICssUnit) = mk \"x2\" (Util.asString value)\r\n    /// The x2 attribute is used to specify the second x-coordinate for drawing an SVG element that requires\r\n    /// more than one coordinate. Elements that only need one coordinate use the x attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.x2 (value: int) = mk \"x2\" (Util.asString value)\r\n\r\n    /// Specifies the XML Namespace of the document.\r\n    ///\r\n    /// Default value is \"http://www.w3.org/1999/xhtml\".\r\n    ///\r\n    /// This is required in documents parsed with XML parsers, and optional in text/html documents.\r\n    member _.xmlns (value: string) = mk \"xmlns\" value\r\n\r\n    /// SVG attribute to define a y-axis coordinate in the user coordinate system.\r\n    member _.y (value: ICssUnit) = mk \"y\" (Util.asString value)\r\n    /// SVG attribute to define a y-axis coordinate in the user coordinate system.\r\n    member _.y (value: int) = mk \"y\" (Util.asString value)\r\n\r\n    /// The y1 attribute is used to specify the first y-coordinate for drawing an SVG element that requires\r\n    /// more than one coordinate. Elements that only need one coordinate use the y attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.y1 (value: ICssUnit) = mk \"y1\" (Util.asString value)\r\n    /// The y1 attribute is used to specify the first y-coordinate for drawing an SVG element that requires\r\n    /// more than one coordinate. Elements that only need one coordinate use the y attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.y1 (value: int) = mk \"y1\" (Util.asString value)\r\n\r\n    /// The y2 attribute is used to specify the second y-coordinate for drawing an SVG element that requires\r\n    /// more than one coordinate. Elements that only need one coordinate use the y attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.y2 (value: ICssUnit) = mk \"y2\" (Util.asString value)\r\n    /// The y2 attribute is used to specify the second y-coordinate for drawing an SVG element that requires\r\n    /// more than one coordinate. Elements that only need one coordinate use the y attribute instead.\r\n    ///\r\n    /// Two elements are using this attribute: <line>, and <linearGradient>\r\n    member _.y2 (value: int) = mk \"y2\" (Util.asString value)\r\n\r\n    /// Defines the location along the z-axis for a light source in the coordinate system established by the\r\n    /// primitiveUnits attribute on the <filter> element, assuming that, in the initial coordinate system,\r\n    /// the positive z-axis comes out towards the person viewing the content and assuming that one unit along\r\n    /// the z-axis equals one unit in x and y.\r\n    member _.z (value: ICssUnit) = mk \"z\" (Util.asString value)\r\n    /// Defines the location along the z-axis for a light source in the coordinate system established by the\r\n    /// primitiveUnits attribute on the <filter> element, assuming that, in the initial coordinate system,\r\n    /// the positive z-axis comes out towards the person viewing the content and assuming that one unit along\r\n    /// the z-axis equals one unit in x and y.\r\n    member _.z (value: int) = mk \"z\" (Util.asString value)\r\n\r\n    /// Specifies that repeat iterations are not cumulative.\r\n    member _.accumulateNone = mk \"accumulate\" \"none\"\r\n    /// Specifies that each repeat iteration after the first builds upon\r\n    /// the last value of the previous iteration.\r\n    member _.accumulateSum = mk \"accumulate\" \"sum\"\r\n\r\n    /// Specifies that the animation will override the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.additiveReplace = mk \"additive\" \"replace\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.additiveSum = mk \"additive\" \"sum\"\r\n\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineAlphabetic = mk \"alignment-baseline\" \"alphabetic\"\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineBaseline = mk \"alignment-baseline\" \"baseline\"\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineBottom = mk \"alignment-baseline\" \"bottom\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineCenter = mk \"alignment-baseline\" \"center\"\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineCentral = mk \"alignment-baseline\" \"central\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineHanging = mk \"alignment-baseline\" \"hanging\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineIdeographic = mk \"alignment-baseline\" \"ideographic\"\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineMathematical = mk \"alignment-baseline\" \"mathematical\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineMiddle = mk \"alignment-baseline\" \"middle\"\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineTextAfterEdge = mk \"alignment-baseline\" \"text-after-edge\"\r\n    /// Uses the dominant baseline choice of the parent. Matches the box’s\r\n    /// corresponding baseline to that of its parent.\r\n    member _.alignmentBaselineTextBeforeEdge = mk \"alignment-baseline\" \"text-before-edge\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineTextBottom = mk \"alignment-baseline\" \"text-bottom\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineTextTop = mk \"alignment-baseline\" \"text-top\"\r\n    /// Specifies that the animation will add to the underlying value of\r\n    /// the attribute and other lower priority animations.\r\n    member _.alignmentBaselineTop = mk \"alignment-baseline\" \"top\"\r\n\r\n    /// Controls whether the current document is allowed to gather information about the acceleration of\r\n    /// the device through the Accelerometer interface.\r\n    member _.allowAccelerometer = mk \"allow\" \"accelerometer\"\r\n    /// Controls whether the current document is allowed to gather information about the amount of light\r\n    /// in the environment around the device through the AmbientLightSensor interface.\r\n    member _.allowAmbientLightSensor = mk \"allow\" \"ambient-light-sensor\"\r\n    /// Controls whether the current document is allowed to autoplay media requested through the\r\n    /// HTMLMediaElement interface.\r\n    ///\r\n    /// When this policy is disabled and there were no user gestures, the Promise returned by\r\n    /// HTMLMediaElement.play() will reject with a DOMException. The autoplay attribute on <audio> and\r\n    /// <video> elements will be ignored.\r\n    member _.allowAutoplay = mk \"allow\" \"autoplay\"\r\n    /// Controls whether the use of the Battery Status API is allowed.\r\n    ///\r\n    /// When this policy is disabled, the  Promise returned by Navigator.getBattery() will reject with\r\n    /// a NotAllowedError DOMException.\r\n    member _.allowBattery = mk \"allow\" \"battery\"\r\n    /// Controls whether the current document is allowed to use video input devices.\r\n    ///\r\n    /// When this policy is disabled, the Promise returned by getUserMedia() will reject with a\r\n    /// NotAllowedError DOMException.\r\n    member _.allowCamera = mk \"allow\" \"camera\"\r\n    /// Controls whether or not the current document is permitted to use the getDisplayMedia() method to\r\n    /// capture screen contents.\r\n    ///\r\n    /// When this policy is disabled, the promise returned by getDisplayMedia() will reject with a\r\n    /// NotAllowedError if permission is not obtained to capture the display's contents.\r\n    member _.allowDisplayCapture = mk \"allow\" \"display-capture\"\r\n    /// Controls whether the current document is allowed to set document.domain.\r\n    ///\r\n    /// When this policy is disabled, attempting to set document.domain will fail and cause a SecurityError\r\n    /// DOMException to be be thrown.\r\n    member _.allowDocumentDomain = mk \"allow\" \"document-domain\"\r\n    /// Controls whether the current document is allowed to use the Encrypted Media Extensions API (EME).\r\n    ///\r\n    /// When this policy is disabled, the Promise returned by Navigator.requestMediaKeySystemAccess() will\r\n    /// reject with a DOMException.\r\n    member _.allowEncryptedMedia = mk \"allow\" \"encrypted-media\"\r\n    /// Controls whether tasks should execute in frames while they're not being rendered (e.g. if an iframe\r\n    /// is hidden or display: none).\r\n    member _.allowExecutionWhileNotRendered = mk \"allow\" \"execution-while-not-rendered\"\r\n    /// Controls whether tasks should execute in frames while they're outside of the visible viewport.\r\n    member _.allowExecutionWhileOutOfViewport = mk \"allow\" \"execution-while-out-of-viewport\"\r\n    /// Controls whether the current document is allowed to use Element.requestFullScreen().\r\n    ///\r\n    /// When this policy is disabled, the returned Promise rejects with a TypeError DOMException.\r\n    member _.allowFullscreen = mk \"allow\" \"fullscreen\"\r\n    /// Controls whether the current document is allowed to use the Geolocation Interface.\r\n    ///\r\n    /// When this policy is disabled, calls to getCurrentPosition() and watchPosition() will cause those\r\n    /// functions' callbacks to be invoked with a PositionError code of PERMISSION_DENIED.\r\n    member _.allowGeolocation = mk \"allow\" \"geolocation\"\r\n    /// Controls whether the current document is allowed to gather information about the orientation of the\r\n    /// device through the Gyroscope interface.\r\n    member _.allowGyroscope = mk \"allow\" \"gyroscope\"\r\n    /// Controls whether the current document is allowed to show layout animations.\r\n    member _.allowLayoutAnimations = mk \"allow\" \"layout-animations\"\r\n    /// Controls whether the current document is allowed to display images in legacy formats.\r\n    member _.allowLegacyImageFormats = mk \"allow\" \"legacy-image-formats\"\r\n    /// Controls whether the current document is allowed to gather information about the orientation of the\r\n    /// device through the Magnetometer interface.\r\n    member _.allowMagnetometer = mk \"allow\" \"magnetometer\"\r\n    /// Controls whether the current document is allowed to use audio input devices.\r\n    ///\r\n    /// When this policy is disabled, the Promise returned by MediaDevices.getUserMedia() will reject\r\n    /// with a NotAllowedError.\r\n    member _.allowMicrophone = mk \"allow\" \"microphone\"\r\n    /// Controls whether the current document is allowed to use the Web MIDI API.\r\n    ///\r\n    /// When this policy is disabled, the Promise returned by Navigator.requestMIDIAccess() will reject\r\n    /// with a DOMException.\r\n    member _.allowMidi = mk \"allow\" \"midi\"\r\n    /// Controls the availability of mechanisms that enables the page author to take control over the behavior\r\n    /// of spatial navigation, or to cancel it outright.\r\n    member _.allowNavigationOverride = mk \"allow\" \"navigation-override\"\r\n    /// Controls whether the current document is allowed to download and display large images.\r\n    member _.allowOversizedImages = mk \"allow\" \"oversized-images\"\r\n    /// Controls whether the current document is allowed to use the Payment Request API.\r\n    ///\r\n    /// When this policy is enabled, the PaymentRequest() constructor will throw a SecurityError DOMException.\r\n    member _.allowPayment = mk \"allow\" \"payment\"\r\n    /// Controls whether the current document is allowed to play a video in a Picture-in-Picture mode via\r\n    /// the corresponding API.\r\n    member _.allowPictureInPicture = mk \"allow\" \"picture-in-picture\"\r\n    /// Controls whether the current document is allowed to use the Web Authentication API to create, store,\r\n    /// and retreive public-key credentials.\r\n    member _.allowPublickeyCredentials = mk \"allow\" \"publickey-credentials\"\r\n    /// Controls whether the current document is allowed to make synchronous XMLHttpRequest requests.\r\n    member _.allowSyncXhr = mk \"allow\" \"sync-xhr\"\r\n    /// Controls whether the current document is allowed to use the WebUSB API.\r\n    member _.allowUsb = mk \"allow\" \"usb\"\r\n    /// Controls whether the current document is allowed to use Wake Lock API to indicate that\r\n    /// device should not enter power-saving mode.\r\n    member _.allowWakeLock = mk \"allow\" \"wake-lock\"\r\n    /// Controls whether or not the current document is allowed to use the WebXR Device API to interact\r\n    /// with a WebXR session.\r\n    member _.allowXrSpatialTracking = mk \"allow\" \"xr-spatial-tracking\"\r\n\r\n    /// A list of choices appears and the currently selected suggestion also\r\n    /// appears inline.\r\n    member _.ariaAutocompleteBoth = mk \"aria-autocomplete\" \"both\"\r\n    /// The system provides text after the caret as a suggestion for how to\r\n    /// complete the field.\r\n    member _.ariaAutocompleteInlinedAfterCaret = mk \"aria-autocomplete\" \"inline\"\r\n    /// A list of choices appears from which the user can choose.\r\n    member _.ariaAutocompleteList = mk \"aria-autocomplete\" \"list\"\r\n    /// No input completion suggestions are provided.\r\n    member _.ariaAutocompleteNone = mk \"aria-autocomplete\" \"none\"\r\n\r\n    /// Indicates a mixed mode value for a tri-state checkbox or\r\n    /// `menuitemcheckbox`.\r\n    member _.ariaCheckedMixed = mk \"aria-checked\" \"mixed\"\r\n\r\n    /// A duplicate of the source object will be dropped into the target.\r\n    member _.ariaDropEffectCopy = mk \"aria-dropeffect\" \"copy\"\r\n    /// A function supported by the drop target is executed, using the drag\r\n    /// source as an input.\r\n    member _.ariaDropEffectExecute = mk \"aria-dropeffect\" \"execute\"\r\n    /// A reference or shortcut to the dragged object will be created in the\r\n    /// target object.\r\n    member _.ariaDropEffectLink = mk \"aria-dropeffect\" \"link\"\r\n    /// The source object will be removed from its current location and\r\n    /// dropped into the target.\r\n    member _.ariaDropEffectMove = mk \"aria-dropeffect\" \"move\"\r\n    /// No operation can be performed; effectively cancels the drag\r\n    /// operation if an attempt is made to drop on this object. Ignored if\r\n    /// combined with any other token value. e.g. 'none copy' is equivalent\r\n    /// to a 'copy' value.\r\n    member _.ariaDropEffectNone = mk \"aria-dropeffect\" \"none\"\r\n    /// There is a popup menu or dialog that allows the user to choose one\r\n    /// of the drag operations (copy, move, link, execute) and any other\r\n    /// drag functionality, such as cancel.\r\n    member _.ariaDropEffectPopup = mk \"aria-dropeffect\" \"popup\"\r\n\r\n    /// A grammatical error was detected.\r\n    member _.ariaInvalidGrammar = mk \"aria-invalid\" \"grammar\"\r\n    /// A spelling error was detected.\r\n    member _.ariaInvalidSpelling = mk \"aria-invalid\" \"spelling\"\r\n\r\n    /// Indicates that updates to the region have the highest priority and\r\n    /// should be presented the user immediately.\r\n    member _.ariaLiveAssertive = mk \"aria-live\" \"assertive\"\r\n    /// Indicates that updates to the region should not be presented to the\r\n    /// user unless the used is currently focused on that region.\r\n    member _.ariaLiveOff = mk \"aria-live\" \"off\"\r\n    /// Indicates that updates to the region should be presented at the next\r\n    /// graceful opportunity, such as at the end of speaking the current\r\n    /// sentence or when the user pauses typing.\r\n    member _.ariaLivePolite = mk \"aria-live\" \"polite\"\r\n\r\n    /// The element is oriented horizontally.\r\n    member _.ariaOrientationHorizontal = mk \"aria-orientation\" \"horizontal\"\r\n    /// The element is oriented vertically.\r\n    member _.ariaOrientationVertical = mk \"aria-orientation\" \"vertical\"\r\n\r\n    /// Indicates a mixed mode value for a tri-state toggle button.\r\n    member _.ariaPressedMixed = mk \"aria-pressed\" \"mixed\"\r\n\r\n    /// Element nodes are added to the DOM within the live region.\r\n    member _.ariaRelevantAdditions = mk \"aria-relevant\" \"additions\"\r\n    /// Equivalent to the combination of all values, \"additions removals\r\n    /// text\".\r\n    member _.ariaRelevantAll = mk \"aria-relevant\" \"all\"\r\n    /// Text or element nodes within the live region are removed from the\r\n    /// DOM.\r\n    member _.ariaRelevantRemovals = mk \"aria-relevant\" \"removals\"\r\n    /// Text is added to any DOM descendant nodes of the live region.\r\n    member _.ariaRelevantText = mk \"aria-relevant\" \"text\"\r\n\r\n    /// Items are sorted in ascending order by this column.\r\n    member _.ariaSortAscending = mk \"aria-sort\" \"ascending\"\r\n    /// Items are sorted in descending order by this column.\r\n    member _.ariaSortDescending = mk \"aria-sort\" \"descending\"\r\n    /// There is no defined sort applied to the column.\r\n    member _.ariaSortNone = mk \"aria-sort\" \"none\"\r\n    /// A sort algorithm other than ascending or descending has been\r\n    /// applied.\r\n    member _.ariaSortOther = mk \"aria-sort\" \"other\"\r\n\r\n    /// Applies to <audio> elements.\r\n    member _.asAudio = mk \"as\" \"audio\"\r\n    /// Applies to <iframe> and <frame> elements.\r\n    member _.asDocument = mk \"as\" \"document\"\r\n    /// Applies to <embed> elements.\r\n    member _.asEmbed = mk \"as\" \"embed\"\r\n    /// Applies to fetch and XHR.\r\n    ///\r\n    /// This value also requires <link> to contain the crossorigin attribute.\r\n    member _.asFetch = mk \"as\" \"fetch\"\r\n    /// Applies to CSS @font-face.\r\n    member _.asFont = mk \"as\" \"font\"\r\n    /// Applies to <img> and <picture> elements with srcset or imageset attributes,\r\n    /// SVG <image> elements, and CSS *-image rules.\r\n    member _.asImage = mk \"as\" \"image\"\r\n    /// Applies to <object> elements.\r\n    member _.asObject = mk \"as\" \"object\"\r\n    /// Applies to <script> elements, Worker importScripts.\r\n    member _.asScript = mk \"as\" \"script\"\r\n    /// Applies to <link rel=stylesheet> elements, and CSS @import.\r\n    member _.asStyle = mk \"as\" \"style\"\r\n    /// Applies to <track> elements.\r\n    member _.asTrack = mk \"as\" \"track\"\r\n    /// Applies to <video> elements.\r\n    member _.asVideo = mk \"as\" \"video\"\r\n    /// Applies to Worker and SharedWorker.\r\n    member _.asWorker = mk \"as\" \"worker\"\r\n\r\n    /// All letters should default to uppercase\r\n    member _.autoCapitalizeCharacters = mk \"autocapitalize\" \"characters\"\r\n    /// No autocapitalization is applied (all letters default to lowercase)\r\n    member _.autoCapitalizeOff = mk \"autocapitalize\" \"off\"\r\n    /// The first letter of each sentence defaults to a capital letter; all other letters default to lowercase\r\n    member _.autoCapitalizeOn' = mk \"autocapitalize\" \"on\"\r\n    /// The first letter of each word defaults to a capital letter; all other letters default to lowercase\r\n    member _.autoCapitalizeWords = mk \"autocapitalize\" \"words\"\r\n\r\n    /// Specifies that the animation function will jump from one value to the next\r\n    /// without any interpolation.\r\n    member _.calcModeDiscrete = mk \"calcMode\" \"discrete\"\r\n    /// Simple linear interpolation between values is used to calculate the animation\r\n    /// function. Except for <animateMotion>, this is the default value.\r\n    member _.calcModeLinear = mk \"calcMode\" \"linear\"\r\n    /// Defines interpolation to produce an even pace of change across the animation.\r\n    ///\r\n    /// This is only supported for values that define a linear numeric range, and for\r\n    /// which some notion of \"distance\" between points can be calculated (e.g. position,\r\n    /// width, height, etc.).\r\n    ///\r\n    /// If paced is specified, any keyTimes or keySplines will be ignored.\r\n    ///\r\n    /// For <animateMotion>, this is the default value.\r\n    member _.calcModePaced = mk \"calcMode\" \"paced\"\r\n    /// Interpolates from one value in the values list to the next according to a time\r\n    /// function defined by a cubic Bézier spline.\r\n    ///\r\n    /// The points of the spline are defined in the keyTimes attribute, and the control\r\n    /// points for each interval are defined in the keySplines attribute.\r\n    member _.calcModeSpline = mk \"calcMode\" \"spline\"\r\n\r\n    member _.charsetUtf8 = mk \"charset\" \"UTF-8\"\r\n\r\n    /// Indicates that all coordinates inside the <clipPath> element refer to the user\r\n    /// coordinate system as defined when the clipping path was created.\r\n    member _.clipPathUserSpaceOnUse = mk \"clip-path\" \"userSpaceOnUse\"\r\n    /// Indicates that all coordinates inside the <clipPath> element are relative to\r\n    /// the bounding box of the element the clipping path is applied to.\r\n    ///\r\n    /// It means that the origin of the coordinate system is the top left corner of the\r\n    /// object bounding box and the width and height of the object bounding box are\r\n    /// considered to have a length of 1 unit value.\r\n    member _.clipPathObjectBoundingBox = mk \"clip-path\" \"objectBoundingBox\"\r\n\r\n    /// Determines the \"insideness\" of a point in the shape by drawing a ray from that\r\n    /// point to infinity in any direction and counting the number of path segments\r\n    /// from the given shape that the ray crosses.\r\n    ///\r\n    /// If this number is odd, the point is inside; if even, the point is outside.\r\n    member _.clipRuleEvenodd = mk \"clip-rule\" \"evenodd\"\r\n    member _.clipRuleInheritFromParent = mk \"clip-rule\" \"inherit\"\r\n    /// Determines the \"insideness\" of a point in the shape by drawing a ray from that\r\n    /// point to infinity in any direction, and then examining the places where a\r\n    /// segment of the shape crosses the ray.\r\n    member _.clipRuleNonzero = mk \"clip-rule\" \"nonzero\"\r\n\r\n    /// Indicates that the user agent can choose either the sRGB or linearRGB spaces\r\n    /// for color interpolation. This option indicates that the author doesn't require\r\n    /// that color interpolation occur in a particular color space.\r\n    member _.colorInterpolationAuto = mk \"color-interpolation\" \"auto\"\r\n    /// Indicates that color interpolation should occur in the linearized RGB color\r\n    /// space as described in the sRGB specification.\r\n    member _.colorInterpolationLinearRGB = mk \"color-interpolation\" \"linearRGB\"\r\n    /// Indicates that color interpolation should occur in the sRGB color space.\r\n    member _.colorInterpolationSRGB = mk \"color-interpolation\" \"sRGB\"\r\n\r\n    /// Indicates that the user agent can choose either the sRGB or linearRGB spaces\r\n    /// for color interpolation. This option indicates that the author doesn't require\r\n    /// that color interpolation occur in a particular color space.\r\n    member _.colorInterpolationFiltersAuto = mk \"color-interpolation-filters\" \"auto\"\r\n    /// Indicates that color interpolation should occur in the linearized RGB color\r\n    /// space as described in the sRGB specification.\r\n    member _.colorInterpolationFiltersLinearRGB = mk \"color-interpolation-filters\" \"linearRGB\"\r\n    /// Indicates that color interpolation should occur in the sRGB color space.\r\n    member _.colorInterpolationFiltersSRGB = mk \"color-interpolation-filters\" \"sRGB\"\r\n\r\n    member _.coordsRect (left: int, top: int, right: int, bottom: int) =\r\n        mk \"coords\"\r\n            ((Util.asString left) + \",\" +\r\n             (Util.asString top) + \",\" +\r\n             (Util.asString right) + \",\" +\r\n             (Util.asString bottom))\r\n    member _.coordsCircle (x: int, y: int, r: int) =\r\n        mk \"coords\"\r\n            ((Util.asString x) + \",\" +\r\n             (Util.asString y) + \",\" +\r\n             (Util.asString r))\r\n    member _.coordsPoly (x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) =\r\n        mk \"coords\"\r\n            ((Util.asString x1) + \",\" +\r\n             (Util.asString y1) + \",\" +\r\n             (Util.asString x2) + \",\" +\r\n             (Util.asString y2) + \",\" +\r\n             (Util.asString x3) + \",\" +\r\n             (Util.asString y3))\r\n\r\n    /// A cross-origin request (i.e. with an Origin HTTP header) is performed, but no credential\r\n    /// is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication). If the server\r\n    /// does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin\r\n    /// HTTP header) the resource will be tainted and its usage restricted.\r\n    member _.crossOriginAnonymous = mk \"crossorigin\" \"anonymous\"\r\n    /// A cross-origin request (i.e. with an Origin HTTP header) is performed along with a credential\r\n    /// sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed). If the server\r\n    /// does not give credentials to the origin site (through Access-Control-Allow-Credentials HTTP\r\n    /// header), the resource will be tainted and its usage restricted.\r\n    member _.crossOriginUseCredentials = mk \"crossorigin\" \"use-credentials\"\r\n\r\n    /// Lets the user agent decide.\r\n    member _.dirAuto = mk \"dir\" \"auto\"\r\n    /// Left to right - for languages that are written from left to right.\r\n    member _.dirLtr = mk \"dir\" \"ltr\"\r\n    /// Right to left - for languages that are written from right to left.\r\n    member _.dirRtl = mk \"dir\" \"rtl\"\r\n\r\n    /// The baseline-identifier for the dominant-baseline is set to be alphabetic, the derived baseline-table is constructed\r\n    /// using the alphabetic baseline-table in the font, and the baseline-table font-size is changed to the value of the\r\n    /// font-size attribute on this element.\r\n    member _.dominantBaselineAlphabetic = mk \"dominant-baseline\" \"alphabetic\"\r\n    /// If this property occurs on a <text> element, then the computed value depends on the value of the writing-mode attribute.\r\n    ///\r\n    /// If the writing-mode is horizontal, then the value of the dominant-baseline component is alphabetic, else if the writing-mode\r\n    /// is vertical, then the value of the dominant-baseline component is central.\r\n    ///\r\n    /// If this property occurs on a <tspan>, <tref>,\r\n    /// <altGlyph> or <textPath> element, then the dominant-baseline and the baseline-table components remain the same as those of\r\n    /// the parent text content element.\r\n    ///\r\n    /// If the computed baseline-shift value actually shifts the baseline, then the baseline-table\r\n    /// font-size component is set to the value of the font-size attribute on the element on which the dominant-baseline attribute\r\n    /// occurs, otherwise the baseline-table font-size remains the same as that of the element.\r\n    ///\r\n    /// If there is no parent text content\r\n    /// element, the scaled-baseline-table value is constructed as above for <text> elements.\r\n    member _.dominantBaselineAuto = mk \"dominant-baseline\" \"auto\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be central. The derived baseline-table is constructed from the\r\n    /// defined baselines in a baseline-table in the font. That font baseline-table is chosen using the following priority order of\r\n    /// baseline-table names: ideographic, alphabetic, hanging, mathematical. The baseline-table font-size is changed to the value\r\n    /// of the font-size attribute on this element.\r\n    member _.dominantBaselineCentral = mk \"dominant-baseline\" \"central\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be hanging, the derived baseline-table is constructed using the\r\n    /// hanging baseline-table in the font, and the baseline-table font-size is changed to the value of the font-size attribute on\r\n    /// this element.\r\n    member _.dominantBaselineHanging = mk \"dominant-baseline\" \"hanging\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be ideographic, the derived baseline-table is constructed using\r\n    /// the ideographic baseline-table in the font, and the baseline-table font-size is changed to the value of the font-size\r\n    /// attribute on this element.\r\n    member _.dominantBaselineIdeographic = mk \"dominant-baseline\" \"ideographic\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be mathematical, the derived baseline-table is constructed using\r\n    /// the mathematical baseline-table in the font, and the baseline-table font-size is changed to the value of the font-size\r\n    /// attribute on this element.\r\n    member _.dominantBaselineMathematical = mk \"dominant-baseline\" \"mathematical\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be middle. The derived baseline-table is constructed from the\r\n    /// defined baselines in a baseline-table in the font. That font baseline-table is chosen using the following priority order\r\n    /// of baseline-table names: alphabetic, ideographic, hanging, mathematical. The baseline-table font-size is changed to the value\r\n    /// of the font-size attribute on this element.\r\n    member _.dominantBaselineMiddle = mk \"dominant-baseline\" \"middle\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be text-after-edge. The derived baseline-table is constructed\r\n    /// from the defined baselines in a baseline-table in the font. The choice of which font baseline-table to use from the\r\n    /// baseline-tables in the font is browser dependent. The baseline-table font-size is changed to the value of the font-size\r\n    /// attribute on this element.\r\n    member _.dominantBaselineTextAfterEdge = mk \"dominant-baseline\" \"text-after-edge\"\r\n    /// The baseline-identifier for the dominant-baseline is set to be text-before-edge. The derived baseline-table is constructed\r\n    /// from the defined baselines in a baseline-table in the font. The choice of which baseline-table to use from the baseline-tables\r\n    /// in the font is browser dependent. The baseline-table font-size is changed to the value of the font-size attribute on this element.\r\n    member _.dominantBaselineTextBeforeEdge = mk \"dominant-baseline\" \"text-before-edge\"\r\n    /// This value uses the top of the em box as the baseline.\r\n    member _.dominantBaselineTextTop = mk \"dominant-baseline\" \"text-top\"\r\n\r\n    // /// This value specifies the length of the simple duration.\r\n    // static member inline clockValue (duration: System.TimeSpan) =\r\n    //     PropHelpers.createClockValue(duration)\r\n    //     |> Interop.mkAttr \"dur\"\r\n    /// This value specifies the simple duration as indefinite.\r\n    member _.durIndefinite = mk \"dur\" \"indefinite\"\r\n    /// This value specifies the simple duration as the intrinsic media duration.\r\n    ///\r\n    /// This is only valid for elements that define media.\r\n    member _.durMedia = mk \"dur\" \"media\"\r\n\r\n    /// Indicates that the input image is extended along each of its borders as\r\n    /// necessary by duplicating the color values at the given edge of the input image.\r\n    member _.edgeModeDuplicate = mk \"edgeMode\" \"duplicate\"\r\n    /// Indicates that the input image is extended with pixel values of zero for\r\n    /// R, G, B and A.\r\n    member _.edgeModeNone = mk \"edgeMode\" \"none\"\r\n    /// Indicates that the input image is extended by taking the color values\r\n    /// from the opposite edge of the image.\r\n    member _.edgeModeWrap = mk \"edgeMode\" \"wrap\"\r\n\r\n    /// Keep the state of the last animation frame.\r\n    member _.fillFreeze = mk \"fill\" \"freeze\"\r\n    /// Keep the state of the first animation frame.\r\n    member _.fillRemove = mk \"fill\" \"remove\"\r\n\r\n    /// x, y, width and height represent values in the current coordinate system that results from\r\n    /// taking the current user coordinate system in place at the time when the <filter> element is\r\n    /// referenced (i.e., the user coordinate system for the element referencing the <filter> element\r\n    /// via a filter attribute).\r\n    member _.filterUnitsUserSpaceOnUse = mk \"filterUnits\" \"userSpaceOnUse\"\r\n    /// x, y, width and height represent fractions or percentages of the bounding box on the referencing\r\n    /// element.\r\n    member _.filterUnitsObjectBoundingBox = mk \"filterUnits\" \"objectBoundingBox\"\r\n\r\n    /// Indicates that the attributes represent values in the coordinate system that results from\r\n    /// taking the current user coordinate system in place at the time when the gradient element\r\n    /// is referenced (i.e., the user coordinate system for the element referencing the gradient\r\n    /// element via a fill or stroke property) and then applying the transform specified by\r\n    /// attribute gradientTransform.\r\n    ///\r\n    /// Percentages represent values relative to the current SVG viewport.\r\n    member _.gradientUnitsUserSpaceOnUse = mk \"gradientUnits\" \"userSpaceOnUse\"\r\n    /// Indicates that the user coordinate system for the attributes is established using the\r\n    /// bounding box of the element to which the gradient is applied and then applying the\r\n    /// transform specified by attribute gradientTransform.\r\n    ///\r\n    /// Percentages represent values relative to the bounding box for the object.\r\n    member _.gradientUnitsObjectBoundingBox = mk \"gradientUnits\" \"objectBoundingBox\"\r\n\r\n    /// Allows page authors to define a content policy for the current page.\r\n    ///\r\n    /// Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site\r\n    /// scripting attacks.\r\n    member _.httpEquivContentSecurityPolicy = mk \"http-equiv\" \"content-security-policy\"\r\n    /// If specified, the content attribute must have the value \"text/html; charset=utf-8\".\r\n    ///\r\n    /// Note: Can only be used in documents served with a text/html MIME type — not in documents served with an XML MIME type.\r\n    member _.httpEquivContentType = mk \"http-equiv\" \"content-type\"\r\n    /// Sets the name of the default CSS style sheet set.\r\n    member _.httpEquivDefaultStyle = mk \"http-equiv\" \"default-style\"\r\n    /// This instruction specifies:\r\n    ///\r\n    /// The number of seconds until the page should be reloaded - only if the content attribute contains a positive integer.\r\n    ///\r\n    /// The number of seconds until the page should redirect to another - only if the content attribute contains a positive integer followed by the string ';url=', and a valid URL.\r\n    member _.httpEquivRefresh = mk \"http-equiv\" \"refresh\"\r\n    /// If specified, the content attribute must have the value \"IE=edge\". User agents are required to ignore this pragma.\r\n    member _.httpEquivXUaCompatible = mk \"http-equiv\" \"x-ua-compatible\"\r\n\r\n    /// Represents an image snapshot of the SVG document under the filter region at the time that the\r\n    /// <filter> element was invoked, except only the alpha channel is used.\r\n    member _.inBackgroundAlpha = mk \"in\" \"BackgroundAlpha\"\r\n    /// Represents an image snapshot of the SVG document under the filter region at the time that the\r\n    /// <filter> element was invoked.\r\n    member _.inBackgroundImage = mk \"in\" \"BackgroundImage\"\r\n    /// An assigned name for the filter primitive.\r\n    ///\r\n    /// If supplied, then graphics that result from processing this filter primitive can be referenced\r\n    /// by an in attribute on a subsequent filter primitive within the same filter element.\r\n    member _.inCustom (name: string) = mk \"in\" name\r\n    /// Represents the value of the fill property on the target element for the filter effect.\r\n    ///\r\n    /// In many cases, the FillPaint is opaque everywhere, but that might not be the case if a shape is\r\n    /// painted with a gradient or pattern which itself includes transparent or semi-transparent parts.\r\n    member _.inFillPaint = mk \"in\" \"FillPaint\"\r\n    /// Represents the graphics elements that were the original input into the <filter> element, except\r\n    /// that only the alpha channel is used.\r\n    member _.inSourceAlpha = mk \"in\" \"SourceAlpha\"\r\n    /// Represents the graphics elements that were the original input into the <filter> element.\r\n    member _.inSourceGraphic = mk \"in\" \"SourceGraphic\"\r\n    /// Represents the value of the stroke property on the target element for the filter effect.\r\n    ///\r\n    /// In many cases, the StrokePaint is opaque everywhere, but that might not be the case if a shape\r\n    /// is painted with a gradient or pattern which itself includes transparent or semi-transparent parts.\r\n    member _.inStrokePaint = mk \"in\" \"StrokePaint\"\r\n\r\n    /// Represents an image snapshot of the SVG document under the filter region at the time that the\r\n    /// <filter> element was invoked, except only the alpha channel is used.\r\n    member _.in2BackgroundAlpha = mk \"in2\" \"BackgroundAlpha\"\r\n    /// Represents an image snapshot of the SVG document under the filter region at the time that the\r\n    /// <filter> element was invoked.\r\n    member _.in2BackgroundImage = mk \"in2\" \"BackgroundImage\"\r\n    /// An assigned name for the filter primitive.\r\n    ///\r\n    /// If supplied, then graphics that result from processing this filter primitive can be referenced\r\n    /// by an in attribute on a subsequent filter primitive within the same filter element.\r\n    member _.in2Custom (name: string) = mk \"in2\" name\r\n    /// Represents the value of the fill property on the target element for the filter effect.\r\n    ///\r\n    /// In many cases, the FillPaint is opaque everywhere, but that might not be the case if a shape is\r\n    /// painted with a gradient or pattern which itself includes transparent or semi-transparent parts.\r\n    member _.in2FillPaint = mk \"in2\" \"FillPaint\"\r\n    /// Represents the graphics elements that were the original input into the <filter> element, except\r\n    /// that only the alpha channel is used.\r\n    member _.in2SourceAlpha = mk \"in2\" \"SourceAlpha\"\r\n    /// Represents the graphics elements that were the original input into the <filter> element.\r\n    member _.in2SourceGraphic = mk \"in2\" \"SourceGraphic\"\r\n    /// Represents the value of the stroke property on the target element for the filter effect.\r\n    ///\r\n    /// In many cases, the StrokePaint is opaque everywhere, but that might not be the case if a shape\r\n    /// is painted with a gradient or pattern which itself includes transparent or semi-transparent parts.\r\n    member _.in2StrokePaint = mk \"in2\" \"StrokePaint\"\r\n\r\n    member _.inputModeDecimal = mk \"inputmode\" \"decimal\"\r\n    member _.inputModeEmail = mk \"inputmode\" \"email\"\r\n    member _.inputModeNone = mk \"inputmode\" \"none\"\r\n    member _.inputModeNumeric = mk \"inputmode\" \"numeric\"\r\n    member _.inputModeSearch = mk \"inputmode\" \"search\"\r\n    member _.inputModeTel = mk \"inputmode\" \"tel\"\r\n    member _.inputModeUrl = mk \"inputmode\" \"url\"\r\n\r\n    /// Subtitles provide translation of content that cannot be understood by the viewer. For example dialogue\r\n    /// or text that is not English in an English language film.\r\n    ///\r\n    /// Subtitles may contain additional content, usually extra background information. For example the text\r\n    /// at the beginning of the Star Wars films, or the date, time, and location of a scene.\r\n    member _.kindSubtitles = mk \"kind\" \"subtitles\"\r\n    /// Closed captions provide a transcription and possibly a translation of audio.\r\n    ///\r\n    /// It may include important non-verbal information such as music cues or sound effects.\r\n    /// It may indicate the cue's source (e.g. music, text, character).\r\n    ///\r\n    /// Suitable for users who are deaf or when the sound is muted.\r\n    member _.kindCaptions = mk \"kind\" \"captions\"\r\n    /// Textual description of the video content.\r\n    ///\r\n    /// Suitable for users who are blind or where the video cannot be seen.\r\n    member _.kindDescriptions = mk \"kind\" \"descriptions\"\r\n    /// Chapter titles are intended to be used when the user is navigating the media resource.\r\n    member _.kindChapters = mk \"kind\" \"chapters\"\r\n    /// Tracks used by scripts. Not visible to the user.\r\n    member _.kindMetadata = mk \"kind\" \"metadata\"\r\n\r\n    member _.lengthAdjustSpacing = mk \"lengthAdjust\" \"spacing\"\r\n    member _.lengthAdjustSpacingAndGlyphs = mk \"lengthAdjust\" \"spacingAndGlyphs\"\r\n\r\n    /// Specifies that the markerWidth and markerUnits attributes and the contents of the <marker> element represent\r\n    /// values in a coordinate system which has a single unit equal the size in user units of the current stroke width\r\n    /// (see the stroke-width attribute) in place for the graphic object referencing the marker.\r\n    member _.markerUnitsStrokeWidth = mk \"markerUnits\" \"strokeWidth\"\r\n    /// Specifies that the markerWidth and markerUnits attributes and the contents of the <marker> element represent\r\n    /// values in the current user coordinate system in place for the graphic object referencing the marker (i.e.,\r\n    /// the user coordinate system for the element referencing the <marker> element via a marker, marker-start,\r\n    /// marker-mid, or marker-end property).\r\n    member _.markerUnitsUserSpaceOnUse = mk \"markerUnits\" \"userSpaceOnUse\"\r\n\r\n    /// Indicates that all coordinates inside the <mask> element are relative to the bounding box of the element the\r\n    /// mask is applied to.\r\n    ///\r\n    /// A bounding box could be considered the same as if the content of the <mask> were bound to mk \"0 0 1 1\" viewbox.\r\n    member _.maskContentUnitsObjectBoundingBox = mk \"maskContentUnits\" \"strokeWidth\"\r\n    /// Indicates that all coordinates inside the <mask> element refer to the user coordinate system as defined\r\n    /// when the mask was created.\r\n    member _.maskContentUnitsUserSpaceOnUse = mk \"maskContentUnits\" \"userSpaceOnUse\"\r\n\r\n    /// Indicates that all coordinates for the geometry attributes represent fractions or percentages of the bounding box\r\n    /// of the element to which the mask is applied.\r\n    ///\r\n    /// A bounding box could be considered the same as if the content of the <mask> were bound to mk \"0 0 1 1\" viewbox.\r\n    member _.maskUnitsObjectBoundingBox = mk \"maskUnits\" \"strokeWidth\"\r\n    /// Indicates that all coordinates for the geometry attributes refer to the user coordinate system as defined\r\n    /// when the mask was created.\r\n    member _.maskUnitsUserSpaceOnUse = mk \"maskUnits\" \"userSpaceOnUse\"\r\n\r\n    /// The final color has the hue and saturation of the top color, while using the luminosity of the\r\n    /// bottom color.\r\n    ///\r\n    /// The effect preserves gray levels and can be used to colorize the foreground.\r\n    member _.modeColor = mk \"mode\" \"color\"\r\n    /// The final color is the result of inverting the bottom color, dividing the value by the top\r\n    /// color, and inverting that value.\r\n    ///\r\n    /// A white foreground leads to no change. A foreground with the inverse color of the backdrop\r\n    /// leads to a black final image.\r\n    ///\r\n    /// This blend mode is similar to multiply, but the foreground need only be as dark as the inverse\r\n    /// of the backdrop to make the final image black.\r\n    member _.modeColorBurn = mk \"mode\" \"color-burn\"\r\n    /// The final color is the result of dividing the bottom color by the inverse of the top color.\r\n    ///\r\n    /// A black foreground leads to no change. A foreground with the inverse color of the backdrop\r\n    /// leads to a fully lit color.\r\n    ///\r\n    /// This blend mode is similar to screen, but the foreground need only be as light as the inverse\r\n    /// of the backdrop to create a fully lit color.\r\n    member _.modeColorDodge = mk \"mode\" \"color-dodge\"\r\n    /// The final color is composed of the darkest values of each color channel.\r\n    member _.modeDarken = mk \"mode\" \"darken\"\r\n    /// The final color is the result of subtracting the darker of the two colors from the lighter\r\n    /// one.\r\n    ///\r\n    /// A black layer has no effect, while a white layer inverts the other layer's color.\r\n    member _.modeDifference = mk \"mode\" \"difference\"\r\n    /// The final color is similar to difference, but with less contrast.\r\n    ///\r\n    /// As with difference, a black layer has no effect, while a white layer inverts the other\r\n    /// layer's color.\r\n    member _.modeExclusion = mk \"mode\" \"exclusion\"\r\n    /// The final color is the result of multiply if the top color is darker, or screen if the top\r\n    /// color is lighter.\r\n    ///\r\n    /// This blend mode is equivalent to overlay but with the layers swapped.\r\n    ///\r\n    /// The effect is similar to shining a harsh spotlight on the backdrop.\r\n    member _.modeHardLight = mk \"mode\" \"hard-light\"\r\n    /// The final color has the hue of the top color, while using the saturation and luminosity of the\r\n    /// bottom color.\r\n    member _.modeHue = mk \"mode\" \"hue\"\r\n    /// The final color is composed of the lightest values of each color channel.\r\n    member _.modeLighten = mk \"mode\" \"lighten\"\r\n    /// The final color has the luminosity of the top color, while using the hue and saturation of the\r\n    /// bottom color.\r\n    ///\r\n    /// This blend mode is equivalent to color, but with the layers swapped.\r\n    member _.modeLuminosity = mk \"mode\" \"luminosity\"\r\n    /// The final color is the result of multiplying the top and bottom colors.\r\n    ///\r\n    /// A black layer leads to a black final layer, and a white layer leads to no change.\r\n    ///\r\n    /// The effect is like two images printed on transparent film overlapping.\r\n    member _.modeMultiply = mk \"mode\" \"multiply\"\r\n    /// The final color is the top color, regardless of what the bottom color is.\r\n    ///\r\n    /// The effect is like two opaque pieces of paper overlapping.\r\n    member _.modeNormal = mk \"mode\" \"normal\"\r\n    /// The final color is the result of multiply if the bottom color is darker, or screen if the\r\n    /// bottom color is lighter.\r\n    ///\r\n    /// This blend mode is equivalent to hard-light but with the layers swapped.\r\n    member _.modeOverlay = mk \"mode\" \"overlay\"\r\n    /// The final color has the saturation of the top color, while using the hue and luminosity of the\r\n    /// bottom color.\r\n    ///\r\n    /// A pure gray backdrop, having no saturation, will have no effect.\r\n    member _.modeSaturation = mk \"mode\" \"saturation\"\r\n    /// The final color is the result of inverting the colors, multiplying them, and inverting\r\n    /// that value.\r\n    ///\r\n    /// A black layer leads to no change, and a white layer leads to a white final layer.\r\n    ///\r\n    /// The effect is like two images shone onto a projection screen.\r\n    member _.modeScreen = mk \"mode\" \"screen\"\r\n    /// The final color is similar to hard-light, but softer.\r\n    ///\r\n    /// This blend mode behaves similar to hard-light.\r\n    ///\r\n    /// The effect is similar to shining a diffused spotlight on the backdrop.\r\n    member _.modeSoftLight = mk \"mode\" \"soft-light\"\r\n\r\n    /// This value indicates that the source graphic defined in the in attribute and the\r\n    /// destination graphic defined in the in2 attribute are combined using the following\r\n    /// formula:\r\n    ///\r\n    /// result = k1*i1*i2 + k2*i1 + k3*i2 + k4\r\n    ///\r\n    /// where:\r\n    ///\r\n    /// i1 and i2 indicate the corresponding pixel channel values of the input image, which\r\n    /// map to in and in2 respectively, and k1,k2,k3,and k4 indicate the values of the\r\n    /// attributes with the same name.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorArithmetic = mk \"operator\" \"arithmetic\"\r\n    /// Indicates that the parts of the source graphic defined in the in attribute, which overlap\r\n    /// the destination graphic defined in the in2 attribute, replace the destination graphic.\r\n    ///\r\n    /// The parts of the destination graphic that do not overlap with the source graphic stay untouched.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorAtop = mk \"operator\" \"atop\"\r\n    /// Fattens the source graphic defined in the in attribute.\r\n    ///\r\n    /// Used with <feMorphology>\r\n    member _.operatorDilate = mk \"operator\" \"dilate\"\r\n    /// Thins the source graphic defined in the in attribute.\r\n    ///\r\n    /// Used with <feMorphology>\r\n    member _.operatorErode = mk \"operator\" \"erode\"\r\n    /// Indicates that the parts of the source graphic defined in the in attribute that overlap the\r\n    /// destination graphic defined in the in2 attribute, replace the destination graphic.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorIn' = mk \"operator\" \"in\"\r\n    /// Indicates that the sum of the source graphic defined in the in attribute and the destination\r\n    /// graphic defined in the in2 attribute is displayed.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorLighter = mk \"operator\" \"lighter\"\r\n    /// Indicates that the parts of the source graphic defined in the in attribute that fall outside\r\n    /// the destination graphic defined in the in2 attribute, are displayed.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorOut = mk \"operator\" \"out\"\r\n    /// Indicates that the source graphic defined in the in attribute is placed over the destination\r\n    /// graphic defined in the in2 attribute.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorOver = mk \"operator\" \"over\"\r\n    /// Indicates that the non-overlapping regions of the source graphic defined in the in attribute\r\n    /// and the destination graphic defined in the in2 attribute are combined.\r\n    ///\r\n    /// Used with <feComposite>\r\n    member _.operatorXor = mk \"operator\" \"xor\"\r\n\r\n    /// Indicates that all coordinates inside the <pattern> element are relative to the bounding box of the element\r\n    /// the pattern is applied to.\r\n    ///\r\n    /// A bounding box could be considered the same as if the content of the <pattern> were bound to mk \"0 0 1 1\"\r\n    /// viewbox for a pattern tile of width and height of 100%.\r\n    member _.patternContentUnitsObjectBoundingBox = mk \"patternContentUnits\" \"objectBoundingBox\"\r\n    /// Indicates that all coordinates inside the <pattern> element refer to the user coordinate system as defined\r\n    /// when the pattern tile was created.\r\n    member _.patternContentUnitsUserSpaceOnUse = mk \"patternContentUnits\" \"userSpaceOnUse\"\r\n\r\n    /// Indicates that all coordinates for the geometry properties represent fractions or percentages of the bounding\r\n    /// box of the element to which the mask is applied.\r\n    ///\r\n    /// A bounding box could be considered the same as if the content of the <mask> were bound to mk \"0 0 1 1\" viewbox.\r\n    member _.patternUnitsObjectBoundingBox = mk \"patternUnits\" \"objectBoundingBox\"\r\n    /// Indicates that all coordinates for the geometry properties refer to the user coordinate system as defined\r\n    /// when the pattern was applied.\r\n    member _.patternUnitsUserSpaceOnUse = mk \"patternUnits\" \"userSpaceOnUse\"\r\n\r\n    /// Indicates that the whole video file can be downloaded, even if the user is not expected to use it.\r\n    member _.preloadAuto = mk \"preload\" \"auto\"\r\n    /// Indicates that only video metadata (e.g. length) is fetched.\r\n    member _.preloadMetadata = mk \"preload\" \"metadata\"\r\n    /// Indicates that the video should not be preloaded.\r\n    member _.preloadNone = mk \"preload\" \"none\"\r\n\r\n    /// Do not force uniform scaling.\r\n    ///\r\n    /// Scale the graphic content of the given element non-uniformly if necessary such that the element's\r\n    /// bounding box exactly matches the viewport rectangle. Note that if <align> is none, then the optional\r\n    /// <meetOrSlice> value is ignored.\r\n    member _.preserveAspectRatioNone = mk \"preserveAspectRatio\" \"none\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMinYMinMeet = mk \"preserveAspectRatio\" \"xMinYMin meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMinYMinSlice = mk \"preserveAspectRatio\" \"xMinYMin slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMidYMinMeet = mk \"preserveAspectRatio\" \"xMidYMin meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMidYMinSlice = mk \"preserveAspectRatio\" \"xMidYMin slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMaxYMinMeet = mk \"preserveAspectRatio\" \"xMaxYMin meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMaxYMinSlice = mk \"preserveAspectRatio\" \"xMaxYMin slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMinYMidMeet = mk \"preserveAspectRatio\" \"xMinYMid meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMinYMidSlice = mk \"preserveAspectRatio\" \"xMinYMid slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMidYMidMeet = mk \"preserveAspectRatio\" \"xMidYMid meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMidYMidSlice = mk \"preserveAspectRatio\" \"xMidYMid slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMaxYMidMeet = mk \"preserveAspectRatio\" \"xMaxYMid meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMaxYMidSlice = mk \"preserveAspectRatio\" \"xMaxYMid slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMinYMaxMeet = mk \"preserveAspectRatio\" \"xMinYMax meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMinYMaxSlice = mk \"preserveAspectRatio\" \"xMinYMax slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMidYMaxMeet = mk \"preserveAspectRatio\" \"xMidYMax meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMidYMaxSlice = mk \"preserveAspectRatio\" \"xMidYMax slice\"\r\n\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewBox is visible within the viewport.\r\n    ///\r\n    /// The viewBox is scaled up as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the graphic does not match the viewport, some of\r\n    /// the viewport will extend beyond the bounds of the viewBox (i.e., the area into which\r\n    /// the viewBox will draw will be smaller than the viewport).\r\n    member _.preserveAspectRatioXMaxYMaxMeet = mk \"preserveAspectRatio\" \"xMaxYMax meet\"\r\n    /// Scale the graphic such that:\r\n    ///\r\n    /// Aspect ratio is preserved.\r\n    ///\r\n    /// The entire viewport is covered by the viewBox.\r\n    ///\r\n    /// The viewBox is scaled down as much as possible, while still meeting the other criteria.\r\n    ///\r\n    /// In this case, if the aspect ratio of the viewBox does not match the viewport, some of the\r\n    /// viewBox will extend beyond the bounds of the viewport (i.e., the area into which the\r\n    /// viewBox will draw is larger than the viewport).\r\n    member _.preserveAspectRatioXMaxYMaxSlice = mk \"preserveAspectRatio\" \"xMaxYMax slice\"\r\n\r\n    /// Indicates that any length values within the filter definitions represent fractions or\r\n    /// percentages of the bounding box on the referencing element.\r\n    member _.primitiveUnitsObjectBoundingBox = mk \"primitiveUnits\" \"objectBoundingBox\"\r\n    /// Indicates that any length values within the filter definitions represent values in the current user coordinate\r\n    /// system in place at the time when the <filter> element is referenced (i.e., the user coordinate system for the\r\n    /// element referencing the <filter> element via a filter attribute).\r\n    member _.primitiveUnitsUserSpaceOnUse = mk \"primitiveUnits\" \"userSpaceOnUse\"\r\n\r\n    /// The Referer header will not be sent.\r\n    member _.referrerPolicyNoReferrer = mk \"referrerpolicy\" \"no-referrer\"\r\n    /// The Referer header will not be sent to origins without TLS (HTTPS).\r\n    member _.referrerPolicyNoReferrerWhenDowngrade = mk \"referrerpolicy\" \"no-referrer-when-downgrade\"\r\n    /// The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.\r\n    member _.referrerPolicyOrigin = mk \"referrerpolicy\" \"origin\"\r\n    /// The referrer sent to other origins will be limited to the scheme, the host, and the port.\r\n    /// Navigations on the same origin will still include the path.\r\n    member _.referrerPolicyOriginWhenCrossOrigin = mk \"referrerpolicy\" \"origin-when-cross-origin\"\r\n    /// A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.\r\n    member _.referrerPolicySameOrigin = mk \"referrerpolicy\" \"same-origin\"\r\n    /// Only send the origin of the document as the referrer when the protocol security level stays the same\r\n    /// (e.g. HTTPS→HTTPS), but don't send it to a less secure destination (e.g. HTTPS→HTTP).\r\n    member _.referrerPolicyStrictOrigin = mk \"referrerpolicy\" \"strict-origin\"\r\n    /// Send a full URL when performing a same-origin request, but only send the origin when the protocol security\r\n    /// level stays the same (e.g.HTTPS→HTTPS), and send no header to a less secure destination (e.g. HTTPS→HTTP).\r\n    member _.referrerPolicyStrictOriginWhenCrossOrigin = mk \"referrerpolicy\" \"strict-origin-when-cross-origin\"\r\n    /// The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe,\r\n    /// because it leaks origins and paths from TLS-protected resources to insecure origins.\r\n    member _.referrerPolicyUnsafeUrl = mk \"referrerpolicy\" \"unsafe-url\"\r\n\r\n    /// Lengths are interpreted as being in the coordinate system of the marker contents, after application\r\n    /// of the viewBox and preserveAspectRatio attributes.\r\n    member _.refXLength (value: ICssUnit) = mk \"refX\" (Util.asString value)\r\n    /// Numbers are interpreted as being in the coordinate system of the marker contents, after application of the\r\n    /// viewBox and preserveAspectRatio attributes.\r\n    member _.refXLength (value: int) = mk \"refX\" (Util.asString value)\r\n    /// The reference point of the marker is placed at the left edge of the shape.\r\n    member _.refXLeft = mk \"refX\" \"left\"\r\n    /// The reference point of the marker is placed at the horizontal center of the shape.\r\n    member _.refXCenter = mk \"refX\" \"center\"\r\n    /// The reference point of the marker is placed at the right edge of the shape.\r\n    member _.refXRight = mk \"refX\" \"right\"\r\n\r\n    /// Lengths are interpreted as being in the coordinate system of the marker contents, after application of the\r\n    /// viewBox and preserveAspectRatio attributes.\r\n    ///\r\n    /// Percentage values are interpreted as being a percentage of the viewBox height.\r\n    member _.refYLength (value: ICssUnit) = mk \"refY\" (Util.asString value)\r\n    /// Numbers are interpreted as being in the coordinate system of the marker contents, after application of the\r\n    /// viewBox and preserveAspectRatio attributes.\r\n    member _.refYLength (value: int) = mk \"refY\" (Util.asString value)\r\n    /// The reference point of the marker is placed at the top edge of the shape.\r\n    member _.refYTop = mk \"refY\" \"top\"\r\n    /// The reference point of the marker is placed at the vertical center of the shape.\r\n    member _.refYCenter = mk \"refY\" \"center\"\r\n    /// The reference point of the marker is placed at the bottom edge of the shape.\r\n    member _.refYBottom = mk \"refY\" \"bottom\"\r\n\r\n    /// Provides a link to an alternate version of the document (i.e. print page, translated or mirror).\r\n    ///\r\n    /// Example: <link rel=\"alternate\" type=\"application/atom+xml\" title=\"W3Schools News\" href=\"/blog/news/atom\">\r\n    member _.relAlternate = mk \"rel\" \"alternate\"\r\n    /// Provides a link to the author of the document.\r\n    member _.relAuthor = mk \"rel\" \"author\"\r\n    /// Permalink for the nearest ancestor section.\r\n    member _.relBookmark = mk \"rel\" \"bookmark\"\r\n    /// Preferred URL for the current document.\r\n    member _.relCanonical = mk \"rel\" \"canonical\"\r\n    /// Specifies that the browser should preemptively perform DNS resolution for the target resource's origin.\r\n    member _.relDnsPrefetch = mk \"rel\" \"dns-prefetch\"\r\n    /// The referenced document is not part of the same site as the current document.\r\n    member _.relExternal = mk \"rel\" \"external\"\r\n    /// Provides a link to a help document. Example: <link rel=\"help\" href=\"/help/\">\r\n    member _.relHelp = mk \"rel\" \"help\"\r\n    /// Imports an icon to represent the document.\r\n    ///\r\n    /// Example: <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\r\n    member _.relIcon = mk \"rel\" \"icon\"\r\n    /// Provides a link to copyright information for the document.\r\n    member _.relLicense = mk \"rel\" \"license\"\r\n    /// Web app manifest.\r\n    member _.relManifest = mk \"rel\" \"manifest\"\r\n    /// Tells to browser to preemptively fetch the script and store it in the document's module map for later\r\n    /// evaluation. Optionally, the module's dependencies can be fetched as well.\r\n    member _.relModulepreload = mk \"rel\" \"modulepreload\"\r\n    /// Provides a link to the next document in the series.\r\n    member _.relNext = mk \"rel\" \"next\"\r\n    /// Indicates that the current document's original author or publisher does not endorse the referenced document.\r\n    member _.relNofollow = mk \"rel\" \"nofollow\"\r\n    /// Creates a top-level browsing context that is not an auxiliary browsing context if the hyperlink would create\r\n    /// either of those, to begin with (i.e., has an appropriate target attribute value).\r\n    member _.relNoopener = mk \"rel\" \"noopener\"\r\n    /// No Referer header will be included. Additionally, has the same effect as noopener.\r\n    member _.relNoreferrer = mk \"rel\" \"noreferrer\"\r\n    /// Creates an auxiliary browsing context if the hyperlink would otherwise create a top-level browsing context\r\n    /// that is not an auxiliary browsing context (i.e., has \"_blank\" as target attribute value).\r\n    member _.relOpener = mk \"rel\" \"opener\"\r\n    /// Provides the address of the pingback server that handles pingbacks to the current document.\r\n    member _.relPingback = mk \"rel\" \"pingback\"\r\n    /// Specifies that the browser should preemptively connect to the target resource's origin.\r\n    member _.relPreconnect = mk \"rel\" \"preconnect\"\r\n    /// Specifies that the browser should preemptively fetch and cache the target resource as it is likely to be\r\n    /// required for a follow-up navigation.\r\n    member _.relPrefetch = mk \"rel\" \"prefetch\"\r\n    /// Specifies that the browser agent must preemptively fetch and cache the target resource for current navigation\r\n    /// according to the destination given by the \"as\" attribute (and the priority associated with that destination).\r\n    member _.relPreload = mk \"rel\" \"preload\"\r\n    /// Specifies that the browser should pre-render (load) the specified webpage in the background. So, if the user\r\n    /// navigates to this page, it speeds up the page load (because the page is already loaded).\r\n    ///\r\n    /// Warning! This wastes the user's bandwidth!\r\n    ///\r\n    /// Only use prerender if it is absolutely sure that the webpage is required at some point in the user journey.\r\n    member _.relPrerender = mk \"rel\" \"prerender\"\r\n    /// Indicates that the document is a part of a series, and that the previous document in the series is the referenced document.\r\n    member _.relPrev = mk \"rel\" \"prev\"\r\n    /// Provides a link to a resource that can be used to search through the current document and its related pages.\r\n    member _.relSearch = mk \"rel\" \"search\"\r\n    /// Imports a style sheet.\r\n    member _.relStylesheet = mk \"rel\" \"stylesheet\"\r\n    /// Gives a tag (identified by the given address) that applies to the current document.\r\n    member _.relTag = mk \"rel\" \"tag\"\r\n\r\n    /// Specifies the number of iterations.\r\n    ///\r\n    /// It can include partial iterations expressed as fraction values.\r\n    ///\r\n    /// A fractional value describes a portion of the simple duration.\r\n    ///\r\n    /// Values must be greater than 0.\r\n    member _.repeatCountIterations (value: float) = mk \"repeatCount\" (Util.asString value)\r\n    /// Specifies the number of iterations.\r\n    ///\r\n    /// It can include partial iterations expressed as fraction values.\r\n    ///\r\n    /// A fractional value describes a portion of the simple duration.\r\n    ///\r\n    /// Values must be greater than 0.\r\n    member _.repeatCountIterations (value: int) = mk \"repeatCount\" (Util.asString value)\r\n    /// Indicates that the animation will be repeated indefinitely (i.e. until the document ends).\r\n    member _.repeatCountIndefinite = mk \"repeatCount\" \"indefinite\"\r\n\r\n    // /// This value specifies the duration in presentation time to repeat the animation.\r\n    // static member inline clockValue (duration: System.TimeSpan) =\r\n    //     PropHelpers.createClockValue(duration)\r\n    //     |> Interop.mkAttr \"repeatDur\"\r\n    /// Indicates that the animation will be repeated indefinitely (i.e. until the document ends).\r\n    member _.repeatDurIndefinite = mk \"repeatDur\" \"indefinite\"\r\n\r\n    /// Indicates that the animation can be restarted at any time.\r\n    member _.restartAlways = mk \"restart\" \"always\"\r\n    /// Indicates that the animation cannot be restarted for the time the document is loaded.\r\n    member _.restartNever = mk \"restart\" \"never\"\r\n    /// Indicates that the animation can only be restarted when it is not active (i.e. after the active end).\r\n    ///\r\n    /// Attempts to restart the animation during its active duration are ignored.\r\n    member _.restartWhenNotActive = mk \"restart\" \"whenNotActive\"\r\n\r\n    /// A message with important, and usually time-sensitive, information.\r\n    /// See related `alertdialog` and `status`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#alert\r\n    member _.roleAlert = mk \"role\" \"alert\"\r\n    /// A type of dialog that contains an alert message, where initial focus\r\n    /// goes to an element within the dialog. See related `alert` and\r\n    /// `dialog`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#alertdialog\r\n    member _.roleAlertDialog = mk \"role\" \"alertdialog\"\r\n    /// A region declared as a web application, as opposed to a web\r\n    /// `document`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#application\r\n    member _.roleApplication = mk \"role\" \"application\"\r\n    /// A section of a page that consists of a composition that forms an\r\n    /// independent part of a document, page, or site.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#article\r\n    member _.roleArticle = mk \"role\" \"article\"\r\n    /// A region that contains mostly site-oriented content, rather than\r\n    /// page-specific content.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#banner\r\n    member _.roleBanner = mk \"role\" \"banner\"\r\n    /// An input that allows for user-triggered actions when clicked or\r\n    /// pressed. See related `link`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#button\r\n    member _.roleButton = mk \"role\" \"button\"\r\n    /// A checkable input that has three possible values: `true`, `false`,\r\n    /// or `mixed`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#checkbox\r\n    member _.roleCheckbox = mk \"role\" \"checkbox\"\r\n    /// A cell containing header information for a column.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#columnheader\r\n    member _.roleColumnHeader = mk \"role\" \"columnheader\"\r\n    /// A presentation of a `select`; usually similar to a `textbox` where\r\n    /// users can type ahead to select an option, or type to enter arbitrary\r\n    /// text as a new item in the list. See related `listbox`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#combobox\r\n    member _.roleComboBox = mk \"role\" \"combobox\"\r\n    /// A supporting section of the document, designed to be complementary\r\n    /// to the main content at a similar level in the DOM hierarchy, but\r\n    /// remains meaningful when separated from the main content.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#complementary\r\n    member _.roleComplementary = mk \"role\" \"complementary\"\r\n    /// A large perceivable region that contains information about the\r\n    /// parent document.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#contentinfo\r\n    member _.roleContentInfo = mk \"role\" \"contentinfo\"\r\n    /// A definition of a term or concept.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#definition\r\n    member _.roleDefinition = mk \"role\" \"definition\"\r\n    /// A dialog is an application window that is designed to interrupt the\r\n    /// current processing of an application in order to prompt the user to\r\n    /// enter information or require a response. See related `alertdialog`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#dialog\r\n    member _.roleDialog = mk \"role\" \"dialog\"\r\n    /// A list of references to members of a group, such as a static table\r\n    /// of contents.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#directory\r\n    member _.roleDirectory = mk \"role\" \"directory\"\r\n    /// A region containing related information that is declared as document\r\n    /// content, as opposed to a web application.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#document\r\n    member _.roleDocument = mk \"role\" \"document\"\r\n    /// A `landmark` region that contains a collection of items and objects\r\n    /// that, as a whole, combine to create a form. See related search.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#form\r\n    member _.roleForm = mk \"role\" \"form\"\r\n    /// A grid is an interactive control which contains cells of tabular\r\n    /// data arranged in rows and columns, like a table.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#grid\r\n    member _.roleGrid = mk \"role\" \"grid\"\r\n    /// A cell in a grid or treegrid.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#gridcell\r\n    member _.roleGridCell = mk \"role\" \"gridcell\"\r\n    /// A set of user interface objects which are not intended to be\r\n    /// included in a page summary or table of contents by assistive\r\n    /// technologies.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#group\r\n    member _.roleGroup = mk \"role\" \"group\"\r\n    /// A heading for a section of the page.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#heading\r\n    member _.roleHeading = mk \"role\" \"heading\"\r\n    /// A container for a collection of elements that form an image.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#img\r\n    member _.roleImg = mk \"role\" \"img\"\r\n    /// An interactive reference to an internal or external resource that,\r\n    /// when activated, causes the user agent to navigate to that resource.\r\n    /// See related `button`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#link\r\n    member _.roleLink = mk \"role\" \"link\"\r\n    /// A group of non-interactive list items. See related `listbox`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#list\r\n    member _.roleList = mk \"role\" \"list\"\r\n    /// A widget that allows the user to select one or more items from a\r\n    /// list of choices. See related `combobox` and `list`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#listbox\r\n    member _.roleListBox = mk \"role\" \"listbox\"\r\n    /// A single item in a list or directory.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#listitem\r\n    member _.roleListItem = mk \"role\" \"listitem\"\r\n    /// A type of live region where new information is added in meaningful\r\n    /// order and old information may disappear. See related `marquee`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#log\r\n    member _.roleLog = mk \"role\" \"log\"\r\n    /// The main content of a document.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#main\r\n    member _.roleMain = mk \"role\" \"main\"\r\n    /// A type of live region where non-essential information changes\r\n    /// frequently. See related `log`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#marquee\r\n    member _.roleMarquee = mk \"role\" \"marquee\"\r\n    /// Content that represents a mathematical expression.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#math\r\n    member _.roleMath = mk \"role\" \"math\"\r\n    /// A type of widget that offers a list of choices to the user.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#menu\r\n    member _.roleMenu = mk \"role\" \"menu\"\r\n    /// A presentation of `menu` that usually remains visible and is usually\r\n    /// presented horizontally.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#menubar\r\n    member _.roleMenuBar = mk \"role\" \"menubar\"\r\n    /// An option in a set of choices contained by a `menu` or `menubar`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#menuitem\r\n    member _.roleMenuItem = mk \"role\" \"menuitem\"\r\n    /// A `menuitem` with a checkable state whose possible values are\r\n    /// `true`, `false`, or `mixed`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#menuitemcheckbox\r\n    member _.roleMenuItemCheckbox = mk \"role\" \"menuitemcheckbox\"\r\n    /// A checkable menuitem in a set of elements with role `menuitemradio`,\r\n    /// only one of which can be checked at a time.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#menuitemradio\r\n    member _.roleMenuItemRadio = mk \"role\" \"menuitemradio\"\r\n    /// A collection of navigational elements (usually links) for navigating\r\n    /// the document or related documents.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#navigation\r\n    member _.roleNavigation = mk \"role\" \"navigation\"\r\n    /// A section whose content is parenthetic or ancillary to the main\r\n    /// content of the resource.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#note\r\n    member _.roleNote = mk \"role\" \"note\"\r\n    /// A selectable item in a `select` list.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#option\r\n    member _.roleOption = mk \"role\" \"option\"\r\n    /// An element whose implicit native role semantics will not be mapped\r\n    /// to the accessibility API.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#presentation\r\n    member _.rolePresentation = mk \"role\" \"presentation\"\r\n    /// An element that displays the progress status for tasks that take a\r\n    /// long time.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#progressbar\r\n    member _.roleProgressBar = mk \"role\" \"progressbar\"\r\n    /// A checkable input in a group of elements with role radio, only one\r\n    /// of which can be checked at a time.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#radio\r\n    member _.roleRadio = mk \"role\" \"radio\"\r\n    /// A group of radio buttons.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#radiogroup\r\n    member _.roleRadioGroup = mk \"role\" \"radiogroup\"\r\n    /// A large perceivable section of a web page or document, that is\r\n    /// important enough to be included in a page summary or table of\r\n    /// contents, for example, an area of the page containing live sporting\r\n    /// event statistics.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#region\r\n    member _.roleRegion = mk \"role\" \"region\"\r\n    /// A row of cells in a grid.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#row\r\n    member _.roleRow = mk \"role\" \"row\"\r\n    /// A group containing one or more row elements in a grid.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#rowgroup\r\n    member _.roleRowGroup = mk \"role\" \"rowgroup\"\r\n    /// A cell containing header information for a row in a grid.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#rowheader\r\n    member _.roleRowHeader = mk \"role\" \"rowheader\"\r\n    /// A graphical object that controls the scrolling of content within a\r\n    /// viewing area, regardless of whether the content is fully displayed\r\n    /// within the viewing area.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#scrollbar\r\n    member _.roleScrollBar = mk \"role\" \"scrollbar\"\r\n    /// A divider that separates and distinguishes sections of content or\r\n    /// groups of menuitems.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#separator\r\n    member _.roleSeparator = mk \"role\" \"separator\"\r\n    /// A `landmark` region that contains a collection of items and objects\r\n    /// that, as a whole, combine to create a search facility. See related\r\n    /// `form`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#search\r\n    member _.roleSearch = mk \"role\" \"search\"\r\n    /// A user input where the user selects a value from within a given\r\n    /// range.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#slider\r\n    member _.roleSlider = mk \"role\" \"slider\"\r\n    /// A form of `range` that expects the user to select from among\r\n    /// discrete choices.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#spinbutton\r\n    member _.roleSpinButton = mk \"role\" \"spinbutton\"\r\n    /// A container whose content is advisory information for the user but\r\n    /// is not important enough to justify an alert, often but not\r\n    /// necessarily presented as a status bar. See related `alert`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#status\r\n    member _.roleStatus = mk \"role\" \"status\"\r\n    /// A grouping label providing a mechanism for selecting the tab content\r\n    /// that is to be rendered to the user.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#tab\r\n    member _.roleTab = mk \"role\" \"tab\"\r\n    /// A list of `tab` elements, which are references to `tabpanel`\r\n    /// elements.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#tablist\r\n    member _.roleTabList = mk \"role\" \"tablist\"\r\n    /// A container for the resources associated with a `tab`, where each\r\n    /// `tab` is contained in a `tablist`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#tabpanel\r\n    member _.roleTabPanel = mk \"role\" \"tabpanel\"\r\n    /// Input that allows free-form text as its value.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#textbox\r\n    member _.roleTextBox = mk \"role\" \"textbox\"\r\n    /// A type of live region containing a numerical counter which indicates\r\n    /// an amount of elapsed time from a start point, or the time remaining\r\n    /// until an end point.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#timer\r\n    member _.roleTimer = mk \"role\" \"timer\"\r\n    /// A collection of commonly used function buttons or controls\r\n    /// represented in compact visual form.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#toolbar\r\n    member _.roleToolbar = mk \"role\" \"toolbar\"\r\n    /// A contextual popup that displays a description for an element.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#tooltip\r\n    member _.roleTooltip = mk \"role\" \"tooltip\"\r\n    /// A type of `list` that may contain sub-level nested groups that can\r\n    /// be collapsed and expanded.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#tree\r\n    member _.roleTree = mk \"role\" \"tree\"\r\n    /// A `grid` whose rows can be expanded and collapsed in the same manner\r\n    /// as for a `tree`.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#treegrid\r\n    member _.roleTreeGrid = mk \"role\" \"treegrid\"\r\n    /// An option item of a `tree`. This is an element within a tree that\r\n    /// may be expanded or collapsed if it contains a sub-level group of\r\n    /// `treeitem` elements.\r\n    ///\r\n    /// https://www.w3.org/WAI/PF/aria-1.1/roles#treeitem\r\n    member _.roleTreeItem = mk \"role\" \"treeitem\"\r\n\r\n    // /// For the opposite direction.\r\n    // member _.selectionDirectionBackward = mk \"selectionDirection\" \"backward\"\r\n    // /// If selection was performed in the start-to-end direction of the current locale.\r\n    // member _.selectionDirectionForward = mk \"selectionDirection\" \"forward\"\r\n    // /// If the direction is unknown.\r\n    // member _.selectionDirectionNone = mk \"selectionDirection\" \"none\"\r\n\r\n    member _.shapeRect = mk \"shape\" \"rect\"\r\n    member _.shapeCircle = mk \"shape\" \"circle\"\r\n    member _.shapePoly = mk \"shape\" \"poly\"\r\n\r\n    /// Indicates that the user agent should use text-on-a-path layout algorithms to adjust\r\n    /// the spacing between typographic characters in order to achieve visually appealing results.\r\n    member _.spacingAuto = mk \"spacing\" \"auto\"\r\n    /// Indicates that the typographic characters should be rendered exactly according to the\r\n    /// spacing rules as specified by the layout rules for text-on-a-path.\r\n    member _.spacingExact = mk \"spacing\" \"exact\"\r\n\r\n    /// Indicates that the final color of the gradient fills the shape beyond the gradient's edges.\r\n    member _.spreadMethodPad = mk \"spreadMethod\" \"pad\"\r\n    /// Indicates that the gradient repeats in reverse beyond its edges.\r\n    member _.spreadMethodReflect = mk \"spreadMethod\" \"reflect\"\r\n    /// Specifies that the gradient repeats in the original order beyond its edges.\r\n    member _.spreadMethodRepeat = mk \"spreadMethod\" \"repeat\"\r\n\r\n    /// Indicates that no attempt is made to achieve smooth transitions at the border of tiles which\r\n    /// contain a turbulence function.\r\n    ///\r\n    /// Sometimes the result will show clear discontinuities at the tile borders.\r\n    member _.stitchTilesNoStitch = mk \"stitchTiles\" \"noStitch\"\r\n    /// Indicates that the user agent will automatically adjust the x and y values of the base\r\n    /// frequency such that the <feTurbulence> node’s width and height (i.e., the width and\r\n    /// height of the current subregion) contain an integral number of the tile width and height\r\n    /// for the first octave.\r\n    member _.stitchTilesStitch = mk \"stitchTiles\" \"stitch\"\r\n\r\n    /// Opens the linked document in a new window or tab.\r\n    member _.targetBlank = mk \"target\" \"_blank\"\r\n    /// Opens the linked document in the parent frame.\r\n    member _.targetParent = mk \"target\" \"_parent\"\r\n    /// Opens the linked document in the same frame as it was clicked (this is default).\r\n    member _.targetSelf = mk \"target\" \"_self\"\r\n    /// Opens the linked document in the full body of the window.\r\n    member _.targetTop = mk \"target\" \"_top\"\r\n\r\n    /// The rendered characters are shifted such that the end of the\r\n    /// resulting rendered text (final current text position before applying\r\n    /// the `text-anchor` property) is at the initial current text position.\r\n    /// For an element with a `direction` property value of `ltr` (typical\r\n    /// for most European languages), the right side of the text is rendered\r\n    /// at the initial text position. For an element with a `direction`\r\n    /// property value of `rtl` (typical for Arabic and Hebrew), the left\r\n    /// side of the text is rendered at the initial text position. For an\r\n    /// element with a vertical primary text direction (often typical for\r\n    /// Asian text), the bottom of the text is rendered at the initial text\r\n    /// position.\r\n    member _.textAnchorEndOfText = mk \"text-anchor\" \"end\"\r\n    /// The rendered characters are aligned such that the middle of the text\r\n    /// string is at the current text position. (For text on a path,\r\n    /// conceptually the text string is first laid out in a straight line.\r\n    /// The midpoint between the start of the text string and the end of the\r\n    /// text string is determined. Then, the text string is mapped onto the\r\n    /// path with this midpoint placed at the current text position.)\r\n    member _.textAnchorMiddle = mk \"text-anchor\" \"middle\"\r\n    /// The rendered characters are aligned such that the start of the text\r\n    /// string is at the initial current text position. For an element with\r\n    /// a `direction` property value of `ltr` (typical for most European\r\n    /// languages), the left side of the text is rendered at the initial\r\n    /// text position. For an element with a `direction` property value of\r\n    /// `rtl` (typical for Arabic and Hebrew), the right side of the text is\r\n    /// rendered at the initial text position. For an element with a\r\n    /// vertical primary text direction (often typical for Asian text), the\r\n    /// top side of the text is rendered at the initial text position.\r\n    member _.textAnchorStartOfText = mk \"text-anchor\" \"start\"\r\n\r\n    /// Defines a clickable button (mostly used with a JavaScript code to activate a script)\r\n    member _.typeButton = mk \"type\" \"button\"\r\n    /// Defines a checkbox\r\n    member _.typeCheckbox = mk \"type\" \"checkbox\"\r\n    /// Defines a color picker\r\n    member _.typeColor = mk \"type\" \"color\"\r\n    /// Defines a date control with year, month and day (no time)\r\n    member _.typeDate = mk \"type\" \"date\"\r\n    /// Defines a date and time control (year, month, day, time (no timezone)\r\n    member _.typeDateTimeLocal = mk \"type\" \"datetime-local\"\r\n    /// Defines a field for an e-mail address\r\n    member _.typeEmail = mk \"type\" \"email\"\r\n    /// Defines a file-select field and mk \"Browse\" button (for file uploads)\r\n    member _.typeFile = mk \"type\" \"file\"\r\n    /// Defines a hidden input field\r\n    member _.typeHidden = mk \"type\" \"hidden\"\r\n    /// Defines an image as the submit button\r\n    member _.typeImage = mk \"type\" \"image\"\r\n    /// Defines a month and year control (no timezone)\r\n    member _.typeMonth = mk \"type\" \"month\"\r\n    /// Defines a field for entering a number\r\n    member _.typeNumber = mk \"type\" \"number\"\r\n    /// Defines a password field\r\n    member _.typePassword = mk \"type\" \"password\"\r\n    /// Defines a radio button\r\n    member _.typeRadio = mk \"type\" \"radio\"\r\n    /// Defines a range control (like a slider control)\r\n    member _.typeRange = mk \"type\" \"range\"\r\n    /// Defines a reset button\r\n    member _.typeReset = mk \"type\" \"reset\"\r\n    /// Defines a text field for entering a search string\r\n    member _.typeSearch = mk \"type\" \"search\"\r\n    /// Defines a submit button\r\n    member _.typeSubmit = mk \"type\" \"submit\"\r\n    /// Defines a field for entering a telephone number\r\n    member _.typeTel = mk \"type\" \"tel\"\r\n    /// Default. Defines a single-line text field\r\n    member _.typeText = mk \"type\" \"text\"\r\n    /// Defines a control for entering a time (no timezone)\r\n    member _.typeTime = mk \"type\" \"time\"\r\n    /// Defines a field for entering a URL\r\n    member _.typeUrl = mk \"type\" \"url\"\r\n    /// Defines a week and year control (no timezone)\r\n    member _.typeWeek = mk \"type\" \"week\"\r\n\r\n    /// The browser ensures that all line breaks in the value consist of a CR+LF pair,\r\n    /// but does not insert any additional line breaks.\r\n    member _.wrapSoft = mk \"wrap\" \"soft\"\r\n    /// The browser automatically inserts line breaks (CR+LF)\r\n    /// so that each line has no more than the width of the control;\r\n    /// the cols attribute must also be specified for this to take effect.\r\n    member _.wrapHard = mk \"wrap\" \"hard\"\r\n    /// Like soft but changes appearance to white-space: pre\r\n    /// so line segments exceeding cols are not wrapped and the `<textarea>` becomes horizontally scrollable.\r\n    /// WARNING: This API has not been standardized.\r\n    member _.wrapOff = mk \"wrap\" \"off\"\r\n\r\n    /// Specifies that the alpha channel of the input image defined in in2 will be used to displace\r\n    /// the pixels of the input image defined in in along the x-axis.\r\n    member _.xChannelSelectorA = mk \"xChannelSelector\" \"A\"\r\n    /// Specifies that the blue color channel of the input image defined in in2 will be used to\r\n    /// displace the pixels of the input image defined in in along the x-axis.\r\n    member _.xChannelSelectorB = mk \"xChannelSelector\" \"B\"\r\n    /// Specifies that the green color channel of the input image defined in in2 will be used to\r\n    /// displace the pixels of the input image defined in in along the x-axis.\r\n    member _.xChannelSelectorG = mk \"xChannelSelector\" \"G\"\r\n    /// Specifies that the red color channel of the input image defined in in2 will be used to\r\n    /// displace the pixels of the input image defined in in along the x-axis.\r\n    member _.xChannelSelectorR = mk \"xChannelSelector\" \"R\"\r\n\r\n    /// Specifies that the alpha channel of the input image defined in in2 will be used to displace\r\n    /// the pixels of the input image defined in in along the y-axis.\r\n    member _.yChannelSelectorA = mk \"yChannelSelector\" \"A\"\r\n    /// Specifies that the blue color channel of the input image defined in in2 will be used to\r\n    /// displace the pixels of the input image defined in in along the y-axis.\r\n    member _.yChannelSelectorB = mk \"yChannelSelector\" \"B\"\r\n    /// Specifies that the green color channel of the input image defined in in2 will be used to\r\n    /// displace the pixels of the input image defined in in along the y-axis.\r\n    member _.yChannelSelectorG = mk \"yChannelSelector\" \"G\"\r\n    /// Specifies that the red color channel of the input image defined in in2 will be used to\r\n    /// displace the pixels of the input image defined in in along the y-axis.\r\n    member _.yChannelSelectorR = mk \"yChannelSelector\" \"R\"\r\n","module Sutil.Attr\n\nopen DOM\nopen Browser.Types\nopen Fable.Core.JsInterop\n\nlet autofocus : SutilElement =\n    nodeFactory <| fun ctx ->\n        let e = ctx.Parent\n        DOM.rafu (fun _ ->\n            e?focus()\n            e?setSelectionRange(99999,99999)\n            )\n        unitResult(ctx, \"autofocus\")\n\n// Attributes that are either keywords or core functions\nlet id' n          = attr(\"id\",n)\nlet type' n        = attr(\"type\",n)\nlet for' n         = attr(\"for\",n)\nlet class' n       = attr(\"class\",n)\nlet unclass n      = attr(\"class-\", n)\nlet unclass' n     = attr(\"class-\", n)\n\nlet style (cssAttrs: (string * obj) seq) =\n    attr(\"style\", cssAttrs |> Seq.map (fun (n,v) -> $\"{n}: {v};\") |> String.concat \"\")\n\nlet styleAppend (cssAttrs: (string * obj) seq) =\n    attr(\"style+\", cssAttrs |> Seq.map (fun (n,v) -> $\"{n}: {v};\") |> String.concat \"\")\n\n// Events\n\ntype EventModifier =\n    | Once\n    | PreventDefault\n    | StopPropagation\n    | StopImmediatePropagation\n\nlet on (event : string) (fn : Event -> unit) (options : EventModifier list) = nodeFactory <| fun ctx ->\n    let el = ctx.ParentNode\n    let rec h (e:Event) =\n        for opt in options do\n            match opt with\n            | Once -> el.removeEventListener(event,h)\n            | PreventDefault -> e.preventDefault()\n            | StopPropagation -> e.stopPropagation()\n            | StopImmediatePropagation -> e.stopImmediatePropagation()\n        fn(e)\n    el.addEventListener(event, h)\n    unitResult(ctx, \"on\")\n\nlet onCustomEvent<'T> (event: string) (fn: CustomEvent<'T> -> unit) (options: EventModifier list) =\n    on event (unbox fn) options\nlet onKeyboard event (fn : KeyboardEvent -> unit) options =\n    on event (unbox fn) options\n\nlet onMouse event (fn : MouseEvent -> unit) options =\n    on event (unbox fn) options\n\nlet asElement<'T when 'T :> Node> (target:EventTarget) : 'T = (target :?> 'T)\n\nlet inline private _event x = (x :> obj :?> Event)\n\ntype InputEvent() =\n    member x.event = _event x\n    member x.inputElement =\n        let _event x = (x :> obj :?> Event)\n        asElement<HTMLInputElement> (_event x).target\n\nlet onInput (fn : InputEvent -> unit) options =\n    on \"input\" (unbox fn) options\n\nlet onClick fn options = on \"click\" fn options\n\nlet onMount fn options = on Event.Mount fn options\nlet onUnmount fn options = on Event.Unmount fn options\nlet onShow fn options = on Event.Show fn options\nlet onHide fn options = on Event.Hide fn options\n\nlet onKeyDown (fn : (KeyboardEvent -> unit)) options  = onKeyboard \"keydown\" fn options\nlet onMouseMove fn options  = onMouse \"mousemove\" fn options\n\nlet subscribeOnMount (f : unit -> (unit -> unit)) = onMount (fun e -> SutilNode.RegisterUnsubscribe(asElement<Node>(e.target),f())) [Once]\n\n","[<AutoOpen>]\nmodule Sutil.Html\n\nopen Sutil.DOM\nopen Feliz\nopen System\n\n// Dummy type to avoid problems with overload resolution in HtmlEngine\ntype [<Fable.Core.Erase>] NodeAttr = NodeAttr of SutilElement\n\ntype SutilEventEngine() as this =\n    inherit EventEngine<SutilElement>( fun (event:string) handler -> Sutil.Attr.on (event.ToLower()) handler [] )\n\n\ntype SutilHtmlEngine() as this =\n    inherit HtmlEngine<SutilElement>( el, text, (fun () -> fragment []) )\n    member _.app (xs : seq<SutilElement>) : SutilElement = fragment xs\n    member _.body (xs: seq<SutilElement>) = nodeFactory <| fun ctx ->\n        ctx |> ContextHelpers.withParent (DomNode ctx.Document.body) |> buildChildren xs\n        unitResult(ctx,\"body\")\n\n    member _.parent (selector:string) (xs: seq<SutilElement>) = nodeFactory <| fun ctx ->\n        ctx |> ContextHelpers.withParent (DomNode (ctx.Document.querySelector selector)) |> buildChildren xs\n        unitResult(ctx,\"parent\")\n\n    member _.text (v : IObservable<string>) = Bind.el (v |> Store.distinct, DOM.text)\n    member _.text (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, DOM.text)\n    member _.text (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, DOM.text)\n\n    member _.td (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.td)\n    member _.td (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.td)\n    member _.td (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.td)\n\n    member _.span (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.span)\n    member _.span (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.span)\n    member _.span (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.span)\n\n    member _.h1 (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.h1)\n    member _.h1 (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.h1)\n    member _.h1 (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.h1)\n\n    member _.h2 (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.h2)\n    member _.h2 (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.h2)\n    member _.h2 (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.h2)\n\n    member _.h3 (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.h3)\n    member _.h3 (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.h3)\n    member _.h3 (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.h3)\n\n    member _.h4 (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.h4)\n    member _.h4 (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.h4)\n    member _.h4 (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.h4)\n\n    member _.h5 (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.h5)\n    member _.h5 (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.h5)\n    member _.h5 (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.h5)\n\n    member _.h6 (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.h6)\n    member _.h6 (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.h6)\n    member _.h6 (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.h6)\n\n    member _.div (v : IObservable<string>) = Bind.el (v |> Store.distinct, this.div)\n    member _.div (v : IObservable<int>) = Bind.el (v .> string |> Store.distinct, this.div)\n    member _.div (v : IObservable<float>) = Bind.el (v  .> string |> Store.distinct, this.div)\n\n    member _.fragment (v : IObservable<SutilElement>) = Bind.el(v,id)\n\ntype SutilAttrEngine() =\n    inherit AttrEngine<SutilElement>((fun key value -> attr(key, value)),\n                                    (fun key value -> attr(key, value)))\n\n    member _.disabled<'T> (value: IObservable<'T>) = bindAttrIn \"disabled\" value\n\n    member _.value(value:obj)   = attr(\"value\",value)\n    member _.value(value:int)   = attr(\"value\",value)\n    member _.value(value:float) = attr(\"value\",value)\n    member _.value(value:bool)  = attr(\"value\",value)\n\n    member _.value<'T> (value: IObservable<'T>) = bindAttrIn \"value\" value\n    member _.value<'T> (value: IObservable<'T>, dispatch: 'T -> unit) =\n            bindAttrBoth \"value\" value dispatch\n\n    member _.style (cssAttrs : (string*obj) seq) = cssAttrs |> Sutil.Attr.style\n    member _.styleAppend (cssAttrs : (string*obj) seq) = cssAttrs |> Sutil.Attr.styleAppend\n    member _.style (cssAttrs : IObservable< #seq<string*obj> >) = Bind.style cssAttrs\n\n    member _.none = nodeFactory <| fun ctx -> unitResult(ctx,\"none\")\n\n\nlet Html = SutilHtmlEngine()\n\nlet Attr = SutilAttrEngine()\n\nlet Ev = SutilEventEngine()\n\nlet Css =  CssEngine(fun k v -> k, box v)\n\nlet cssAttr = id\nlet addClass       (n:obj) = cssAttr(\"sutil-add-class\",n)\nlet useGlobal              = cssAttr(\"sutil-use-global\",\"\" :> obj)\n\ntype Media() =\n    static member Custom (condition : string) rules = makeMediaRule condition rules\n    static member MinWidth (minWidth : Styles.ICssUnit, rules : StyleSheetDefinition list) = makeMediaRule (sprintf \"(min-width: %s)\" (string minWidth)) rules\n    static member MaxWidth (maxWidth : Styles.ICssUnit, rules : StyleSheetDefinition list) = makeMediaRule (sprintf \"(max-width: %s)\" (string maxWidth)) rules\n\n// Convenience\nlet text s = DOM.text s\n\n","namespace SutilExt\r\n\r\nopen Sutil\r\n\r\n[<AutoOpen>]\r\nmodule Operator =\r\n  let (=/=|>) a b = a |> Store.distinct |> b\r\n  let (|=/=>) a b = a |> Store.distinct |=> b\r\n  let (.>=/=>) a b = a |> Store.distinct .> b\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Bind =\r\n  let reactElement(obs, reactElementFun) =\r\n    fun v -> DOM.host( fun el -> Fable.React.ReactDomBindings.ReactDom.render(reactElementFun v, el))\r\n    |> bindElement obs\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Cmd =\r\n  let private delay interval callback =\r\n    let t = new System.Timers.Timer(interval, AutoReset = false)\r\n    t.Elapsed.Add callback\r\n    t.Enabled <- true\r\n    t.Start()\r\n\r\n  let ofMsgDelayed t msg =\r\n    [ fun d -> delay t (fun _ -> d msg) ]\r\n\r\n  let ups messageCtor =\r\n    let handler dispatch =\r\n      Interop.Window.addEventListener(\"mouseup\", fun _ ->\r\n        dispatch messageCtor)\r\n    [ handler ]\r\n\r\n  let move messageCtor =\r\n    let handler dispatch =\r\n      Interop.Window.addEventListener(\"mousemove\", fun ev ->\r\n        ev :?> Browser.Types.MouseEvent\r\n        |> messageCtor\r\n        |> dispatch)\r\n    [ handler ]\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule HtmlExt =\r\n  let recDivClass classNames content =\r\n    let rec inner cs elt =\r\n      match cs with\r\n      | [] -> elt\r\n      | c :: rest -> inner rest (Html.div [ Attr.className (c : string); elt ])\r\n    inner (List.rev classNames) (content |> DOM.fragment)\r\n\r\n\r\ntype IVirtualStore<'T> =\r\n  interface\r\n      inherit IStore<'T>\r\n      abstract member UpdateCallback: ('T -> unit)\r\n  end\r\n\r\ntype VirtualStore<'T> = IVirtualStore<'T>\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule VirtualStore =\r\n  open System\r\n\r\n  type VirtualStore<'T, 'Model when 'T: equality>(\r\n    name,\r\n    initialModel: 'Model,\r\n    obs: IObservable<'Model>,\r\n    f: 'Model -> 'T,\r\n    updateCallback: 'T -> unit\r\n    ) as self\r\n    =\r\n    let mutable uid = 0\r\n    let mutable _value = f initialModel\r\n    let mutable _name = name\r\n    let subscribers = Collections.Generic.Dictionary<_, IObserver<'T>>()\r\n    let subDisposable = obs.Subscribe self.ProcessNewModel\r\n\r\n    override _.ToString() = $\"#VirtualStore={_value}\"\r\n\r\n    member _.Value = _value\r\n\r\n    member this.Name with get() = _name and set (v) = _name <- v\r\n\r\n    member _.UpdateCallback = updateCallback\r\n\r\n    member _.Update(f: 'T -> 'T) =\r\n        let newValue = f _value\r\n        newValue |> updateCallback\r\n\r\n    member private _.ProcessNewModel(model: 'Model) =\r\n        let newValue = f model\r\n\r\n        // Send every update. Use 'distinctUntilChanged' with fastEquals to get previous behaviour\r\n        // Fable.Core.JS.console.log($\"Update {model}, {_value} -> {newValue}\")\r\n        if newValue <> _value then\r\n            _value <- newValue\r\n            if subscribers.Count > 0 then\r\n                subscribers.Values\r\n                    |> Seq.iter (fun s -> s.OnNext(_value))\r\n\r\n    member _.Subscribe(observer: IObserver<'T>): IDisposable =\r\n        let id = uid\r\n        uid <- uid + 1\r\n\r\n        Logging.log \"store\" $\"subscribe {id}\"\r\n\r\n        subscribers.Add(id, observer)\r\n\r\n        // TODO: Is this the right way to report the model to the subscriber immediately?\r\n        //Fable.Core.JS.setTimeout (fun _ -> observer.OnNext(model)) 0 |> ignore\r\n\r\n        // Sutil depends on an immediate callback\r\n        observer.OnNext(_value)\r\n\r\n        Helpers.disposable <| fun () ->\r\n            Logging.log \"store\" $\"unsubscribe {id}\"\r\n            subscribers.Remove(id) |> ignore\r\n\r\n    member this.Dispose() =\r\n        subscribers.Values |> Seq.iter (fun x -> x.OnCompleted())\r\n        subscribers.Clear()\r\n        _value <- Unchecked.defaultof<_>\r\n        subDisposable.Dispose()\r\n\r\n    interface IVirtualStore<'T> with\r\n        member this.Subscribe(observer: IObserver<'T>) = this.Subscribe(observer)\r\n        member this.Value = this.Value\r\n        member this.Update(f) = this.Update(f)\r\n        member this.UpdateCallback = this.UpdateCallback\r\n        member this.Debugger = {\r\n            new IStoreDebugger with\r\n                member _.Value = upcast this.Value\r\n                member _.NumSubscribers = subscribers.Count }\r\n        member this.Dispose() = this.Dispose()\r\n        member this.Name with get() = this.Name and set (v:string) = this.Name <- v\r\n\r\n  let ofStore (f: 'Model -> 'T) (callback: 'T -> unit) (store: Store<'Model>): IVirtualStore<'T> =\r\n    new VirtualStore<'T, 'Model>($\"Virtual-{store.Name}\", store.Value, store, f, callback)\r\n\r\n  let map (f: 'T -> 'U, invF: 'U -> 'T) (vStore: IVirtualStore<'T>): IVirtualStore<'U> =\r\n      new VirtualStore<'U, _>($\"Virtual-{vStore.Name}\", vStore.Value, vStore, f, invF >> vStore.UpdateCallback)\r\n","import Event from \"./Event.js\";\nexport class Timer {\n    constructor(interval) {\n        this._enabled = false;\n        this._isDisposed = false;\n        this._intervalId = 0;\n        this._timeoutId = 0;\n        this.Interval = interval && interval > 0 ? interval : 100;\n        this.AutoReset = true;\n        this._elapsed = new Event();\n    }\n    Elapsed() {\n        return this._elapsed;\n    }\n    get Enabled() {\n        return this._enabled;\n    }\n    set Enabled(x) {\n        if (!this._isDisposed && this._enabled !== x) {\n            this._enabled = x;\n            if (this._enabled) {\n                if (this.AutoReset) {\n                    this._intervalId = setInterval(() => {\n                        if (!this.AutoReset) {\n                            this.Enabled = false;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n                else {\n                    this._timeoutId = setTimeout(() => {\n                        this.Enabled = false;\n                        this._timeoutId = 0;\n                        if (this.AutoReset) {\n                            this.Enabled = true;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n            }\n            else {\n                if (this._timeoutId) {\n                    clearTimeout(this._timeoutId);\n                    this._timeoutId = 0;\n                }\n                if (this._intervalId) {\n                    clearInterval(this._intervalId);\n                    this._intervalId = 0;\n                }\n            }\n        }\n    }\n    Dispose() {\n        this.Enabled = false;\n        this._isDisposed = true;\n    }\n    Close() {\n        this.Dispose();\n    }\n    Start() {\n        this.Enabled = true;\n    }\n    Stop() {\n        this.Enabled = false;\n    }\n}\nexport default Timer;\n","﻿namespace Feliz\r\n\r\nopen System\r\nopen Browser.Types\r\n\r\nmodule internal Util =\r\n#if FABLE_COMPILER\r\n    let inline cast<'Ev when 'Ev :> Event> (f: 'Ev -> unit): Event -> unit = unbox f\r\n#else\r\n    let cast<'Ev when 'Ev :> Event> (f: 'Ev -> unit): Event -> unit = fun (ev: Event) -> f (ev :?> 'Ev)\r\n#endif\r\n\r\ntype EventEngine<'Node>\r\n    /// <summary>Customizable HTML Event generator API.</summary>\r\n    ///\r\n    /// <param name=\"mk\">Make a node with event name and handler.</param>\r\n    (mk: string -> (Event -> unit) -> 'Node) =\r\n\r\n    /// Fires when a media event is aborted.\r\n    member _.onAbort (handler: Event -> unit) = mk \"abort\" handler\r\n\r\n    /// Fires when animation is aborted.\r\n    member _.onAnimationCancel (handler: AnimationEvent -> unit) = mk \"animationCancel\" (Util.cast handler)\r\n\r\n    /// Fires when animation ends.\r\n    member _.onAnimationEnd (handler: AnimationEvent -> unit) = mk \"animationEnd\" (Util.cast handler)\r\n\r\n    /// Fires when animation iterates.\r\n    member _.onAnimationIteration (handler: AnimationEvent -> unit) = mk \"animationIteration\" (Util.cast handler)\r\n\r\n    /// Fires when animation starts.\r\n    member _.onAnimationStart (handler: AnimationEvent -> unit) = mk \"animationStart\" (Util.cast handler)\r\n\r\n    /// Fires the moment that the element loses focus.\r\n    member _.onBlur (handler: FocusEvent -> unit) = mk \"blur\" (Util.cast handler)\r\n\r\n    /// Fires when a user dismisses the current open dialog\r\n    member _.onCancel (handler: Event -> unit) = mk \"cancel\" handler\r\n\r\n    /// Fires when a file is ready to start playing (when it has buffered enough to begin).\r\n    member _.onCanPlay (handler: Event -> unit) = mk \"canPlay\" handler\r\n\r\n    /// Fires when a file can be played all the way to the end without pausing for buffering\r\n    member _.onCanPlayThrough (handler: Event -> unit) = mk \"canPlayThrough\" handler\r\n\r\n    /// Fires the moment when the value of the element is changed\r\n    member _.onChange (handler: Event -> unit) = mk \"change\"  handler\r\n\r\n    /// Same as `onChange` that takes an event as input but instead let's you deal with the `checked` value changed from the `input` element\r\n    /// directly when it is defined as a checkbox with attribute `inputType.checkbox`.\r\n    member _.onChange (handler: bool -> unit) =\r\n        let handler (ev: Event) =\r\n            let el = ev.target :?> HTMLInputElement\r\n            handler el.``checked``\r\n        mk \"change\" handler\r\n\r\n    /// Same as `onChange` that takes an event as input but instead lets you deal with the selected file directly from the `input` element when it is defined as a checkbox with `prop.type'.file`.\r\n    member _.onChange (handler: File -> unit) =\r\n        let fileHandler (ev: Event) : unit =\r\n            let el = ev.target :?> HTMLInputElement\r\n            let files : FileList = el.files\r\n            if not (isNull files) && files.length > 0 then handler (files.item 0)\r\n        mk \"change\" fileHandler\r\n\r\n    /// Same as `onChange` that takes an event as input but instead lets you deal with the selected files directly from the `input` element when it is defined as a checkbox with `prop.type'.file` and `prop.multiple true`.\r\n    member _.onChange (handler: File list -> unit) =\r\n        let fileHandler (ev: Event) : unit =\r\n            let el = ev.target :?> HTMLInputElement\r\n            let fileList : FileList = el.files\r\n            if not (isNull fileList) then handler [ for i in 0 .. fileList.length - 1 -> fileList.item i ]\r\n        mk \"change\" fileHandler\r\n\r\n    /// Same as `onChange` that takes an event as input but instead let's you deal with the text changed from the `input` element directly\r\n    /// instead of extracting it from the event arguments.\r\n    member _.onChange (handler: string -> unit) =\r\n        let handler (ev: Event) =\r\n            let el = ev.target :?> HTMLInputElement\r\n            handler el.value\r\n        mk \"change\" handler\r\n\r\n    /// Same as `onChange` but let's you deal with the `checked` value that has changed from the `input` element directly instead of extracting it from the event arguments.\r\n    member _.onCheckedChange (handler: bool -> unit) =\r\n        let handler (ev: Event) =\r\n            let el = ev.target :?> HTMLInputElement\r\n            handler el.``checked``\r\n        mk \"change\" handler\r\n\r\n    /// Fires on a mouse click on the element.\r\n    member _.onClick (handler: MouseEvent -> unit) = mk \"click\" (Util.cast handler)\r\n\r\n    /// Fires when composition ends.\r\n    member _.onCompositionEnd (handler: CompositionEvent -> unit) = mk \"compositionEnd\" (Util.cast handler)\r\n\r\n    /// Fires when composition starts.\r\n    member _.onCompositionStart (handler: CompositionEvent -> unit) = mk \"compositionStart\" (Util.cast handler)\r\n\r\n    /// Fires when composition changes.\r\n    member _.onCompositionUpdate (handler: CompositionEvent -> unit) = mk \"compositionUpdate\" (Util.cast handler)\r\n\r\n    /// Fires when a context menu is triggered.\r\n    member _.onContextMenu (handler: MouseEvent -> unit) = mk \"contextMenu\" (Util.cast handler)\r\n\r\n    /// Fires when a TextTrack has changed the currently displaying cues.\r\n    member _.onCueChange (handler: Event -> unit) = mk \"cueChange\" handler\r\n\r\n        /// Fires when the user copies the content of an element.\r\n    member _.onCopy (handler: ClipboardEvent -> unit) = mk \"copy\" (Util.cast handler)\r\n\r\n    /// Fires when the user cuts the content of an element.\r\n    member _.onCut (handler: ClipboardEvent -> unit) = mk \"cut\" (Util.cast handler)\r\n\r\n    /// Fires when a mouse is double clicked on the element.\r\n    member _.onDblClick (handler: MouseEvent -> unit) = mk \"dblClick\" (Util.cast handler)\r\n\r\n    /// Fires when an element is dragged.\r\n    member _.onDrag (handler: DragEvent -> unit) = mk \"drag\" (Util.cast handler)\r\n\r\n    /// Fires when the a drag operation has ended.\r\n    member _.onDragEnd (handler: DragEvent -> unit) = mk \"dragEnd\" (Util.cast handler)\r\n\r\n    /// Fires when an element has been dragged to a valid drop target.\r\n    member _.onDragEnter (handler: DragEvent -> unit) = mk \"dragEnter\" (Util.cast handler)\r\n\r\n    member _.onDragExit (handler: DragEvent -> unit) = mk \"dragExit\" (Util.cast handler)\r\n\r\n    /// Fires when an element leaves a valid drop target.\r\n    member _.onDragLeave (handler: DragEvent -> unit) = mk \"dragLeave\" (Util.cast handler)\r\n\r\n    /// Fires when an element is being dragged over a valid drop target.\r\n    member _.onDragOver (handler: DragEvent -> unit) = mk \"dragOver\" (Util.cast handler)\r\n\r\n    /// Fires when the a drag operation has begun.\r\n    member _.onDragStart (handler: DragEvent -> unit) = mk \"dragStart\" (Util.cast handler)\r\n\r\n    /// Fires when dragged element is being dropped.\r\n    member _.onDrop (handler: DragEvent -> unit) = mk \"drop\" (Util.cast handler)\r\n\r\n    /// Fires when the length of the media changes.\r\n    member _.onDurationChange (handler: Event -> unit) = mk \"durationChange\" handler\r\n\r\n    /// Fires when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).\r\n    member _.onEmptied (handler: Event -> unit) = mk \"emptied\" handler\r\n\r\n    member _.onEncrypted (handler: Event -> unit) = mk \"encrypted\" handler\r\n\r\n    /// Fires when the media has reached the end (a useful event for messages like \"thanks for listening\").\r\n    member _.onEnded (handler: Event -> unit) = mk \"ended\" handler\r\n\r\n    /// Fires when an error occurs.\r\n    member _.onError (handler: Event -> unit) = mk \"error\" handler\r\n\r\n    /// Fires when an error occurs.\r\n    member _.onError (handler: UIEvent -> unit) = mk \"error\" (Util.cast handler)\r\n\r\n    /// Fires the moment when the element gets focus.\r\n    member _.onFocus (handler: FocusEvent -> unit) = mk \"focus\" (Util.cast handler)\r\n\r\n    /// Fires when an element captures a pointer.\r\n    member _.onGotPointerCapture (handler: PointerEvent -> unit) = mk \"gotPointerCapture\" (Util.cast handler)\r\n\r\n    /// Fires when an element gets user input.\r\n    member _.onInput (handler: Event -> unit) = mk \"input\" handler\r\n\r\n    /// Fires when a submittable element has been checked for validaty and doesn't satisfy its constraints.\r\n    member _.onInvalid (handler: Event -> unit) = mk \"invalid\" handler\r\n\r\n    /// Fires when a user presses a key.\r\n    member _.onKeyDown (handler: KeyboardEvent -> unit) = mk \"keyDown\" (Util.cast handler)\r\n\r\n    /// Fires when a user presses a key.\r\n    // member _.onKeyDown (key: IKeyboardKey, handler: KeyboardEvent -> unit) =\r\n    //     PropHelpers.createOnKey(key, handler)\r\n    //     |> h.MakeEvent(\"keyDown\",)\r\n\r\n    /// Fires when a user presses a key.\r\n    member _.onKeyPress (handler: KeyboardEvent -> unit) = mk \"keyPress\" (Util.cast handler)\r\n\r\n    // /// Fires when a user presses a key.\r\n    // member _.onKeyPress (key: IKeyboardKey, handler: KeyboardEvent -> unit) =\r\n    //     PropHelpers.createOnKey(key, handler)\r\n    //     |> h.MakeEvent(\"keyPress\",)\r\n\r\n    /// Fires when a user releases a key.\r\n    member _.onKeyUp (handler: KeyboardEvent -> unit) = mk \"keyUp\" (Util.cast handler)\r\n\r\n    // /// Fires when a user releases a key.\r\n    // member _.onKeyUp (key: IKeyboardKey, handler: KeyboardEvent -> unit) =\r\n    //     PropHelpers.createOnKey(key, handler)\r\n    //     |> h.MakeEvent(\"keyUp\",)\r\n\r\n    /// Fires after the page is finished loading.\r\n    member _.onLoad (handler: Event -> unit) = mk \"load\" handler\r\n\r\n    /// Fires when media data is loaded.\r\n    member _.onLoadedData (handler: Event -> unit) = mk \"loadedData\" handler\r\n\r\n    /// Fires when meta data (like dimensions and duration) are loaded.\r\n    member _.onLoadedMetadata (handler: Event -> unit) = mk \"loadedMetadata\" handler\r\n\r\n    /// Fires when a request has completed, irrespective of its success.\r\n    member _.onLoadEnd (handler: Event -> unit) = mk \"loadEnd\" handler\r\n\r\n    /// Fires when the file begins to load before anything is actually loaded.\r\n    member _.onLoadStart (handler: Event -> unit) = mk \"loadStart\" handler\r\n\r\n    /// Fires when a captured pointer is released.\r\n    member _.onLostPointerCapture (handler: PointerEvent -> unit) = mk \"lostPointerCapture\" (Util.cast handler)\r\n\r\n    /// Fires when a mouse button is pressed down on an element.\r\n    member _.onMouseDown (handler: MouseEvent -> unit) = mk \"mouseDown\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer enters an element.\r\n    member _.onMouseEnter (handler: MouseEvent -> unit) = mk \"mouseEnter\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer leaves an element.\r\n    member _.onMouseLeave (handler: MouseEvent -> unit) = mk \"mouseLeave\" (Util.cast handler)\r\n\r\n    /// Fires when the mouse pointer is moving while it is over an element.\r\n    member _.onMouseMove (handler: MouseEvent -> unit) = mk \"mouseMove\" (Util.cast handler)\r\n\r\n    /// Fires when the mouse pointer moves out of an element.\r\n    member _.onMouseOut (handler: MouseEvent -> unit) = mk \"mouseOut\" (Util.cast handler)\r\n\r\n    /// Fires when the mouse pointer moves over an element.\r\n    member _.onMouseOver (handler: MouseEvent -> unit) = mk \"mouseOver\" (Util.cast handler)\r\n\r\n    /// Fires when a mouse button is released while it is over an element.\r\n    member _.onMouseUp (handler: MouseEvent -> unit) = mk \"mouseUp\" (Util.cast handler)\r\n\r\n    /// Fires when the user pastes some content in an element.\r\n    member _.onPaste (handler: ClipboardEvent -> unit) = mk \"paste\" (Util.cast handler)\r\n\r\n    /// Fires when the media is paused either by the user or programmatically.\r\n    member _.onPause (handler: Event -> unit) = mk \"pause\" handler\r\n\r\n    /// Fires when the media is ready to start playing.\r\n    member _.onPlay (handler: Event -> unit) = mk \"play\" handler\r\n\r\n    /// Fires when the media actually has started playing\r\n    member _.onPlaying (handler: Event -> unit) = mk \"playing\" handler\r\n\r\n    /// Fires when there are no more pointer events.\r\n    member _.onPointerCancel (handler: PointerEvent -> unit) = mk \"pointerCancel\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer becomes active.\r\n    member _.onPointerDown (handler: PointerEvent -> unit) = mk \"pointerDown\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer is moved into an elements boundaries or one of its descendants.\r\n    member _.onPointerEnter (handler: PointerEvent -> unit) = mk \"pointerEnter\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer is moved out of an elements boundaries.\r\n    member _.onPointerLeave (handler: PointerEvent -> unit) = mk \"pointerLeave\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer moves.\r\n    member _.onPointerMove (handler: PointerEvent -> unit) = mk \"pointerMove\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer is no longer in an elements boundaries, such as moving it, or after a `pointerUp` or `pointerCancel` event.\r\n    member _.onPointerOut (handler: PointerEvent -> unit) = mk \"pointerOut\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer is moved into an elements boundaries.\r\n    member _.onPointerOver (handler: PointerEvent -> unit) = mk \"pointerOver\" (Util.cast handler)\r\n\r\n    /// Fires when a pointer is no longer active.\r\n    member _.onPointerUp (handler: PointerEvent -> unit) = mk \"pointerUp\" (Util.cast handler)\r\n\r\n    /// Fires when the browser is in the process of getting the media data.\r\n    member _.onProgress (handler: Event -> unit) = mk \"progress\" handler\r\n\r\n    /// Fires when the playback rate changes (like when a user switches to a slow motion or fast forward mode).\r\n    member _.onRateChange (handler: Event -> unit) = mk \"rateChange\" handler\r\n\r\n    /// Fires when the Reset button in a form is clicked.\r\n    member _.onReset (handler: Event -> unit) = mk \"reset\" handler\r\n\r\n    /// Fires when the window has been resized.\r\n    member _.onResize (handler: UIEvent -> unit) = mk \"resize\" (Util.cast handler)\r\n\r\n    /// Fires when an element's scrollbar is being scrolled.\r\n    member _.onScroll (handler: Event -> unit) = mk \"scroll\" handler\r\n\r\n    /// Fires when the seeking attribute is set to false indicating that seeking has ended.\r\n    member _.onSeeked (handler: Event -> unit) = mk \"seeked\" handler\r\n\r\n    /// Fires when the seeking attribute is set to true indicating that seeking is active.\r\n    member _.onSeeking (handler: Event -> unit) = mk \"seeking\" handler\r\n\r\n    /// Fires after some text has been selected in an element.\r\n    member _.onSelect (handler: Event -> unit) = mk \"select\" handler\r\n\r\n    /// Fires after some text has been selected in the user interface.\r\n    member _.onSelect (handler: UIEvent -> unit) = mk \"select\" (Util.cast handler)\r\n\r\n    /// Fires when the browser is unable to fetch the media data for whatever reason.\r\n    member _.onStalled (handler: Event -> unit) = mk \"stalled\" handler\r\n\r\n    /// Fires when fetching the media data is stopped before it is completely loaded for whatever reason.\r\n    member _.onSuspend (handler: Event -> unit) = mk \"suspend\" handler\r\n\r\n    /// Fires when a form is submitted.\r\n    member _.onSubmit (handler: Event -> unit) = mk \"submit\" handler\r\n\r\n    /// Same as `onChange` but let's you deal with the text changed from the `input` element directly\r\n    /// instead of extracting it from the event arguments.\r\n    member _.onTextChange (handler: string -> unit) =\r\n        let handler (ev: Event) =\r\n            let el = ev.target :?> HTMLInputElement\r\n            handler el.value\r\n        mk \"change\" handler\r\n\r\n    /// Same as `onInput` but let's you deal with the text changed from the `input` element directly\r\n    /// instead of extracting it from the event arguments.\r\n    member _.onTextInput (handler: string -> unit) =\r\n        let handler (ev: Event) =\r\n            let el = ev.target :?> HTMLInputElement\r\n            handler el.value\r\n        mk \"input\" handler\r\n\r\n    /// Fires when the playing position has changed (like when the user fast forwards to a different point in the media).\r\n    member _.onTimeUpdate (handler: Event -> unit) = mk \"timeUpdate\" handler\r\n\r\n    member _.onTouchCancel (handler: TouchEvent -> unit) = mk \"touchCancel\" (Util.cast handler)\r\n\r\n    member _.onTouchEnd (handler: TouchEvent -> unit) = mk \"touchEnd\" (Util.cast handler)\r\n\r\n    member _.onTouchMove (handler: TouchEvent -> unit) = mk \"touchMove\" (Util.cast handler)\r\n\r\n    member _.onTouchStart (handler: TouchEvent -> unit) = mk \"touchStart\" (Util.cast handler)\r\n\r\n    member _.onTransitionEnd (handler: TransitionEvent -> unit) = mk \"transitionEnd\" (Util.cast handler)\r\n\r\n    /// Fires when the volume is changed which (includes setting the volume to \"mute\").\r\n    member _.onVolumeChange (handler: Event -> unit) = mk \"volumeChange\" handler\r\n\r\n    /// Fires when the media has paused but is expected to resume (like when the media pauses to buffer more data).\r\n    member _.onWaiting (handler: Event -> unit) = mk \"waiting\" handler\r\n\r\n    /// Fires when the mouse wheel rolls up or down over an element.\r\n    member _.onWheel (handler: WheelEvent -> unit) = mk \"wheel\" (Util.cast handler)\r\n","﻿namespace Feliz.Styles\r\n\r\ntype IBackgroundRepeat = abstract AsString: string\r\ntype IBorderStyle = abstract AsString: string\r\ntype ICssUnit = abstract AsString: string\r\ntype IGridSpan = abstract AsString: string\r\ntype IGridTemplateItem = abstract AsString: string\r\ntype ITextDecoration = abstract AsString: string\r\ntype ITextDecorationLine = abstract AsString: string\r\ntype ITransitionProperty = abstract AsString: string\r\ntype ITransformProperty = abstract AsString: string\r\n// type ITextAlignment = interface end\r\n// type IVisibility = interface end\r\n// type IPosition = interface end\r\n// type IAlignContent = interface end\r\n// type IAlignItems = interface end\r\n// type IAlignSelf = interface end\r\n// type IDisplay = interface end\r\n// type IFontStyle = interface end\r\n// type IFontVariant = interface end\r\n// type IFontWeight = interface end\r\n// type IFontStretch = interface end\r\n// type IFontKerning = interface end\r\n// type IOverflow = interface end\r\n// type IWordWrap = interface end\r\n// type IBackgroundClip = interface end\r\n\r\nnamespace Feliz\r\n\r\nopen System\r\nopen Feliz.Styles\r\n\r\ntype internal Util =\r\n    static member inline asString(x: string): string = x\r\n    static member inline asString(x: int): string = string x\r\n    static member inline asString(x: int option): string =\r\n        match x with Some x -> Util.asString x | None -> \"\"\r\n    static member inline asString(x: float): string = string x\r\n    static member inline asString(x: Guid): string = string x\r\n    static member inline asString< ^t when ^t : (member AsString: string)> (x: ^t): string =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        (^t : (member AsString: string) (x))\r\n#endif\r\n    static member inline asString< ^t when ^t : (member AsString: string)> (x: ^t option): string =\r\n        match x with Some x -> Util.asString x | None -> \"\"\r\n\r\n    static member inline newCssUnit(x: string): ICssUnit =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new ICssUnit with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newBorderStyle(x: string): IBorderStyle =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new IBorderStyle with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newGridSpan(x: string): IGridSpan =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new IGridSpan with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newGridTemplateItem(x: string): IGridTemplateItem =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new IGridTemplateItem with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newTextDecorationLine(x: string): ITextDecorationLine =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new ITextDecorationLine with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newTextDecoration(x: string): ITextDecoration =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new ITextDecoration with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newTransformProperty(x: string): ITransformProperty =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new ITransformProperty with member _.AsString = x }\r\n#endif\r\n\r\n    static member inline newTransitionProperty(x: string): ITransitionProperty =\r\n#if FABLE_COMPILER\r\n        unbox x\r\n#else\r\n        { new ITransitionProperty with member _.AsString = x }\r\n#endif\r\n\r\nopen type Util\r\n\r\ntype CssEngine<'Style>\r\n    /// <summary>Customizable CSS generator API.</summary>\r\n    ///\r\n    /// <param name=\"mk\">Make a style with property name and value.</param>\r\n    (mk: string -> string -> 'Style) =\r\n\r\n    /// Define a custom property\r\n    member _.custom(key: string, value: string) = mk key value\r\n\r\n    /// Specifies that all the element's properties should be changed to their initial values.\r\n    member _.allInitial = mk \"all\" \"initial\"\r\n    /// Specifies that all the element's properties should be changed to their inherited values.\r\n    member _.allInherit = mk \"all\" \"inherit\"\r\n    /// Specifies that all the element's properties should be changed to their inherited values if they inherit by default, or to their initial values if not.\r\n    member _.allUnset = mk \"all\" \"unset\"\r\n    /// Specifies behavior that depends on the stylesheet origin to which the declaration belongs:\r\n    ///\r\n    /// User-agent origin\r\n    ///     Equivalent to unset.\r\n    /// User origin\r\n    ///     Rolls back the cascade to the user-agent level, so that the specified values are calculated as if no author-level or user-level rules were specified for the element.\r\n    /// Author origin\r\n    ///     Rolls back the cascade to the user level, so that the specified values are calculated as if no author-level rules were specified for the element. For purposes of revert, the Author origin includes the Override and Animation origins.\r\n    member _.allRevert = mk \"all\" \"revert\"\r\n\r\n    member _.boxShadow(value: string) = mk \"box-shadow\" value\r\n\r\n    member _.boxShadow(horizontalOffset: int, verticalOffset: int, color: string) =\r\n        mk \"box-shadow\" (\r\n            (asString horizontalOffset) + \"px \" +\r\n            (asString verticalOffset) + \"px \" +\r\n            color\r\n        )\r\n    member _.boxShadow(horizontalOffset: int, verticalOffset: int, blur: int, color: string) =\r\n        mk \"box-shadow\" (\r\n            (asString horizontalOffset) + \"px \" +\r\n            (asString verticalOffset) + \"px \" +\r\n            (asString blur) + \"px \" +\r\n            color\r\n        )\r\n    member _.boxShadow(horizontalOffset: int, verticalOffset: int, blur: int, spread: int, color: string) =\r\n        mk \"box-shadow\" (\r\n            (asString horizontalOffset) + \"px \" +\r\n            (asString verticalOffset) + \"px \" +\r\n            (asString blur) + \"px \" +\r\n            (asString spread) + \"px \" +\r\n            color\r\n        )\r\n    member _.boxShadowNone = mk \"box-shadow\" \"none\"\r\n    /// Inherits this property from its parent element.\r\n    member _.boxShadowInheritFromParent = mk \"box-shadow\" \"inherit\"\r\n\r\n    member _.height(value: int) = mk \"height\" (asString value + \"px\")\r\n    member _.height(value: ICssUnit) = mk \"height\" (asString value)\r\n    /// Inherits this property from its parent element.\r\n    member _.heightInheritFromParent = mk \"height\" \"inherit\"\r\n    /// Sets this property to its default value.\r\n    member _.heightInitial = mk \"height\" \"initial\"\r\n    /// The intrinsic preferred height.\r\n    member _.heightMaxContent = mk \"height\" \"max-content\"\r\n    /// The intrinsic minimum height.\r\n    member _.heightMinContent = mk \"height\" \"min-content\"\r\n\r\n    member _.maxHeight(value: int) = mk \"max-height\" (asString value + \"px\")\r\n    member _.maxHeight(value: ICssUnit) = mk \"max-height\" (asString value)\r\n    /// Inherits this property from its parent element.\r\n    member _.maxHeightInheritFromParent = mk \"max-height\" \"inherit\"\r\n    /// Sets this property to its default value.\r\n    member _.maxHeightInitial = mk \"max-height\" \"initial\"\r\n    /// The intrinsic preferred height.\r\n    member _.maxHeightMaxContent = mk \"height\" \"max-content\"\r\n    /// The intrinsic minimum height.\r\n    member _.maxHeightMinContent = mk \"height\" \"min-content\"\r\n\r\n    member _.minHeight(value: int) = mk \"min-height\" (asString value + \"px\")\r\n    member _.minHeight(value: ICssUnit) = mk \"min-height\" (asString value)\r\n    /// Inherits this property from its parent element.\r\n    member _.minHeightInheritFromParent = mk \"min-height\" \"inherit\"\r\n    /// Sets this property to its default value.\r\n    member _.minHeightInitial = mk \"min-height\" \"initial\"\r\n    /// The intrinsic preferred height.\r\n    member _.minHeightMaxContent = mk \"height\" \"max-content\"\r\n    /// The intrinsic minimum height.\r\n    member _.minHeightMinContent = mk \"height\" \"min-content\"\r\n\r\n    /// The browser determines the justification algorithm\r\n    member _.textJustifyAuto = mk \"text-justify\" \"auto\"\r\n    /// Increases/Decreases the space between words\r\n    member _.textJustifyInterWord = mk \"text-justify\" \"inter-word\"\r\n    /// Increases/Decreases the space between characters\r\n    member _.textJustifyInterCharacter = mk \"text-justify\" \"inter-character\"\r\n    /// Disables justification methods\r\n    member _.textJustifyNone = mk \"text-justify\" \"none\"\r\n    member _.textJustifyInitial = mk \"text-justify\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.textJustifyInheritFromParent = mk \"text-justify\" \"inherit\"\r\n\r\n    /// Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary. This is default.\r\n    member _. whiteSpaceNormal = mk \"white-space\" \"normal\"\r\n    /// Sequences of whitespace will collapse into a single whitespace. Text will never wrap to the next line.\r\n    /// The text continues on the same line until a `<br> ` tag is encountered.\r\n    member _. whiteSpaceNowrap = mk \"white-space\" \"nowrap\"\r\n    /// Whitespace is preserved by the browser. Text will only wrap on line breaks. Acts like the <pre> tag in HTML.\r\n    member _. whiteSpacePre = mk \"white-space\" \"pre\"\r\n    /// Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary, and on line breaks\r\n    member _. whiteSpacePreLine = mk \"white-space\" \"pre-line\"\r\n    /// Whitespace is preserved by the browser. Text will wrap when necessary, and on line breaks\r\n    member _. whiteSpacePreWrap = mk \"white-space\" \"pre-wrap\"\r\n    /// Sets this property to its default value.\r\n    member _. whiteSpaceInitial = mk \"white-space\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _. whiteSpaceInheritFromParent = mk \"white-space\" \"inherit\"\r\n\r\n    /// Default value. Uses default line break rules.\r\n    member _.wordbreakNormal = mk \"word-break\" \"normal\"\r\n    /// To prevent overflow, word may be broken at any character\r\n    member _.wordbreakBreakAll = mk \"word-break\" \"break-all\"\r\n    /// Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as value \"normal\"\r\n    member _.wordbreakKeepAll = mk \"word-break\" \"keep-all\"\r\n    /// To prevent overflow, word may be broken at arbitrary points.\r\n    member _.wordbreakBreakWord = mk \"word-break\" \"break-word\"\r\n    /// Sets this property to its default value.\r\n    member _.wordbreakInitial = mk \"word-break\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.wordbreakInheritFromParent = mk \"word-break\" \"inherit\"\r\n\r\n    /// Allows a straight jump \"scroll effect\" between elements within the scrolling box. This is default\r\n    member _.scrollBehaviorAuto = mk \"scroll-behavior\" \"auto\"\r\n    /// Allows a smooth animated \"scroll effect\" between elements within the scrolling box.\r\n    member _.scrollBehaviorSmooth = mk \"scroll-behavior\" \"smooth\"\r\n    /// Sets this property to its default value.\r\n    member _.scrollBehaviorInitial = mk \"scroll-behavior\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.scrollBehaviorInheritFromParent = mk \"scroll-behavior\" \"inherit\"\r\n\r\n    /// The content is not clipped, and it may be rendered outside the left and right edges. This is default.\r\n    member _.overflowVisible = mk \"overflow\" \"visibile\"\r\n    /// The content is clipped - and no scrolling mechanism is provided.\r\n    member _.overflowHidden = mk \"overflow\" \"hidden\"\r\n    /// The content is clipped and a scrolling mechanism is provided.\r\n    member _.overflowScroll = mk \"overflow\" \"scroll\"\r\n    /// Should cause a scrolling mechanism to be provided for overflowing boxes\r\n    member _.overflowAuto = mk \"overflow\" \"auto\"\r\n    /// Sets this property to its default value.\r\n    member _.overflowInitial = mk \"overflow\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.overflowInheritFromParent = mk \"overflow\" \"inherit\"\r\n\r\n    /// The content is not clipped, and it may be rendered outside the left and right edges. This is default.\r\n    member _.overflowXVisible = mk \"overflow-x\" \"visibile\"\r\n    /// The content is clipped - and no scrolling mechanism is provided.\r\n    member _.overflowXHidden = mk \"overflow-x\" \"hidden\"\r\n    /// The content is clipped and a scrolling mechanism is provided.\r\n    member _.overflowXScroll = mk \"overflow-x\" \"scroll\"\r\n    /// Should cause a scrolling mechanism to be provided for overflowing boxes\r\n    member _.overflowXAuto = mk \"overflow-x\" \"auto\"\r\n    /// Sets this property to its default value.\r\n    member _.overflowXInitial = mk \"overflow-x\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.overflowXInheritFromParent = mk \"overflow-x\" \"inherit\"\r\n\r\n    /// The content is not clipped, and it may be rendered outside the left and right edges. This is default.\r\n    member _.overflowYVisible = mk \"overflow-y\" \"visibile\"\r\n    /// The content is clipped - and no scrolling mechanism is provided.\r\n    member _.overflowYHidden = mk \"overflow-y\" \"hidden\"\r\n    /// The content is clipped and a scrolling mechanism is provided.\r\n    member _.overflowYScroll = mk \"overflow-y\" \"scroll\"\r\n    /// Should cause a scrolling mechanism to be provided for overflowing boxes\r\n    member _.overflowYAuto = mk \"overflow-y\" \"auto\"\r\n    /// Sets this property to its default value.\r\n    member _.overflowYInitial = mk \"overflow-y\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.overflowYInheritFromParent = mk \"overflow-y\" \"inherit\"\r\n\r\n    /// The element is hidden (but still takes up space).\r\n    member _.visibilityHidden = mk \"visibility\" \"hidden\"\r\n    /// Default value. The element is visible.\r\n    member _.visibilityVisible = mk \"visibility\" \"visible\"\r\n    /// Only for table rows (`<tr> `), row groups (`<tbody> `), columns (`<col> `), column groups\r\n    /// (`<colgroup> `). This value removes a row or column, but it does not affect the table layout.\r\n    /// The space taken up by the row or column will be available for other content.\r\n    ///\r\n    /// If collapse is used on other elements, it renders as \"hidden\"\r\n    member _.visibilityCollapse = mk \"visibility\" \"collapse\"\r\n    /// Sets this property to its default value.\r\n    member _.visibilityInitial = mk \"visibility\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.visibilityInheritFromParent = mk \"visibility\" \"inherit\"\r\n\r\n    /// Default value. The length is equal to the length of the flexible item. If the item has\r\n    /// no length specified, the length will be according to its content.\r\n    member _.flexBasisAuto = mk \"flex-basis\" \"auto\"\r\n    /// Sets this property to its default value.\r\n    member _.flexBasisInitial = mk \"flex-basis\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.flexBasisInheritFromParent = mk \"flex-basis\" \"inherit\"\r\n\r\n    /// Default value. The flexible items are displayed horizontally, as a row\r\n    member _.flexDirectionRow = mk \"flex-direction\" \"row\"\r\n    /// Same as row, but in reverse order.\r\n    member _.flexDirectionRowReverse = mk \"flex-direction\" \"row-reverse\"\r\n    /// The flexible items are displayed vertically, as a column\r\n    member _.flexDirectionColumn = mk \"flex-direction\" \"column\"\r\n    /// Same as column, but in reverse order\r\n    member _.flexDirectionColumnReverse = mk \"flex-direction\" \"column-reverse\"\r\n    /// Sets this property to its default value.\r\n    member _.flexDirectionInitial = mk \"flex-basis\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.flexDirectionInheritFromParent = mk \"flex-basis\" \"inherit\"\r\n\r\n    /// Default value. Specifies that the flexible items will not wrap.\r\n    member _.flexWrapNowrap = mk \"flex-wrap\" \"nowrap\"\r\n    /// Specifies that the flexible items will wrap if necessary\r\n    member _.flexWrapWrap = mk \"flex-wrap\" \"wrap\"\r\n    /// Specifies that the flexible items will wrap, if necessary, in reverse order\r\n    member _.flexWrapWrapReverse = mk \"flex-wrap\" \"wrap-reverse\"\r\n    /// Sets this property to its default value.\r\n    member _.flexWrapInitial = mk \"flex-wrap\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.flexWrapInheritFromParent = mk \"flex-wrap\" \"inherit\"\r\n\r\n    /// The element must float on the left side of its containing block.\r\n    member _.floatLeft = mk \"float\" \"left\"\r\n    /// The element must float on the right side of its containing block.\r\n    member _.floatRight = mk \"float\" \"right\"\r\n    /// The element must not float.\r\n    member _.floatNone = mk \"float\" \"none\"\r\n\r\n    /// The font display strategy is defined by the user agent.\r\n    ///\r\n    /// Default value\r\n    member _.fontDisplayAuto = mk \"font-display\" \"auto\"\r\n    /// Gives the font face a short block period and an infinite swap period.\r\n    member _.fontDisplayBlock = mk \"font-display\" \"block\"\r\n    /// Gives the font face an extremely small block period and an infinite swap period.\r\n    member _.fontDisplaySwap = mk \"font-display\" \"swap\"\r\n    /// Gives the font face an extremely small block period and a short swap period.\r\n    member _.fontDisplayFallback = mk \"font-display\" \"fallback\"\r\n    /// Gives the font face an extremely small block period and no swap period.\r\n    member _.fontDisplayOptional = mk \"font-display\" \"optional\"\r\n\r\n    /// Default. The browser determines whether font kerning should be applied or not\r\n    member _.fontKerningAuto = mk \"font-kerning\" \"auto\"\r\n    /// Specifies that font kerning is applied\r\n    member _.fontKerningNormal = mk \"font-kerning\" \"normal\"\r\n    /// Specifies that font kerning is not applied\r\n    member _.fontKerningNone = mk \"font-kerning\" \"none\"\r\n\r\n    /// Defines from thin to thick characters. 400 is the same as normal, and 700 is the same as bold.\r\n    /// Possible values are [100, 200, 300, 400, 500, 600, 700, 800, 900]\r\n    member _.fontWeight(weight: int) = mk \"font-weight\" (asString weight)\r\n    /// Defines normal characters. This is default.\r\n    member _.fontWeightNormal = mk \"font-weight\" \"normal\"\r\n    /// Defines thick characters.\r\n    member _.fontWeightBold = mk \"font-weight\" \"bold\"\r\n    /// Defines thicker characters\r\n    member _.fontWeightBolder = mk \"font-weight\" \"bolder\"\r\n    /// Defines lighter characters.\r\n    member _.fontWeightLighter = mk \"font-weight\" \"lighter\"\r\n    /// Sets this property to its default value.\r\n    member _.fontWeightInitial = mk \"font-weight\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.fontWeightInheritFromParent = mk \"font-weight\" \"inherit\"\r\n\r\n    /// The browser displays a normal font style. This is defaut.\r\n    member _.fontStyleNormal = mk \"font-style\" \"normal\"\r\n    /// The browser displays an italic font style.\r\n    member _.fontStyleItalic = mk \"font-style\" \"italic\"\r\n    /// The browser displays an oblique font style.\r\n    member _.fontStyleOblique = mk \"font-style\" \"oblique\"\r\n    /// Sets this property to its default value.\r\n    member _.fontStyleInitial = mk \"font-style\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.fontStyleInheritFromParent = mk \"font-style\" \"inherit\"\r\n\r\n    /// The browser displays a normal font. This is default\r\n    member _.fontVariantNormal = mk \"font-variant\" \"normal\"\r\n    /// The browser displays a small-caps font\r\n    member _.fontVariantSmallCaps = mk \"font-variant\" \"small-caps\"\r\n    /// Sets this property to its default value.\r\n    member _.fontVariantInitial = mk \"font-variant\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.fontVariantInheritFromParent = mk \"font-variant\" \"inherit\"\r\n\r\n    /// Break words only at allowed break points\r\n    member _.wordWrapNormal = mk \"word-wrap\" \"normal\"\r\n    /// Allows unbreakable words to be broken\r\n    member _.wordWrapBreakWord = mk \"word-wrap\" \"break-word\"\r\n    /// Sets this property to its default value.\r\n    member _.wordWrapInitial = mk \"word-wrap\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.wordWrapInheritFromParent = mk \"word-wrap\" \"inherit\"\r\n\r\n    /// Default. The element inherits its parent container's align-items property, or \"stretch\" if it has no parent container.\r\n    member _.alignSelfAuto = mk \"align-self\" \"auto\"\r\n    /// The element is positioned to fit the container\r\n    member _.alignSelfStretch = mk \"align-self\" \"stretch\"\r\n    /// The element is positioned at the center of the container\r\n    member _.alignSelfCenter = mk \"align-self\" \"center\"\r\n    /// The element is positioned at the beginning of the container\r\n    member _.alignSelfFlexStart = mk \"align-self\" \"flex-start\"\r\n    /// The element is positioned at the end of the container\r\n    member _.alignSelfFlexEnd = mk \"align-self\" \"flex-end\"\r\n    /// The element is positioned at the baseline of the container\r\n    member _.alignSelfBaseline = mk \"align-self\" \"baseline\"\r\n    /// Sets this property to its default value\r\n    member _.alignSelfInitial = mk \"align-self\" \"initial\"\r\n    /// Inherits this property from its parent element\r\n    member _.alignSelfInheritFromParent = mk \"align-self\" \"inherit\"\r\n\r\n    /// Default. Items are stretched to fit the container\r\n    member _.alignItemsStretch = mk \"align-items\" \"stretch\"\r\n    /// Items are positioned at the center of the container\r\n    member _.alignItemsCenter = mk \"align-items\" \"center\"\r\n    /// Items are positioned at the beginning of the container\r\n    member _.alignItemsFlexStart = mk \"align-items\" \"flex-start\"\r\n    /// Items are positioned at the end of the container\r\n    member _.alignItemsFlexEnd = mk \"align-items\" \"flex-end\"\r\n    /// Items are positioned at the baseline of the container\r\n    member _.alignItemsBaseline = mk \"align-items\" \"baseline\"\r\n    /// Sets this property to its default value\r\n    member _.alignItemsInitial = mk \"align-items\" \"initial\"\r\n    /// Inherits this property from its parent element\r\n    member _.alignItemsInheritFromParent = mk \"align-items\" \"inherit\"\r\n\r\n    /// Default value. Lines stretch to take up the remaining space.\r\n    member _.alignContentStretch = mk \"align-content\" \"stretch\"\r\n    /// Lines are packed toward the center of the flex container.\r\n    member _.alignContentCenter = mk \"align-content\" \"center\"\r\n    /// Lines are packed toward the start of the flex container.\r\n    member _.alignContentFlexStart = mk \"align-content\" \"flex-start\"\r\n    /// Lines are packed toward the end of the flex container.\r\n    member _.alignContentFlexEnd = mk \"align-content\" \"flex-end\"\r\n    /// Lines are evenly distributed in the flex container.\r\n    member _.alignContentSpaceBetween = mk \"align-content\" \"space-between\"\r\n    /// Lines are evenly distributed in the flex container, with half-size spaces on either end.\r\n    member _.alignContentSpaceAround = mk \"align-content\" \"space-around\"\r\n    member _.alignContentInitial = mk \"align-content\" \"initial\"\r\n    member _.alignContentInheritFromParent = mk \"align-content\" \"inherit\"\r\n\r\n    /// Default value. Items are positioned at the beginning of the container.\r\n    member _.justifyContentFlexStart = mk \"justify-content\" \"flex-start\"\r\n    /// Items are positioned at the end of the container.\r\n    member _.justifyContentFlexEnd = mk \"justify-content\" \"flex-end\"\r\n    /// Items are positioned at the center of the container\r\n    member _.justifyContentCenter = mk \"justify-content\" \"center\"\r\n    /// Items are positioned with space between the lines\r\n    member _.justifyContentSpaceBetween = mk \"justify-content\" \"space-between\"\r\n    /// Items are positioned with space before, between, and after the lines.\r\n    member _.justifyContentSpaceAround = mk \"justify-content\" \"space-around\"\r\n    /// Sets this property to its default value.\r\n    member _.justifyContentInitial = mk \"justify-content\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.justifyContentInheritFromParent = mk \"justify-content\" \"inherit\"\r\n\r\n    member _.outlineWidth(width: int) = mk \"outline-width\" (asString width + \"px\")\r\n    member _.outlineWidth(width: ICssUnit) = mk \"outline-width\" (asString width)\r\n    /// Specifies a medium outline. This is default.\r\n    member _.outlineWidthMedium = mk \"outline-width\" \"medium\"\r\n    /// Specifies a thin outline.\r\n    member _.outlineWidthThin = mk \"outline-width\" \"thin\"\r\n    /// Specifies a thick outline.\r\n    member _.outlineWidthThick = mk \"outline-width\" \"thick\"\r\n    /// Sets this property to its default value\r\n    member _.outlineWidthInitial = mk \"outline-width\" \"initial\"\r\n    /// Inherits this property from its parent element\r\n    member _.outlineWidthInheritFromParent = mk \"outline-width\" \"inherit\"\r\n\r\n    /// Default value. The marker is a filled circle\r\n    member _.listStyleTypeDisc = mk \"list-style-type\" \"disc\"\r\n    /// The marker is traditional Armenian numbering\r\n    member _.listStyleTypeArmenian = mk \"list-style-type\" \"armenian\"\r\n    /// The marker is a circle\r\n    member _.listStyleTypeCircle = mk \"list-style-type\" \"circle\"\r\n    /// The marker is plain ideographic numbers\r\n    member _.listStyleTypeCjkIdeographic = mk \"list-style-type\" \"cjk-ideographic\"\r\n    /// The marker is a number\r\n    member _.listStyleTypeDecimal = mk \"list-style-type\" \"decimal\"\r\n    /// The marker is a number with leading zeros (01, 02, 03, etc.)\r\n    member _.listStyleTypeDecimalLeadingZero = mk \"list-style-type\" \"decimal-leading-zero\"\r\n    /// The marker is traditional Georgian numbering\r\n    member _.listStyleTypeGeorgian = mk \"list-style-type\" \"georgian\"\r\n    /// The marker is traditional Hebrew numbering\r\n    member _.listStyleTypeHebrew = mk \"list-style-type\" \"hebrew\"\r\n    /// The marker is traditional Hiragana numbering\r\n    member _.listStyleTypeHiragana = mk \"list-style-type\" \"hiragana\"\r\n    /// The marker is traditional Hiragana iroha numbering\r\n    member _.listStyleTypeHiraganaIroha = mk \"list-style-type\" \"hiragana-iroha\"\r\n    /// The marker is traditional Katakana numbering\r\n    member _.listStyleTypeKatakana = mk \"list-style-type\" \"katakana\"\r\n    /// The marker is traditional Katakana iroha numbering\r\n    member _.listStyleTypeKatakanaIroha = mk \"list-style-type\" \"katakana-iroha\"\r\n    /// The marker is lower-alpha (a, b, c, d, e, etc.)\r\n    member _.listStyleTypeLowerAlpha = mk \"list-style-type\" \"lower-alpha\"\r\n    /// The marker is lower-greek\r\n    member _.listStyleTypeLowerGreek = mk \"list-style-type\" \"lower-greek\"\r\n    /// The marker is lower-latin (a, b, c, d, e, etc.)\r\n    member _.listStyleTypeLowerLatin = mk \"list-style-type\" \"lower-latin\"\r\n    /// The marker is lower-roman (i, ii, iii, iv, v, etc.)\r\n    member _.listStyleTypeLowerRoman = mk \"list-style-type\" \"lower-roman\"\r\n    /// No marker is shown\r\n    member _.listStyleTypeNone = mk \"list-style-type\" \"none\"\r\n    /// The marker is a square\r\n    member _.listStyleTypeSquare = mk \"list-style-type\" \"square\"\r\n    /// The marker is upper-alpha (A, B, C, D, E, etc.)\r\n    member _.listStyleTypeUpperAlpha = mk \"list-style-type\" \"upper-alpha\"\r\n    /// The marker is upper-greek\r\n    member _.listStyleTypeUpperGreek = mk \"list-style-type\" \"upper-greek\"\r\n    /// The marker is upper-latin (A, B, C, D, E, etc.)\r\n    member _.listStyleTypeUpperLatin = mk \"list-style-type\" \"upper-latin\"\r\n    /// The marker is upper-roman (I, II, III, IV, V, etc.)\r\n    member _.listStyleTypeUpperRoman = mk \"list-style-type\" \"upper-roman\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.listStyleTypeInitial = mk \"list-style-type\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.listStyleTypeInheritFromParent = mk \"list-style-type\" \"inherit\"\r\n\r\n    member _.propertyNone = mk \"list-style-image\" \"none\"\r\n    /// The path to the image to be used as a list-item marker\r\n    member _.propertyUrl (path: string) = mk \"list-style-image\" (\"url('\" + path + \"')\")\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.propertyInitial = mk \"list-style-image\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.propertyInheritFromParent = mk \"list-style-image\" \"inherit\"\r\n\r\n    /// The bullet points will be inside the list item\r\n    member _.listStylePositionInside = mk \"list-style-position\" \"inside\"\r\n    /// The bullet points will be outside the list item. This is default\r\n    member _.listStylePositionOutside = mk \"list-style-position\" \"outside\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.listStylePositionInitial = mk \"list-style-position\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.listStylePositionInheritFromParent = mk \"list-style-position\" \"inherit\"\r\n\r\n    member _.textDecorationLine(line: ITextDecorationLine) = mk \"text-decoration-line\" (asString line)\r\n    member _.textDecorationLineNone = mk \"text-decoration-line\" \"none\"\r\n    member _.textDecorationLineUnderline = mk \"text-decoration-line\" \"underline\"\r\n    member _.textDecorationLineOverline = mk \"text-decoration-line\" \"overline\"\r\n    member _.textDecorationLineLineThrough = mk \"text-decoration-line\" \"line-through\"\r\n    member _.textDecorationLineInitial = mk \"text-decoration-line\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.textDecorationLineInheritFromParent = mk \"text-decoration-line\" \"inherit\"\r\n\r\n    member _.textDecoration(line: ITextDecorationLine) = mk \"text-decoration\" (asString line)\r\n    member _.textDecoration(bottom: ITextDecorationLine, top: ITextDecorationLine) =\r\n        mk \"text-decoration\" (asString bottom + \" \" + asString top)\r\n    member _.textDecoration(bottom: ITextDecorationLine, top: ITextDecorationLine, style: ITextDecoration) =\r\n        mk \"text-decoration\" ((asString bottom) + \" \" + (asString top) + \" \" + (asString style))\r\n    member _.textDecoration(bottom: ITextDecorationLine, top: ITextDecorationLine, style: ITextDecoration, color: string) =\r\n        mk \"text-decoration\" ((asString bottom) + \" \" + (asString top) + \" \" + (asString style) + \" \" + color)\r\n    member _.textDecorationNone = mk \"text-decoration\" \"none\"\r\n    member _.textDecorationUnderline = mk \"text-decoration\" \"underline\"\r\n    member _.textDecorationOverline = mk \"text-decoration\" \"overline\"\r\n    member _.textDecorationLineThrough = mk \"text-decoration\" \"line-through\"\r\n    member _.textDecorationInitial = mk \"text-decoration\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.textDecorationInheritFromParent = mk \"text-decoration\" \"inherit\"\r\n\r\n    /// Specifies that child elements will NOT preserve its 3D position. This is default.\r\n    member _.transformStyleFlat = mk \"transform-style\" \"flat\"\r\n    /// Specifies that child elements will preserve its 3D position\r\n    member _.transformStylePreserve3D = mk \"transform-style\" \"preserve-3d\"\r\n    member _.transformStyleInitial = mk \"transform-style\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.transformStyleInheritFromParent = mk \"transform-style\" \"inherit\"\r\n\r\n    /// No capitalization. The text renders as it is. This is default.\r\n    member _.textTransformNone = mk \"text-transform\" \"none\"\r\n    /// Transforms the first character of each word to uppercase.\r\n    member _.textTransformCapitalize = mk \"text-transform\" \"capitalize\"\r\n    /// Transforms all characters to uppercase.\r\n    member _.textTransformUppercase = mk \"text-transform\" \"uppercase\"\r\n    /// Transforms all characters to lowercase.\r\n    member _.textTransformLowercase = mk \"text-transform\" \"lowercase\"\r\n    member _.textTransformInitial = mk \"text-transform\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.textTransformInheritFromParent = mk \"text-transform\" \"inherit\"\r\n\r\n    /// Default value. The text is clipped and not accessible.\r\n    member _.textOverflowClip = mk \"text-overflow\" \"clip\"\r\n    /// Render an ellipsis (\"...\") to represent the clipped text.\r\n    member _.textOverflowEllipsis = mk \"text-overflow\" \"ellipsis\"\r\n    /// Render the given asString to represent the clipped text.\r\n    member _.textOverflowInitial = mk \"text-overflow\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.textOverflowInheritFromParent = mk \"text-overflow\" \"inherit\"\r\n\r\n    /// Default value. Specifies no effects.\r\n    member _.filterNone = mk \"filter\" \"none\"\r\n    /// Applies a blur effect to the elemeen. A larger value will create more blur.\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterBlur(value: int) = mk \"filter\" (\"blur(\" + ((asString value) + \"%)\"))\r\n    /// Applies a blur effect to the elemeen. A larger value will create more blur.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1,\r\n    member _.filterBlur(value: double) = mk \"filter\" (\"blur(\" + ((asString value) + \")\"))\r\n    /// Adjusts the brightness of the elemeen\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    ///\r\n    /// Values over 100% will provide brighter results.\r\n    member _.filterBrightness(value: int) = mk \"filter\" (\"brightness(\" + ((asString value) + \"%)\"))\r\n    /// Adjusts the brightness of the elemeen. A larger value will create more blur.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1,\r\n    member _.filterBrightness(value: double) = mk \"filter\" (\"brightness(\" + ((asString value) + \")\"))\r\n    /// Adjusts the contrast of the element.\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterContrast(value: int) = mk \"filter\" (\"contrast(\" + ((asString value) + \"%)\"))\r\n    /// Adjusts the contrast of the element. A larger value will create more contrast.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1\r\n    member _.filterContrast(value: double) = mk \"filter\" (\"contrast(\" + ((asString value) + \")\"))\r\n    /// Applies a drop shadow effect.\r\n    member _.filterDropShadow(horizontalOffset: int, verticalOffset: int, blur: int, spread: int,  color: string) = mk \"filter\" (\"drop-shadow(\" + (asString horizontalOffset) + \"px \" + (asString verticalOffset) + \"px \" + (asString blur) + \"px \" + (asString spread) + \"px \" + color + \")\")\r\n    /// Applies a drop shadow effect.\r\n    member _.filterDropShadow(horizontalOffset: int, verticalOffset: int, blur: int, color: string) = mk \"filter\" (\"drop-shadow(\" + (asString horizontalOffset) + \"px \" + (asString verticalOffset) + \"px \" + (asString blur) + \"px \" + color + \")\")\r\n    /// Applies a drop shadow effect.\r\n    member _.filterDropShadow(horizontalOffset: int, verticalOffset: int, color: string) = mk \"filter\" (\"drop-shadow(\" + (asString horizontalOffset) + \"px \" + (asString verticalOffset) + \"px \" + color + \")\")\r\n    /// Converts the image to grayscale\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterGrayscale(value: int) = mk \"filter\" (\"grayscale(\" + ((asString value) + \"%)\"))\r\n    /// Converts the image to grayscale\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1\r\n    member _.filterGrayscale(value: double) = mk \"filter\" (\"grayscale(\" + ((asString value) + \")\"))\r\n    /// Applies a hue rotation on the image. The value defines the number of degrees around the color circle the image\r\n    /// samples will be adjusted. 0deg is default, and represents the original image.\r\n    ///\r\n    /// **Note**: Maximum value is 360\r\n    member _.filterHueRotate(degrees: int) = mk \"filter\" (\"hue-rotate(\" + (asString degrees) + \"deg)\")\r\n    /// Inverts the element.\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterInvert(value: int) = mk \"filter\" (\"invert(\" + ((asString value) + \"%)\"))\r\n    /// Inverts the element.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1\r\n    member _.filterInvert(value: double) = mk \"filter\" (\"invert(\" + ((asString value) + \")\"))\r\n    /// Sets the opacity of the element.\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterOpacity(value: int) = mk \"filter\" (\"opacity(\" + ((asString value) + \"%)\"))\r\n    /// Sets the opacity of the element.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1\r\n    member _.filterOpacity(value: double) = mk \"filter\" (\"opacity(\" + ((asString value) + \")\"))\r\n    /// Sets the saturation of the element.\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterSaturate(value: int) = mk \"filter\" (\"saturate(\" + ((asString value) + \"%)\"))\r\n    /// Sets the saturation of the element.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1\r\n    member _.filterSaturate(value: double) = mk \"filter\" (\"saturate(\" + ((asString value) + \")\"))\r\n    /// Applies Sepia filter to the element.\r\n    ///\r\n    /// This overload takes an integer that represents a percentage from 0 to 100.\r\n    member _.filterSepia(value: int) = mk \"filter\" (\"sepia(\" + ((asString value) + \"%)\"))\r\n    /// Applies Sepia filter to the element.\r\n    ///\r\n    /// This overload takes a floating number that goes from 0 to 1\r\n    member _.filterSepia(value: double) = mk \"filter\" (\"sepia(\" + ((asString value) + \")\"))\r\n    /// The url() function takes the location of an XML file that specifies an SVG filter, and may include an anchor to a specific filter element.\r\n    ///\r\n    /// Example: `filter: url(svg-url#element-id)`\r\n    member _.filterUrl(value: string) = mk \"filter\" (\"url(\" + value + \")\")\r\n    /// Sets this property to its default value.\r\n    member _.filterInitial = mk \"filter\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.filterInheritFromParent = mk \"filter\" \"inherit\"\r\n\r\n    /// Sets whether table borders should collapse into a single border or be separated as in standard HTML.\r\n    /// Borders are separated; each cell will display its own borders. This is default.\r\n    member _.borderCollapseSeparate = mk \"border-collapse\" \"separate\"\r\n    /// Borders are collapsed into a single border when possible (border-spacing and empty-cells properties have no effect)\r\n    member _.borderCollapseCollapse = mk \"border-collapse\" \"collapse\"\r\n    /// Sets this property to its default value\r\n    member _.borderCollapseInitial = mk \"border-collapse\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.borderCollapseInheritFromParent = mk \"border-collapse\" \"inherit\"\r\n\r\n    /// Sets the distance between the borders of adjacent <table> cells. Applies only when border-collapse is separate.\r\n    member _.borderSpacing(horizontal: ICssUnit, ?vertical: ICssUnit) =\r\n        mk \"border-spacing\" (asString horizontal + \" \" + asString vertical)\r\n    /// Sets this property to its default value\r\n    member _.borderSpacingInitial = mk \"border-spacing\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.borderSpacingInheritFromParent = mk \"border-spacing\" \"inherit\"\r\n\r\n    /// Sets the size of the element's background image.\r\n    ///\r\n    /// The image can be left to its natural size, stretched, or constrained to fit the available space.\r\n    member _.backgroundSize(value: string) = mk \"background-size\" (asString value)\r\n    /// Sets the size of the element's background image.\r\n    ///\r\n    /// The image can be left to its natural size, stretched, or constrained to fit the available space.\r\n    member _.backgroundSize(value: ICssUnit) = mk \"background-size\" (asString value)\r\n    /// Sets the size of the element's background image.\r\n    ///\r\n    /// The image can be left to its natural size, stretched, or constrained to fit the available space.\r\n    member _.backgroundSize(width: ICssUnit, height: ICssUnit) =\r\n        mk \"background-size\" (\r\n            asString width\r\n            + \" \" +\r\n            asString height\r\n        )\r\n    /// Default value. The background image is displayed in its original size\r\n    ///\r\n    /// See [example here](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-size&preval=auto)\r\n    member _.backgroundSizeAuto = mk \"background-size\" \"auto\"\r\n    /// Resize the background image to cover the entire container, even if it has to stretch the image or cut a little bit off one of the edges.\r\n    ///\r\n    /// See [example here](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-size&preval=cover)\r\n    member _.backgroundSizeCover = mk \"background-size\" \"cover\"\r\n    /// Resize the background image to make sure the image is fully visible\r\n    ///\r\n    /// See [example here](https://www.w3schools.com/cssref/playit.asp?filename=playcss_background-size&preval=contain)\r\n    member _.backgroundSizeContain = mk \"background-size\" \"contain\"\r\n    /// Sets this property to its default value.\r\n    member _.backgroundSizeInitial = mk \"background-size\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.backgroundSizeInheritFromParent = mk \"background-size\" \"inherit\"\r\n\r\n    /// Default value. The line will display as a single line.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=solid\r\n    member _.textDecorationStyleSolid = mk \"text-decoration-style\" \"solid\"\r\n    /// The line will display as a double line.\r\n    ///\r\n    /// https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=double\r\n    member _.textDecorationStyleDouble = mk \"text-decoration-style\" \"double\"\r\n    /// The line will display as a dotted line.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=dotted\r\n    member _.textDecorationStyleDotted = mk \"text-decoration-style\" \"dotted\"\r\n    /// The line will display as a dashed line.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=dashed\r\n    member _.textDecorationStyleDashed = mk \"text-decoration-style\" \"dashed\"\r\n    /// The line will display as a wavy line.\r\n    ///\r\n    /// https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=wavy\r\n    member _.textDecorationStyleWavy = mk \"text-decoration-style\" \"wavy\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=initial\r\n    member _.textDecorationStyleInitial = mk \"text-decoration-style\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.textDecorationStyleInheritFromParent = mk \"text-decoration-style\" \"inherit\"\r\n\r\n    /// Makes the text as narrow as it gets.\r\n    member _.fontStretchUltraCondensed = mk \"font-stretch\" \"ultra-condensed\"\r\n    /// Makes the text narrower than condensed, but not as narrow as ultra-condensed\r\n    member _.fontStretchExtraCondensed = mk \"font-stretch\" \"extra-condensed\"\r\n    /// Makes the text narrower than semi-condensed, but not as narrow as extra-condensed.\r\n    member _.fontStretchCondensed = mk \"font-stretch\" \"condensed\"\r\n    /// Makes the text narrower than normal, but not as narrow as condensed.\r\n    member _.fontStretchSemiCondensed = mk \"font-stretch\" \"semi-condensed\"\r\n    /// Default value. No font stretching\r\n    member _.fontStretchNormal = mk \"font-stretch\" \"normal\"\r\n    /// Makes the text wider than normal, but not as wide as expanded\r\n    member _.fontStretchSemiExpanded = mk \"font-stretch\" \"semi-expanded\"\r\n    /// Makes the text wider than semi-expanded, but not as wide as extra-expanded\r\n    member _.fontStretchExpanded = mk \"font-stretch\" \"expanded\"\r\n    /// Makes the text wider than expanded, but not as wide as ultra-expanded\r\n    member _.fontStretchExtraExpanded = mk \"font-stretch\" \"extra-expanded\"\r\n    /// Makes the text as wide as it gets.\r\n    member _.fontStretchUltraExpanded = mk \"font-stretch\" \"ultra-expanded\"\r\n    /// Sets this property to its default value.\r\n    member _.fontStretchInitial = mk \"font-stretch\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.fontStretchInheritFromParent = mk \"font-stretch\" \"inherit\"\r\n\r\n    /// The element does not float, (will be displayed just where it occurs in the text). This is default\r\n    member _.floatStyleNone = mk \"float\" \"none\"\r\n    member _.floatStyleLeft = mk \"float\" \"left\"\r\n    member _.floatStyleRight = mk \"float\" \"right\"\r\n    /// Sets this property to its default value.\r\n    member _.floatStyleInitial = mk \"float\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.floatStyleInheritFromParent = mk \"float\" \"inherit\"\r\n\r\n    /// The element is aligned with the baseline of the parent. This is default.\r\n    member _.verticalAlignBaseline = mk \"vertical-align\" \"baseline\"\r\n    /// The element is aligned with the subscript baseline of the parent\r\n    member _.verticalAlignSub = mk \"vertical-align\" \"sup\"\r\n    /// The element is aligned with the superscript baseline of the parent.\r\n    member _.verticalAlignSuper = mk \"vertical-align\" \"super\"\r\n    /// The element is aligned with the top of the tallest element on the line.\r\n    member _.verticalAlignTop = mk \"vertical-align\" \"top\"\r\n    /// The element is aligned with the top of the parent element's font.\r\n    member _.verticalAlignTextTop = mk \"vertical-align\" \"text-top\"\r\n    /// The element is placed in the middle of the parent element.\r\n    member _.verticalAlignMiddle = mk \"vertical-align\" \"middle\"\r\n    /// The element is aligned with the lowest element on the line.\r\n    member _.verticalAlignBottom = mk \"vertical-align\" \"bottom\"\r\n    /// The element is aligned with the bottom of the parent element's font\r\n    member _.verticalAlignTextBottom = mk \"vertical-align\" \"text-bottom\"\r\n    /// Sets this property to its default value.\r\n    member _.verticalAlignInitial = mk \"vertical-align\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.verticalAlignInheritFromParent = mk \"vertical-align\" \"inherit\"\r\n\r\n    /// Let the content flow horizontally from left to right, vertically from top to bottom\r\n    member _.writingModeHorizontalTopBottom = mk \"writing-mode\" \"horizontal-tb\"\r\n    /// Let the content flow vertically from top to bottom, horizontally from right to left\r\n    member _.writingModeVerticalRightLeft = mk \"writing-mode\" \"vertical-rl\"\r\n    /// Let the content flow vertically from top to bottom, horizontally from left to right\r\n    member _.writingModeVerticalLeftRight = mk \"writing-mode\" \"vertical-lr\"\r\n    /// Sets this property to its default value.\r\n    member _.writingModeInitial = mk \"writing-mode\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.writingModeInheritFromParent = mk \"writing-mode\" \"inherit\"\r\n\r\n    /// Default value. Specifies a animation effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25,0.1,0.25,1)).\r\n    member _.animationTimingFunctionEase = mk \"animation-timing-function\" \"ease\"\r\n    /// Specifies a animation effect with the same speed from start to end (equivalent to cubic-bezier(0,0,1,1))\r\n    member _.animationTimingFunctionLinear = mk \"animation-timing-function\" \"linear\"\r\n    /// Specifies a animation effect with a slow start (equivalent to cubic-bezier(0.42,0,1,1)).\r\n    member _.animationTimingFunctionEaseIn = mk \"animation-timing-function\" \"ease-in\"\r\n    /// Specifies a animation effect with a slow end (equivalent to cubic-bezier(0,0,0.58,1)).\r\n    member _.animationTimingFunctionEaseOut = mk \"animation-timing-function\" \"ease-out\"\r\n    /// Specifies a animation effect with a slow start and end (equivalent to cubic-bezier(0.42,0,0.58,1))\r\n    member _.animationTimingFunctionEaseInOut = mk \"animation-timing-function\" \"ease-in-out\"\r\n    /// Define your own values in the cubic-bezier function. Possible values are numeric values from 0 to 1\r\n    member _.animationTimingFunctionCubicBezier(n1: float, n2: float, n3: float, n4: float) = mk \"animation-timing-function\" (\"cubic-bezier(\" + (asString n1) + \",\" + (asString n2) + \",\" + (asString n3) + \", \" + (asString n4) + \")\")\r\n    /// Sets this property to its default value\r\n    member _.animationTimingFunctionInitial = mk \"animation-timing-function\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.animationTimingFunctionInheritFromParent = mk \"animation-timing-function\" \"inherit\"\r\n\r\n    /// Default value. Specifies a transition effect with a slow start, then fast, then end slowly (equivalent to cubic-bezier(0.25,0.1,0.25,1)).\r\n    member _.transitionTimingFunctionEase = mk \"transition-timing-function\" \"ease\"\r\n    /// Specifies a transition effect with the same speed from start to end (equivalent to cubic-bezier(0,0,1,1))\r\n    member _.transitionTimingFunctionLinear = mk \"transition-timing-function\" \"linear\"\r\n    /// Specifies a transition effect with a slow start (equivalent to cubic-bezier(0.42,0,1,1)).\r\n    member _.transitionTimingFunctionEaseIn = mk \"transition-timing-function\" \"ease-in\"\r\n    /// Specifies a transition effect with a slow end (equivalent to cubic-bezier(0,0,0.58,1)).\r\n    member _.transitionTimingFunctionEaseOut = mk \"transition-timing-function\" \"ease-out\"\r\n    /// Specifies a transition effect with a slow start and end (equivalent to cubic-bezier(0.42,0,0.58,1))\r\n    member _.transitionTimingFunctionEaseInOut = mk \"transition-timing-function\" \"ease-in-out\"\r\n    /// Equivalent to steps(1, start)\r\n    member _.transitionTimingFunctionStepStart = mk \"transition-timing-function\" \"step-start\"\r\n    /// Equivalent to steps(1, end)\r\n    member _.transitionTimingFunctionStepEnd = mk \"transition-timing-function\" \"step-end\"\r\n    /// Define your own values in the cubic-bezier function. Possible values are numeric values from 0 to 1\r\n    member _.transitionTimingFunctionCubicBezier(n1: float, n2: float, n3: float, n4: float) = mk \"transition-timing-function\" (\"cubic-bezier(\" + (asString n1) + \",\" + (asString n2) + \",\" + (asString n3) + \", \" + (asString n4) + \")\")\r\n    /// Sets this property to its default value\r\n    member _.transitionTimingFunctionInitial = mk \"transition-timing-function\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.transitionTimingFunctionInheritFromParent = mk \"transition-timing-function\" \"inherit\"\r\n\r\n    /// Default. Text can be selected if the browser allows it.\r\n    member _.userSelectAuto = mk \"user-select\" \"auto\"\r\n    /// Prevents text selection.\r\n    member _.userSelectNone = mk \"user-select\" \"none\"\r\n    /// The text can be selected by the user.\r\n    member _.userSelectText = mk \"user-select\" \"text\"\r\n    /// Text selection is made with one click instead of a double-click.\r\n    member _.userSelectAll = mk \"user-select\" \"all\"\r\n    /// Sets this property to its default value.\r\n    member _.userSelectInitial = mk \"user-select\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.userSelectInheritFromParent = mk \"user-select\" \"inherit\"\r\n\r\n    /// Sets the line style for all four sides of an element's border.\r\n    member _.borderStyle(style: IBorderStyle) = mk \"border-style\" (asString style)\r\n    /// Sets the line style for all four sides of an element's border.\r\n    member _.borderStyle(vertical: IBorderStyle, horizontal: IBorderStyle)  =\r\n        mk \"border-style\" (asString vertical + \" \" + asString horizontal)\r\n    /// Sets the line style for all four sides of an element's border.\r\n    member _.borderStyle(top: IBorderStyle, right: IBorderStyle, bottom: IBorderStyle, left: IBorderStyle) =\r\n        mk \"border-style\" ((asString top) + \" \" + (asString right) + \" \" + (asString bottom) + \" \" +  (asString left))\r\n    /// Specifies a dotted border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleDotted = mk \"border-style\" \"dotted\"\r\n    /// Specifies a dashed border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleDashed = mk \"border-style\" \"dashed\"\r\n    /// Specifies a solid border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleSolid = mk \"border-style\" \"solid\"\r\n    /// Specifies a double border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleDouble = mk \"border-style\" \"double\"\r\n    /// Specifies a 3D grooved border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleGroove = mk \"border-style\" \"groove\"\r\n    /// Specifies a 3D ridged border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleRidge = mk \"border-style\" \"ridge\"\r\n    /// Specifies a 3D inset border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleInset = mk \"border-style\" \"inset\"\r\n    /// Specifies a 3D outset border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleOutset = mk \"border-style\" \"outset\"\r\n    /// Default value. Specifies no border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    member _.borderStyleNone = mk \"border-style\" \"none\"\r\n    /// The same as \"none\", except in border conflict resolution for table elements.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden\r\n    member _.borderStyleHidden = mk \"border-style\" \"hidden\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden\r\n    ///\r\n    /// Read about initial value https://www.w3schools.com/cssref/css_initial.asp\r\n    member _.borderStyleInitial = mk \"border-style\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden\r\n    ///\r\n    /// Read about inherit https://www.w3schools.com/cssref/css_inherit.asp\r\n    member _.borderStyleInheritFromParent = mk \"border-style\" \"inherit\"\r\n\r\n    /// Browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable\r\n    /// content in the cells. The content will dictate the layout\r\n    member _.tableLayoutAuto = mk \"table-layout\" \"auto\"\r\n    /// Sets a fixed table layout algorithm. The table and column widths are set by the widths of table and col\r\n    /// or by the width of the first row of cells. Cells in other rows do not affect column widths. If no widths\r\n    /// are present on the first row, the column widths are divided equally across the table, regardless of content\r\n    /// inside the cells\r\n    member _.tableLayoutFixed' = mk \"table-layout\" \"fixed\"\r\n    /// Sets this property to its default value.\r\n    member _.tableLayoutInitial = mk \"table-layout\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.tableLayoutInheritFromParent = mk \"table-layout\" \"inherit\"\r\n\r\n    member _.cursor(value: string) = mk \"cursor\" (asString value)\r\n    /// The User Agent will determine the cursor to display based on the current context. E.g., equivalent to text when hovering text.\r\n    member _.cursorAuto = mk \"cursor\" \"auto\"\r\n    /// The cursor indicates an alias of something is to be created\r\n    member _.cursorAlias = mk \"cursor\" \"alias\"\r\n    /// The platform-dependent default cursor. Typically an arrow.\r\n    member _.cursorDefaultCursor = mk \"cursor\" \"default\"\r\n    /// No cursor is rendered.\r\n    member _.cursorNone = mk \"cursor\" \"none\"\r\n    /// A context menu is available.\r\n    member _.cursorContextMenu = mk \"cursor\" \"context-menu\"\r\n    /// Help information is available.\r\n    member _.cursorHelp = mk \"cursor\" \"help\"\r\n    /// The cursor is a pointer that indicates a link. Typically an image of a pointing hand.\r\n    member _.cursorPointer = mk \"cursor\" \"pointer\"\r\n    /// The program is busy in the background, but the user can still interact with the interface (in contrast to `wait`).\r\n    member _.cursorProgress = mk \"cursor\" \"progress\"\r\n    /// The program is busy, and the user can't interact with the interface (in contrast to progress). Sometimes an image of an hourglass or a watch.\r\n    member _.cursorWait = mk \"cursor\" \"wait\"\r\n    /// The table cell or set of cells can be selected.\r\n    member _.cursorCell = mk \"cursor\" \"cell\"\r\n    /// Cross cursor, often used to indicate selection in a bitmap.\r\n    member _.cursorCrosshair = mk \"cursor\" \"crosshair\"\r\n    /// The text can be selected. Typically the shape of an I-beam.\r\n    member _.cursorText = mk \"cursor\" \"text\"\r\n    /// The vertical text can be selected. Typically the shape of a sideways I-beam.\r\n    member _.cursorVerticalText = mk \"cursor\" \"vertical-text\"\r\n    /// Something is to be copied.\r\n    member _.cursorCopy = mk \"cursor\" \"copy\"\r\n    /// Something is to be moved.\r\n    member _.cursorMove = mk \"cursor\" \"move\"\r\n    /// An item may not be dropped at the current location. On Windows and Mac OS X, `no-drop` is the same as `not-allowed`.\r\n    member _.cursorNoDrop = mk \"cursor\" \"no-drop\"\r\n    /// The requested action will not be carried out.\r\n    member _.cursorNotAllowed = mk \"cursor\" \"not-allowed\"\r\n    /// Something can be grabbed (dragged to be moved).\r\n    member _.cursorGrab = mk \"cursor\" \"grab\"\r\n    /// Something is being grabbed (dragged to be moved).\r\n    member _.cursorGrabbing = mk \"cursor\" \"grabbing\"\r\n    /// Something can be scrolled in any direction (panned).\r\n    member _.cursorAllScroll = mk \"cursor\" \"all-scroll\"\r\n    /// The item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.\r\n    member _.cursorColumnResize = mk \"cursor\" \"col-resize\"\r\n    /// The item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.\r\n    member _.cursorRowResize = mk \"cursor\" \"row-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorNorthResize = mk \"cursor\" \"n-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorEastResize = mk \"cursor\" \"e-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorSouthResize = mk \"cursor\" \"s-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorWestResize = mk \"cursor\" \"w-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorNorthEastResize = mk \"cursor\" \"ne-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorNorthWestResize = mk \"cursor\" \"nw-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorSouthEastResize = mk \"cursor\" \"se-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorSouthWestResize = mk \"cursor\" \"sw-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorEastWestResize = mk \"cursor\" \"ew-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorNorthSouthResize = mk \"cursor\" \"ns-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorNorthEastSouthWestResize = mk \"cursor\" \"nesw-resize\"\r\n    /// Directional resize arrow\r\n    member _.cursorNorthWestSouthEastResize = mk \"cursor\" \"nwse-resize\"\r\n    /// Something can be zoomed (magnified) in\r\n    member _.cursorZoomIn = mk \"cursor\" \"zoom-in\"\r\n    /// Something can be zoomed out\r\n    member _.cursorZoomOut = mk \"cursor\" \"zoom-out\"\r\n\r\n    /// Permits the user agent to render a custom outline style.\r\n    member _.outlineStyleAuto = mk \"outline-style\" \"auto\"\r\n    /// Specifies no outline. This is default.\r\n    member _.outlineStyleNone = mk \"outline-style\" \"none\"\r\n    /// Specifies a hidden outline\r\n    member _.outlineStyleHidden = mk \"outline-style\" \"hidden\"\r\n    /// Specifies a dotted outline\r\n    member _.outlineStyleDotted = mk \"outline-style\" \"dotted\"\r\n    /// Specifies a dashed outline\r\n    member _.outlineStyleDashed = mk \"outline-style\" \"dashed\"\r\n    /// Specifies a solid outline\r\n    member _.outlineStyleSolid = mk \"outline-style\" \"solid\"\r\n    /// Specifies a double outliner\r\n    member _.outlineStyleDouble = mk \"outline-style\" \"double\"\r\n    /// Specifies a 3D grooved outline. The effect depends on the outline-color value\r\n    member _.outlineStyleGroove = mk \"outline-style\" \"groove\"\r\n    /// Specifies a 3D ridged outline. The effect depends on the outline-color value\r\n    member _.outlineStyleRidge = mk \"outline-style\" \"ridge\"\r\n    /// Specifies a 3D inset  outline. The effect depends on the outline-color value\r\n    member _.outlineStyleInset = mk \"outline-style\" \"inset\"\r\n    /// Specifies a 3D outset outline. The effect depends on the outline-color value\r\n    member _.outlineStyleOutset = mk \"outline-style\" \"outset\"\r\n    /// Sets this property to its default value\r\n    member _.outlineStyleInitial = mk \"outline-style\" \"initial\"\r\n    /// Inherits this property from its parent element\r\n    member _.outlineStyleInheritFromParent = mk \"outline-style\" \"inherit\"\r\n\r\n    /// Sets the initial position for each background image.\r\n    ///\r\n    /// The position is relative to the position layer set by background-origin.\r\n    member _.backgroundPosition(position: string) = mk \"background-position\" position\r\n    /// The background image will scroll with the page. This is default.\r\n    member _.backgroundPositionScroll = mk \"background-position\" \"scroll\"\r\n    /// The background image will not scroll with the page.\r\n    member _.backgroundPositionFixedNoScroll = mk \"background-position\" \"fixed\"\r\n    /// The background image will scroll with the element's contents.\r\n    member _.backgroundPositionLocal = mk \"background-position\" \"local\"\r\n    /// Sets this property to its default value.\r\n    member _.backgroundPositionInitial = mk \"background-position\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.backgroundPositionInheritFromParent = mk \"background-position\" \"inherit\"\r\n\r\n    /// This is default. Sets the blending mode to normal.\r\n    member _.backgroundBlendModeNormal = mk \"background-blend-mode\" \"normal\"\r\n    /// Sets the blending mode to screen\r\n    member _.backgroundBlendModeScreen = mk \"background-blend-mode\" \"screen\"\r\n    /// Sets the blending mode to overlay\r\n    member _.backgroundBlendModeOverlay = mk \"background-blend-mode\" \"overlay\"\r\n    /// Sets the blending mode to darken\r\n    member _.backgroundBlendModeDarken = mk \"background-blend-mode\" \"darken\"\r\n    /// Sets the blending mode to multiply\r\n    member _.backgroundBlendModeLighten = mk \"background-blend-mode\" \"lighten\"\r\n    /// Sets the blending mode to color-dodge\r\n    member _.backgroundBlendModeCollorDodge = mk \"background-blend-mode\" \"color-dodge\"\r\n    /// Sets the blending mode to saturation\r\n    member _.backgroundBlendModeSaturation = mk \"background-blend-mode\" \"saturation\"\r\n    /// Sets the blending mode to color\r\n    member _.backgroundBlendModeColor = mk \"background-blend-mode\" \"color\"\r\n    /// Sets the blending mode to luminosity\r\n    member _.backgroundBlendModeLuminosity = mk \"background-blend-mode\" \"luminosity\"\r\n\r\n    /// Default value. The background extends behind the border.\r\n    member _.backgroundClipBorderBox = mk \"background-clip\" \"border-box\"\r\n    /// The background extends to the inside edge of the border.\r\n    member _.backgroundClipPaddingBox = mk \"background-clip\" \"padding-box\"\r\n    /// The background extends to the edge of the content box.\r\n    member _.backgroundClipContentBox = mk \"background-clip\" \"content-box\"\r\n    /// Sets this property to its default value.\r\n    member _.backgroundClipInitial = mk \"background-clip\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.backgroundClipInheritFromParent = mk \"background-clip\" \"inherit\"\r\n\r\n    member _.transform(transformation: ITransformProperty) =\r\n        mk \"transform\" (asString transformation)\r\n    member _.transform(transformations: ITransformProperty list) =\r\n        mk \"transform\" (String.concat \" \" (transformations |> List.map asString))\r\n    /// Defines that there should be no transformation.\r\n    member _.transformNone = mk \"transform\" \"none\"\r\n    /// Defines a 2D transformation, using a matrix of six values.\r\n    member _.transformMatrix(x1: int, y1: int, z1: int, x2: int, y2: int, z2: int) = mk \"transform\" (\"matrix(\" + (asString x1) + \",\" + (asString y1) + \",\" + (asString z1) + \",\" + (asString x2) + \",\" + (asString y2) + \", \" + (asString z2) + \")\")\r\n    /// Defines a 2D translation.\r\n    member _.transformTranslate(x: int, y: int) = mk \"transform\" (\"translate(\" + (asString x) + \"px,\" + (asString y) + \"px)\")\r\n    /// Defines a 2D translation.\r\n    member _.transformTranslate(x: ICssUnit, y: ICssUnit) = mk \"transform\" (\"translate(\" + (asString x) + \", \" + (asString y) + \")\")\r\n    /// Defines a 3D translation.\r\n    member _.transformTranslate3D(x: int, y: int, z: int) = mk \"transform\" (\"translate3d(\" + (asString x) + \"px,\" + (asString y) + \"px,\" + (asString z) + \"px)\")\r\n    /// Defines a 3D translation.\r\n    member _.transformTranslate3D(x: ICssUnit, y: ICssUnit, z: ICssUnit) = mk \"transform\" (\"translate3d(\" + (asString x) + \",\" + (asString y) + \", \" + (asString z) + \")\")\r\n    /// Defines a translation, using only the value for the X-axis.\r\n    member _.transformTranslateX(x: int) = mk \"transform\" (\"translateX(\" + (asString x) + \"px)\")\r\n    /// Defines a translation, using only the value for the X-axis.\r\n    member _.transformTranslateX(x: ICssUnit) = mk \"transform\" (\"translateX(\" + (asString x) + \")\")\r\n    /// Defines a translation, using only the value for the Y-axis\r\n    member _.transformTranslateY(y: int) = mk \"transform\" (\"translateY(\" + (asString y) + \"px)\")\r\n    /// Defines a translation, using only the value for the Y-axis\r\n    member _.transformTranslateY(y: ICssUnit) = mk \"transform\" (\"translateY(\" + (asString y) + \")\")\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    member _.transformTranslateZ(z: ICssUnit) = mk \"transform\" (\"translateZ(\" + (asString z) + \")\")\r\n    /// Defines a 2D scale transformation.\r\n    member _.transformScale(x: int, y: int) = mk \"transform\" (\"scale(\" + (asString x) + \", \" + (asString y) + \")\")\r\n    /// Defines a scale transformation.\r\n    /// Defines a scale transformation.\r\n    member _.transformScale(n: float) = mk \"transform\" (\"scale(\" + (asString n) + \")\")\r\n    /// Defines a 3D scale transformation\r\n    member _.transformScale3D(x: int, y: int, z: int) = mk \"transform\" (\"scale3d(\" + (asString x) + \",\" + (asString y) + \", \" + (asString z) + \")\")\r\n    /// Defines a scale transformation by giving a value for the X-axis.\r\n    member _.transformScaleX(x: int) = mk \"transform\" (\"scaleX(\" + (asString x) + \")\")\r\n    /// Defines a scale transformation by giving a value for the Y-axis.\r\n    member _.transformScaleY(y: int) = mk \"transform\" (\"scaleY(\" + (asString y) + \")\")\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    member _.transformScaleZ(z: int) = mk \"transform\" (\"scaleZ(\" + (asString z) + \")\")\r\n    /// Defines a 2D rotation, the angle is specified in the parameter.\r\n    member _.transformRotate(deg: int) = mk \"transform\" (\"rotate(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 2D rotation, the angle is specified in the parameter.\r\n    member _.transformRotate(deg: float) = mk \"transform\" (\"rotate(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the X-axis.\r\n    member _.transformRotateX(deg: float) = mk \"transform\" (\"rotateX(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the X-axis.\r\n    member _.transformRotateX(deg: int) = mk \"transform\" (\"rotateX(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Y-axis\r\n    member _.transformRotateY(deg: float) = mk \"transform\" (\"rotateY(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Y-axis\r\n    member _.transformRotateY(deg: int) = mk \"transform\" (\"rotateY(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Z-axis\r\n    member _.transformRotateZ(deg: float) = mk \"transform\" (\"rotateZ(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Z-axis\r\n    member _.transformRotateZ(deg: int) = mk \"transform\" (\"rotateZ(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X- and the Y-axis.\r\n    member _.transformSkew(xAngle: int, yAngle: int) = mk \"transform\" (\"skew(\" + (asString xAngle) + \"deg,\" + (asString yAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X- and the Y-axis.\r\n    member _.transformSkew(xAngle: float, yAngle: float) = mk \"transform\" (\"skew(\" + (asString xAngle) + \"deg,\" + (asString yAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X-axis\r\n    member _.transformSkewX(xAngle: int) = mk \"transform\" (\"skewX(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X-axis\r\n    member _.transformSkewX(xAngle: float) = mk \"transform\" (\"skewX(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the Y-axis\r\n    member _.transformSkewY(xAngle: int) = mk \"transform\" (\"skewY(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the Y-axis\r\n    member _.transformSkewY(xAngle: float) = mk \"transform\" (\"skewY(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a perspective view for a 3D transformed element\r\n    member _.transformPerspective(n: int) = mk \"transform\" (\"perspective(\" + (asString n) + \")\")\r\n    /// Sets this property to its default value.\r\n    member _.transformInitial = mk \"transform\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.transformInheritFromParent = mk \"transform\" \"inherit\"\r\n\r\n    /// Text direction goes from right-to-left\r\n    member _.directionRightToLeft = mk \"direction\" \"rtl\"\r\n    /// Text direction goes from left-to-right. This is default\r\n    member _.directionLeftToRight = mk \"direction\" \"ltr\"\r\n    /// Sets this property to its default value.\r\n    member _.directionInitial = mk \"direction\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.directionInheritFromParent = mk \"direction\" \"inherit\"\r\n\r\n    /// Display borders on empty cells. This is default\r\n    member _.emptyCellsShow = mk \"empty-cells\" \"show\"\r\n    /// Hide borders on empty cells\r\n    member _.emptyCellsHide = mk \"empty-cells\" \"hide\"\r\n    /// Sets this property to its default value\r\n    member _.emptyCellsInitial = mk \"empty-cells\" \"initial\"\r\n    /// Inherits this property from its parent element\r\n    member _.emptyCellsInheritFromParent = mk \"empty-cells\" \"inherit\"\r\n\r\n    /// Default value. The animation should be played as normal\r\n    member _.animationDirectionNormal = mk \"animation-direction\" \"normal\"\r\n    /// The animation should play in reverse direction\r\n    member _.animationDirectionReverse = mk \"animation-direction\" \"reverse\"\r\n    /// The animation will be played as normal every odd time (1, 3, 5, etc..) and in reverse direction every even time (2, 4, 6, etc...).\r\n    member _.animationDirectionAlternate = mk \"animation-direction\" \"alternate\"\r\n    /// The animation will be played in reverse direction every odd time (1, 3, 5, etc..) and in a normal direction every even time (2,4,6,etc...)\r\n    member _.animationDirectionAlternateReverse = mk \"animation-direction\" \"alternate-reverse\"\r\n    /// Sets this property to its default value\r\n    member _.animationDirectionInitial = mk \"animation-direction\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.animationDirectionInheritFromParent = mk \"animation-direction\" \"inherit\"\r\n\r\n    /// Default value. Specifies that the animation is running.\r\n    member _.animationPlayStateRunning = mk \"animation-play-state\" \"running\"\r\n    /// Specifies that the animation is paused\r\n    member _.animationPlayStatePaused = mk \"animation-play-state\" \"paused\"\r\n    /// Sets this property to its default value\r\n    member _.animationPlayStateInitial = mk \"animation-play-state\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.animationPlayStateInheritFromParent = mk \"animation-play-state\" \"inherit\"\r\n\r\n    /// Specifies that the animation should be played infinite times (forever)\r\n    member _.animationIterationCountInfinite = mk \"animation-iteration-count\" \"infinite\"\r\n    /// Sets this property to its default value\r\n    member _.animationIterationCountInitial = mk \"animation-iteration-count\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.animationIterationCountInheritFromParent = mk \"animation-iteration-count\" \"inherit\"\r\n\r\n    /// Default value. Animation will not apply any styles to the element before or after it is executing\r\n    member _.animationFillModeNone = mk \"animation-fill-mode\" \"none\"\r\n    /// The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count).\r\n    member _.animationFillModeForwards = mk \"animation-fill-mode\" \"forwards\"\r\n    /// The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period\r\n    member _.animationFillModeBackwards = mk \"animation-fill-mode\" \"backwards\"\r\n    /// The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions\r\n    member _.animationFillModeBoth = mk \"animation-fill-mode\" \"both\"\r\n    /// Sets this property to its default value\r\n    member _.animationFillModeInitial = mk \"animation-fill-mode\" \"initial\"\r\n    /// Inherits this property from its parent element\r\n    member _.animationFillModeInheritFromParent = mk \"animation-fill-mode\" \"inherit\"\r\n\r\n    /// Sets how background images are repeated.\r\n    ///\r\n    /// A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\r\n    member _.backgroundRepeat(repeat: IBackgroundRepeat) = mk \"background-repeat\" (asString repeat)\r\n    /// The background image is repeated both vertically and horizontally. This is default.\r\n    member _.backgroundRepeatRepeat = mk \"background-repeat\" \"repeat\"\r\n    /// The background image is only repeated horizontally.\r\n    member _.backgroundRepeatRepeatX = mk \"background-repeat\" \"repeat-x\"\r\n    /// The background image is only repeated vertically.\r\n    member _.backgroundRepeatRepeatY = mk \"background-repeat\" \"repeat-y\"\r\n    /// The background-image is not repeated.\r\n    member _.backgroundRepeatNoRepeat = mk \"background-repeat\" \"no-repeat\"\r\n    /// Sets this property to its default value.\r\n    member _.backgroundRepeatInitial = mk \"background-repeat\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.backgroundRepeatInheritFromParent = mk \"background-repeat\" \"inherit\"\r\n\r\n    /// Default value. Elements render in order, as they appear in the document flow.\r\n    member _.positionDefaultStatic = mk \"position\" \"static\"\r\n    /// The element is positioned relative to its first positioned (not static) ancestor element.\r\n    member _.positionAbsolute = mk \"position\" \"absolute\"\r\n    /// The element is positioned relative to the browser window\r\n    member _.positionFixed = mk \"position\" \"fixed\"\r\n    /// The element is positioned relative to its normal position, so \"left:20px\" adds 20 pixels to the element's LEFT position.\r\n    member _.positionRelative = mk \"position\" \"relative\"\r\n    /// The element is positioned based on the user's scroll position\r\n    ///\r\n    /// A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed).\r\n    ///\r\n    /// Note: Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a -webkit- prefix.\r\n    member _.positionSticky = mk \"position\" \"sticky\"\r\n    member _.positionInitial = mk \"position\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.positionInheritFromParent = mk \"position\" \"inherit\"\r\n\r\n    /// Default value. The width and height properties include the content, but does not include the padding, border, or margin.\r\n    member _.boxSizingContentBox = mk \"box-sizing\" \"content-box\"\r\n    /// The width and height properties include the content, padding, and border, but do not include the margin. Note that padding and border will be inside of the box.\r\n    member _.boxSizingBorderBox = mk \"box-sizing\" \"border-box\"\r\n    /// Sets this property to its default value.\r\n    member _.boxSizingInitial = mk \"box-sizing\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.boxSizingInheritFromParent = mk \"box-sizing\" \"inherit\"\r\n\r\n    /// Default value. The element offers no user-controllable method for resizing it.\r\n    member _.resizeNone = mk \"resize\" \"none\"\r\n    /// The element displays a mechanism for allowing the user to resize it, which may be resized both horizontally and vertically.\r\n    member _.resizeBoth = mk \"resize\" \"both\"\r\n    /// The element displays a mechanism for allowing the user to resize it in the horizontal direction.\r\n    member _.resizeHorizontal = mk \"resize\" \"horizontal\"\r\n    /// The element displays a mechanism for allowing the user to resize it in the vertical direction.\r\n    member _.resizeVertical = mk \"resize\" \"vertical\"\r\n    /// The element displays a mechanism for allowing the user to resize it in the block direction (either horizontally or vertically, depending on the writing-mode and direction value).\r\n    member _.resizeBlock = mk \"resize\" \"block\"\r\n    /// The element displays a mechanism for allowing the user to resize it in the inline direction (either horizontally or vertically, depending on the writing-mode and direction value).\r\n    member _.resizeInline' = mk \"resize\" \"inline\"\r\n    /// Sets this property to its default value.\r\n    member _.resizeInitial = mk \"resize\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.resizeInheritFromParent = mk \"resize\" \"inherit\"\r\n\r\n    /// Aligns the text to the left.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align\r\n    member _.textAlignLeft = mk \"text-align\" \"left\"\r\n    /// Aligns the text to the right.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=right\r\n    member _.textAlignRight = mk \"text-align\" \"right\"\r\n    /// Centers the text.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=center\r\n    member _.textAlignCenter = mk \"text-align\" \"center\"\r\n    /// Stretches the lines so that each line has equal width (like in newspapers and magazines).\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=justify\r\n    member _.textAlignJustify = mk \"text-align\" \"justify\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.textAlignInitial = mk \"text-align\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-align&preval=initial\r\n    member _.textAlignInheritFromParent = mk \"text-align\" \"inherit\"\r\n\r\n    /// Displays an element as an inline element (like `<span> `). Any height and width properties will have no effect.\r\n    member _.displayInlineElement = mk \"display\" \"inline\"\r\n    /// Displays an element as a block element (like `<p> `). It starts on a new line, and takes up the whole width.\r\n    member _.displayBlock = mk \"display\" \"block\"\r\n    /// Makes the container disappear, making the child elements children of the element the next level up in the DOM.\r\n    member _.displayContents = mk \"display\" \"contents\"\r\n    /// Displays an element as a block-level flex container.\r\n    member _.displayFlex = mk \"display\" \"flex\"\r\n    /// Displays an element as a block container box, and lays out its contents using flow layout.\r\n    ///\r\n    /// It always establishes a new block formatting context for its contents.\r\n    member _.displayFlowRoot = mk \"display\" \"flow-root\"\r\n    /// Displays an element as a block-level grid container.\r\n    member _.displayGrid = mk \"display\" \"grid\"\r\n    /// Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values.\r\n    member _.displayInlineBlock = mk \"display\" \"inline-block\"\r\n    /// Displays an element as an inline-level flex container.\r\n    member _.displayInlineFlex = mk \"display\" \"inline-flex\"\r\n    /// Displays an element as an inline-level grid container\r\n    member _.displayInlineGrid = mk \"display\" \"inline-grid\"\r\n    /// The element is displayed as an inline-level table.\r\n    member _.displayInlineTable = mk \"display\" \"inline-table\"\r\n    /// Let the element behave like a `<li> ` element\r\n    member _.displayListItem = mk \"display\" \"list-item\"\r\n    /// Displays an element as either block or inline, depending on context.\r\n    member _.displayRunIn = mk \"display\" \"run-in\"\r\n    /// Let the element behave like a `<table> ` element.\r\n    member _.displayTable = mk \"display\" \"table\"\r\n    /// Let the element behave like a <caption> element.\r\n    member _.displayTableCaption = mk \"display\" \"table-caption\"\r\n    /// Let the element behave like a <colgroup> element.\r\n    member _.displayTableColumnGroup = mk \"display\" \"table-column-group\"\r\n    /// Let the element behave like a <thead> element.\r\n    member _.displayTableHeaderGroup = mk \"display\" \"table-header-group\"\r\n    /// Let the element behave like a <tfoot> element.\r\n    member _.displayTableFooterGroup = mk \"display\" \"table-footer-group\"\r\n    /// Let the element behave like a <tbody> element.\r\n    member _.displayTableRowGroup = mk \"display\" \"table-row-group\"\r\n    /// Let the element behave like a <td> element.\r\n    member _.displayTableCell = mk \"display\" \"table-cell\"\r\n    /// Let the element behave like a <col> element.\r\n    member _.displayTableColumn = mk \"display\" \"table-column\"\r\n    /// Let the element behave like a <tr> element.\r\n    member _.displayTableRow = mk \"display\" \"table-row\"\r\n    /// The element is completely removed.\r\n    member _.displayNone = mk \"display\" \"none\"\r\n    /// Sets this property to its default value.\r\n    member _.displayInitial = mk \"display\" \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    member _.displayInheritFromParent = mk \"display\" \"inherit\"\r\n\r\n    /// The zIndex property sets or returns the stack order of a positioned element.\r\n    ///\r\n    /// An element with greater stack order (1) is always in front of another element with lower stack order (0).\r\n    ///\r\n    /// **Tip**: A positioned element is an element with the position property set to: relative, absolute, or fixed.\r\n    ///\r\n    /// **Tip**: This property is useful if you want to create overlapping elements.\r\n    member _.zIndex(value: int) = mk \"z-index\" (asString value)\r\n\r\n    /// Sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right,\r\n    /// margin-bottom, and margin-left.\r\n    member _.margin(value: int) = mk \"margin\" (asString value + \"px\")\r\n    /// Sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right,\r\n    /// margin-bottom, and margin-left.\r\n    member _.margin(value: ICssUnit) = mk \"margin\" (asString value)\r\n    /// Sets the margin area on the vertical and horizontal axis.\r\n    member _.margin(vertical: int, horizonal: int) =\r\n        mk \"margin\" (\r\n            (asString vertical) + \"px \" +\r\n            (asString horizonal) + \"px\"\r\n        )\r\n    /// Sets the margin area on the vertical and horizontal axis.\r\n    member _.margin(vertical: ICssUnit, horizonal: ICssUnit) =\r\n        mk \"margin\" (\r\n            (asString vertical) + \" \" +\r\n            (asString horizonal)\r\n        )\r\n    /// Sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right,\r\n    /// margin-bottom, and margin-left.\r\n    member _.margin(top: int, right: int, bottom: int, left: int) =\r\n        mk \"margin\" (\r\n            (asString top) + \"px \" +\r\n            (asString right) + \"px \" +\r\n            (asString bottom) + \"px \" +\r\n            (asString left) + \"px\"\r\n        )\r\n    /// Sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right,\r\n    /// margin-bottom, and margin-left.\r\n    member _.margin(top: ICssUnit, right: ICssUnit, bottom: ICssUnit, left: ICssUnit) =\r\n        mk \"margin\" (\r\n            (asString top) + \" \" +\r\n            (asString right) + \" \" +\r\n            (asString bottom) + \" \" +\r\n            (asString left)\r\n        )\r\n    /// Sets the margin area on the left side of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginLeft(value: int) = mk \"margin-left\" (asString value + \"px\")\r\n    /// Sets the margin area on the left side of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginLeft(value: ICssUnit) = mk \"margin-left\" (asString value)\r\n    /// sets the margin area on the right side of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginRight(value: int) = mk \"margin-right\" (asString value + \"px\")\r\n    /// sets the margin area on the right side of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginRight(value: ICssUnit) = mk \"margin-right\" (asString value)\r\n    /// Sets the margin area on the top of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginTop(value: int) = mk \"margin-top\" (asString value + \"px\")\r\n    /// Sets the margin area on the top of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginTop(value: ICssUnit) = mk \"margin-top\" (asString value)\r\n    /// Sets the margin area on the bottom of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginBottom(value: int) = mk \"margin-bottom\" (asString value + \"px\")\r\n    /// Sets the margin area on the bottom of an element. A positive value places it farther from its\r\n    /// neighbors, while a negative value places it closer.\r\n    member _.marginBottom(value: ICssUnit) = mk \"margin-bottom\" (asString value)\r\n\r\n    /// Sets the padding area on all four sides of an element. It is a shorthand for padding-top,\r\n    /// padding-right, padding-bottom, and padding-left.\r\n    member _.padding(value: int) = mk \"padding\" (asString value + \"px\")\r\n    /// Sets the padding area on all four sides of an element. It is a shorthand for padding-top,\r\n    /// padding-right, padding-bottom, and padding-left.\r\n    member _.padding(value: ICssUnit) = mk \"padding\" (asString value)\r\n    /// Sets the padding area for vertical and horizontal axis.\r\n    member _.padding(vertical: ICssUnit, horizontal: ICssUnit) =\r\n        mk \"padding\" (\r\n            (asString vertical) + \" \" +\r\n            (asString horizontal)\r\n        )\r\n    /// Sets the padding area on all four sides of an element. It is a shorthand for padding-top,\r\n    /// padding-right, padding-bottom, and padding-left.\r\n    member _.padding(top: ICssUnit, right: ICssUnit, bottom: ICssUnit, left: ICssUnit) =\r\n        mk \"padding\" (\r\n            (asString top) + \" \" +\r\n            (asString right) + \" \" +\r\n            (asString bottom) + \" \" +\r\n            (asString left)\r\n        )\r\n    /// Sets the height of the padding area on the bottom of an element.\r\n    member _.paddingBottom(value: int) = mk \"padding-bottom\" (asString value + \"px\")\r\n    /// Sets the height of the padding area on the bottom of an element.\r\n    member _.paddingBottom(value: ICssUnit) = mk \"padding-bottom\" (asString value)\r\n    /// Sets the width of the padding area to the left of an element.\r\n    member _.paddingLeft(value: int) = mk \"padding-left\" (asString value + \"px\")\r\n    /// Sets the width of the padding area to the left of an element.\r\n    member _.paddingLeft(value: ICssUnit) = mk \"padding-left\" (asString value)\r\n    /// Sets the width of the padding area on the right of an element.\r\n    member _.paddingRight(value: int) = mk \"padding-right\" (asString value + \"px\")\r\n    /// Sets the width of the padding area on the right of an element.\r\n    member _.paddingRight(value: ICssUnit) = mk \"padding-right\" (asString value)\r\n    /// Sets the height of the padding area on the top of an element.\r\n    member _.paddingTop(value: int) = mk \"padding-top\" (asString value + \"px\")\r\n    /// Sets the height of the padding area on the top of an element.\r\n    member _.paddingTop(value: ICssUnit) = mk \"padding-top\" (asString value)\r\n\r\n    /// Sets the flex shrink factor of a flex item. If the size of all flex items is larger than\r\n    /// the flex container, items shrink to fit according to flex-shrink.\r\n    member _.flexShrink(value: int) = mk \"flex-shrink\" (asString value)\r\n    /// Sets the initial main size of a flex item. It sets the size of the content box unless\r\n    /// otherwise set with box-sizing.\r\n    member _.flexBasis (value: int) = mk \"flex-basis\" (asString value + \"px\")\r\n    /// Sets the initial main size of a flex item. It sets the size of the content box unless\r\n    /// otherwise set with box-sizing.\r\n    member _.flexBasis (value: ICssUnit) = mk \"flex-basis\" (asString value)\r\n    /// Sets the flex grow factor of a flex item main size. It specifies how much of the remaining\r\n    /// space in the flex container should be assigned to the item (the flex grow factor).\r\n    member _.flexGrow (value: int) = mk \"flex-grow\" (asString value)\r\n    /// Shorthand of flex-grow, flex-shrink and flex-basis\r\n    member _.flex (grow: int, ?shrink: int, ?basis: ICssUnit) = mk \"flex\" (asString grow + \" \" + asString shrink + \" \" + asString basis)\r\n    /// Shorthand of flex-grow, flex-shrink and flex-basis\r\n    member _.flex (value: string) = mk \"flex\" value\r\n\r\n    /// Sets the width of each individual grid column in pixels.\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-columns: 100px 200px 100px;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// gridTemplateColumns: [100; 200; 100]\r\n    /// ```\r\n    member _.gridTemplateColumns(value: int seq) =\r\n        let addPixels = fun x -> x + \"px\"\r\n        mk \"grid-template-columns\" (value |> Seq.map (asString >> addPixels) |> String.concat \" \")\r\n    /// Sets the width of each individual grid column.\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-columns: 1fr 1fr 2fr;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// gridTemplateColumns: [length.fr 1; length.fr 1; length.fr 2]\r\n    /// ```\r\n    member _.gridTemplateColumns(value: ICssUnit seq) =\r\n        mk \"grid-template-columns\" (value |> Seq.map asString |> String.concat \" \")\r\n    /// Sets the width of each individual grid column. It can also name the lines between them\r\n    /// There can be multiple names for the same line\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-columns: [first-line] auto [first-line-end second-line-start] 100px [second-line-end];\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateColumns [\r\n    ///     grid.namedLine \"first-line\"\r\n    ///     grid.templateWidth length.auto\r\n    ///     grid.namedLines [\"first-line-end second-line-start\"]\r\n    ///     grid.templateWidth 100\r\n    ///     grid.namedLine \"second-line-end\"\r\n    /// ]\r\n    /// ```\r\n    member _.gridTemplateColumns(value: IGridTemplateItem seq) =\r\n        mk \"grid-template-columns\" (value |> Seq.map asString |> String.concat \" \")\r\n    /// Sets the width of a number of grid columns to the defined width, as well as naming the lines between them\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-columns: repeat(3, 1fr [col-start]);\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateColumns (3, length.fr 1, \"col-start\")\r\n    /// ```\r\n    member _.gridTemplateColumns(count: int, size: ICssUnit, ?areaName: string) =\r\n        let areaName = match areaName with Some n -> \" [\" + n + \"]\" | None -> \"\"\r\n        mk \"grid-template-columns\" (\r\n            \"repeat(\" +\r\n            (asString count) + \", \" +\r\n            (asString size) + areaName + \")\"\r\n        )\r\n    /// Sets the width of a number of grid rows to the defined width\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-rows: 100px 200px 100px;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateRows [100, 200, 100]\r\n    /// ```\r\n    member _.gridTemplateRows(value: int seq) =\r\n        let addPixels = (fun x -> x + \"px\")\r\n        mk \"grid-template-rows\" (value |> Seq.map (asString >> addPixels) |> String.concat \" \")\r\n    /// Sets the width of a number of grid rows to the defined width\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-rows: 1fr 10% 250px auto;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateRows [length.fr 1; length.percent 10; length.px 250; length.auto]\r\n    /// ```\r\n    member _.gridTemplateRows(value: ICssUnit seq) =\r\n        mk \"grid-template-rows\" (value |> Seq.map asString |> String.concat \" \")\r\n    /// Sets the width of a number of grid rows to the defined width as well as naming the spaces between\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-rows: [row-1-start] 1fr [row-1-end row-2-start] 1fr [row-2-end];\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateRows [\r\n    ///     grid.namedLine \"row-1-start\"\r\n    ///     grid.templateWidth (length.fr 1)\r\n    ///     grid.namedLines [\"row-1-end\"; \"row-2-start\"]\r\n    ///     grid.templateWidth (length.fr 1)\r\n    ///     grid.namedLine \"row-2-end\"\r\n    /// ]\r\n    /// ```\r\n    member _.gridTemplateRows(value: IGridTemplateItem seq) =\r\n        mk \"grid-template-rows\" (value |> Seq.map asString |> String.concat \" \")\r\n    /// Sets the width of a number of grid rows to the defined width\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-rows: repeat(3, 10%);\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateRows (3, length.percent 10)\r\n    /// ```\r\n    member _.gridTemplateRows(count: int, size: ICssUnit, ?areaName: string) =\r\n        let areaName = match areaName with Some n -> \" [\" + n + \"]\" | None -> \"\"\r\n        mk \"grid-template-rows\" (\r\n            \"repeat(\"+\r\n            (asString count) + \", \" +\r\n            (asString size) + areaName + \")\"\r\n        )\r\n    /// 2D representation of grid layout as blocks with names\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-areas:\r\n    ///     'header header header header'\r\n    ///     'nav nav . sidebar'\r\n    ///     'footer footer footer footer';\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateAreas [\r\n    ///     [\"header\"; \"header\"; \"header\"; \"header\" ]\r\n    ///     [\"nav\"   ; \"nav\"   ; \".\"     ; \"sidebar\"]\r\n    ///     [\"footer\"; \"footer\"; \"footer\"; \"footer\" ]\r\n    /// ]\r\n    /// ```\r\n    member _.gridTemplateAreas(value: string list list) =\r\n        let wrapLine = (fun x -> \"'\" + x + \"'\")\r\n        let lines = List.map (String.concat \" \" >> wrapLine) value\r\n        let block = String.concat \"\\n\" lines\r\n        mk \"grid-template-areas\" block\r\n    /// 2D representation of grid layout as blocks with names\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-areas:\r\n    ///     'header header header header'\r\n    ///     'nav nav . sidebar'\r\n    ///     'footer footer footer footer';\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateAreas [|\r\n    ///     [|\"header\"; \"header\"; \"header\"; \"header\" |]\r\n    ///     [|\"nav\"   ; \"nav\"   ; \".\"     ; \"sidebar\"|]\r\n    ///     [|\"footer\"; \"footer\"; \"footer\"; \"footer\" |]\r\n    /// |]\r\n    /// ```\r\n    member _.gridTemplateAreas(value: string[][]) =\r\n        let wrapLine = (fun x -> \"'\" + x + \"'\")\r\n        let lines = Array.map (String.concat \" \" >> wrapLine) value\r\n        let block = String.concat \"\\n\" lines\r\n        mk \"grid-template-areas\" block\r\n    /// One-dimensional alternative to the nested list. For column-based layouts\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template-areas: 'first second third fourth';\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplateAreas [\"first\"; \"second\"; \"third\"; \"fourth\"]\r\n    /// ```\r\n    member _.gridTemplateAreas(value: string seq) =\r\n        let block = String.concat \" \" value\r\n        mk \"grid-template-areas\" (\"'\" + block + \"'\")\r\n    /// Specifies the size of the grid lines. You can think of it like\r\n    /// setting the width of the gutters between the columns.\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// column-gap: 10px;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.columnGap 10\r\n    /// ```\r\n    member _.columnGap(value: int) =\r\n        mk \"column-gap\" (asString value + \"px\")\r\n    /// Specifies the size of the grid lines. You can think of it like\r\n    /// setting the width of the gutters between the columns.\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// column-gap: 1em;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.columnGap (length.em 1)\r\n    /// ```\r\n    member _.columnGap(value: ICssUnit) =\r\n        mk \"column-gap\" (asString value)\r\n    /// Specifies the size of the grid lines. You can think of it like\r\n    /// setting the width of the gutters between the rows.\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// row-gap: 10px;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.rowGap 10\r\n    /// ```\r\n    member _.rowGap(value: int) =\r\n        mk \"row-gap\" (asString value + \"px\")\r\n    /// Specifies the size of the grid lines. You can think of it like\r\n    /// setting the width of the gutters between the rows.\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// row-gap: 1em;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.rowGap (length.em 1)\r\n    /// ```\r\n    member _.rowGap(value: ICssUnit) =\r\n        mk \"row-gap\" (asString value)\r\n    /// Specifies the size of the grid lines. You can think of it like\r\n    /// setting the width of the gutters between the rows/columns.\r\n    ///\r\n    /// _Shorthand for `rowGap` and `columnGap`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// gap: 1em 2em;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gap (length.em 1, length.em 2)\r\n    /// ```\r\n    member _.gap(rowGap: ICssUnit, columnGap: ICssUnit) =\r\n        mk \"gap\" (\r\n            (asString rowGap) + \" \" +\r\n            (asString columnGap)\r\n        )\r\n    member _.gap(rowColumnGap: ICssUnit) =\r\n        mk \"gap\" (\r\n            (asString rowColumnGap) + \" \" +\r\n            (asString rowColumnGap)\r\n        )\r\n    /// Sets where an item in the grid starts\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// When there are multiple named lines with the same name, you can specify which one by count\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column-start: col 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumnStart (\"col\", 2)\r\n    /// ```\r\n    member _.gridColumnStart(value: string, ?count: int) =\r\n        mk \"grid-column-start\" (asString value + \" \" + (asString count))\r\n    /// Sets where an item in the grid starts\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column-start: 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumnStart 2\r\n    /// ```\r\n    member _.gridColumnStart(value: int) = mk \"grid-column-start\" (asString value)\r\n    /// Sets where an item in the grid starts\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column-start: span odd-col;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumnStart (gridColumn.span \"odd-col\")\r\n    /// ```\r\n    member _.gridColumnStart(value: IGridSpan) = mk \"grid-column-start\" (asString value)\r\n    /// Sets where an item in the grid ends\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _When there are multiple named lines with the same name, you can specify which one by count_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column-end: odd-col 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumnEnd (\"odd-col\", 2)\r\n    /// ```\r\n    member _.gridColumnEnd(value: string, ?count: int) =\r\n        mk \"grid-column-end\" (asString value + \" \" + (asString count))\r\n    /// Sets where an item in the grid ends\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column-end: 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumnEnd 2\r\n    /// ```\r\n    member _.gridColumnEnd(value: int) = mk \"grid-column-end\" (asString value)\r\n    /// Sets where an item in the grid ends\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column-end: span 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumnEnd (gridColumn.span 2)\r\n    /// ```\r\n    member _.gridColumnEnd(value: IGridSpan) = mk \"grid-column-end\" (asString value)\r\n    /// Sets where an item in the grid starts\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row-start: col 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRowStart (\"col\", 2)\r\n    /// ```\r\n    member _.gridRowStart(value: string, ?count: int) =\r\n        mk \"grid-row-start\" (asString value + \" \" + (asString count))\r\n    /// Sets where an item in the grid starts\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row-start: 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRowStart 2\r\n    /// ```\r\n    member _.gridRowStart(value: int) = mk \"grid-row-start\" (asString value)\r\n    /// Sets where an item in the grid starts\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row-start: span odd-col;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRowStart (gridRow.span \"odd-col\")\r\n    /// ```\r\n    member _.gridRowStart(value: IGridSpan) = mk \"grid-row-start\" (asString value)\r\n    /// Sets where an item in the grid ends\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _When there are multiple named lines with the same name, you can specify which one by count_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row-end: odd-col 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRowEnd (\"odd-col\", 2)\r\n    /// ```\r\n    member _.gridRowEnd(value: string, ?count: int) =\r\n        mk \"grid-row-end\" (asString value + \" \" + (asString count))\r\n    /// Sets where an item in the grid ends\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row-end: 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRowEnd 2\r\n    /// ```\r\n    member _.gridRowEnd(value: int) = mk \"grid-row-end\" (asString value)\r\n    /// Sets where an item in the grid ends\r\n    /// The value can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row-end: span 2;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRowEnd (gridRow.span 2)\r\n    /// ```\r\n    member _.gridRowEnd(value: IGridSpan) = mk \"grid-row-end\" (asString value)\r\n    /// Determines a grid item’s location within the grid by referring to specific grid lines.\r\n    /// start is the line where the item begins, end' is the line where it ends.\r\n    /// They can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _Shorthand for `gridColumnStart` and `gridColumnEnds`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column: col-2 / col-4;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumn (\"col-2\", \"col-4\")\r\n    /// ```\r\n    member _.gridColumn(start: string, end': string) =\r\n        mk \"grid-column\" (start + \" / \" + end')\r\n    /// Determines a grid item’s location within the grid by referring to specific grid lines.\r\n    /// start is the line where the item begins, end' is the line where it ends.\r\n    /// They can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _Shorthand for `gridColumnStart` and `gridColumnEnds`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column: 1 / 3;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumn (1, 3)\r\n    /// ```\r\n    member _.gridColumn(start: int, end': int) =\r\n        mk \"grid-column\" (asString start + \" / \" + asString end')\r\n    /// Determines a grid item’s location within the grid by referring to specific grid lines.\r\n    /// start is the line where the item begins, end' is the line where it ends.\r\n    /// They can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _Shorthand for `gridColumnStart` and `gridColumnEnds`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-column: span 2 / span 3;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridColumn (gridColumn.span 2, gridColumn.span 3)\r\n    /// ```\r\n    member _.gridColumn(start: IGridSpan, end': IGridSpan) =\r\n        mk \"grid-column\" (asString start + \" / \" + asString end')\r\n    /// Determines a grid item’s location within the grid by referring to specific grid lines.\r\n    /// start is the line where the item begins, end' is the line where it ends.\r\n    /// They can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _Shorthand for `gridRowStart` and `gridRowEnds`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row: row-2 / row-4;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRow (\"row-2\", \"row-4\")\r\n    /// ```\r\n    member _.gridRow(start: string, end': string) =\r\n        mk \"grid-row\" (start + \" / \" + end')\r\n    /// Determines a grid item’s location within the grid by referring to specific grid lines.\r\n    /// start is the line where the item begins, end' is the line where it ends.\r\n    /// They can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _Shorthand for `gridRowStart` and `gridRowEnds`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row: 2 / 4;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRow (2, 4)\r\n    /// ```\r\n    member _.gridRow(start: int, end': int) =\r\n        mk \"grid-row\" (asString start + \" / \" + asString end')\r\n    /// Determines a grid item’s location within the grid by referring to specific grid lines.\r\n    /// start is the line where the item begins, end' is the line where it ends.\r\n    /// They can be one of the following options:\r\n    /// - a named line\r\n    /// - a numbered line\r\n    /// - span until a named line was hit\r\n    /// - span over a specified number of lines\r\n    ///\r\n    ///\r\n    /// _Shorthand for `gridRowStart` and `gridRowEnds`_\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-row: span 2 / span 3;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridRow (gridRow.span 2, gridRow.span 3)\r\n    /// ```\r\n    member _.gridRow(start: IGridSpan, end': IGridSpan) =\r\n        mk \"grid-row\" (asString start + \" / \" + asString end')\r\n    /// Sets the named grid area the item is placed in\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-area: header;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridArea \"header\"\r\n    /// ```\r\n    member _.gridArea(value: string) =\r\n        mk \"grid-area\" (asString value)\r\n    /// Shorthand for `grid-template-areas`, `grid-template-columns` and `grid-template-rows`.\r\n    ///\r\n    /// Documentation: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template\r\n    ///\r\n    /// **CSS**\r\n    /// ```css\r\n    /// grid-template:  [header-top] 'a a a'      [header-bottom]\r\n    ///                   [main-top] 'b b b' 1fr  [main-bottom]\r\n    ///                              / auto 1fr auto;\r\n    /// ```\r\n    /// **F#**\r\n    /// ```f#\r\n    /// style.gridTemplate \"[header-top] 'a a a'      [header-bottom] \" +\r\n    ///                      \"[main-top] 'b b b' 1fr  [main-bottom] \" +\r\n    ///                                \"/ auto 1fr auto\"\r\n    /// ```\r\n    member _.gridTemplate(value: string) =\r\n        mk \"grid-template\" (asString value)\r\n    member _.transition(value: string) =\r\n        mk \"transition\" value\r\n    /// Sets the length of time a transition animation should take to complete. By default, the\r\n    /// value is 0s, meaning that no animation will occur.\r\n    member _.transitionDuration(timespan: TimeSpan) =\r\n        mk \"transition-duration\" (asString timespan.TotalMilliseconds + \"ms\")\r\n    /// Sets the length of time a transition animation should take to complete. By default, the\r\n    /// value is 0s, meaning that no animation will occur.\r\n    member _.transitionDurationSeconds(n: float) =\r\n        mk \"transition-duration\" (asString n + \"s\")\r\n    /// Sets the length of time a transition animation should take to complete. By default, the\r\n    /// value is 0s, meaning that no animation will occur.\r\n    member _.transitionDurationMilliseconds(n: float) =\r\n        mk \"transition-duration\" (asString n + \"ms\")\r\n    /// Sets the length of time a transition animation should take to complete. By default, the\r\n    /// value is 0s, meaning that no animation will occur.\r\n    member _.transitionDurationSeconds(n: int) =\r\n        mk \"transition-duration\" (asString n + \"s\")\r\n    /// Sets the length of time a transition animation should take to complete. By default, the\r\n    /// value is 0s, meaning that no animation will occur.\r\n    member _.transitionDurationMilliseconds(n: int) =\r\n        mk \"transition-duration\" (asString n + \"ms\")\r\n    /// Specifies the duration to wait before starting a property's transition effect when its value changes.\r\n    member _.transitionDelay(timespan: TimeSpan) =\r\n        mk \"transition-delay\" (asString timespan.TotalMilliseconds + \"ms\")\r\n    /// Specifies the duration to wait before starting a property's transition effect when its value changes.\r\n    member _.transitionDelaySeconds(n: float) =\r\n        mk \"transition-delay\" (asString n + \"s\")\r\n    /// Specifies the duration to wait before starting a property's transition effect when its value changes.\r\n    member _.transitionDelayMilliseconds(n: float) =\r\n        mk \"transition-delay\" (asString n + \"ms\")\r\n    /// Specifies the duration to wait before starting a property's transition effect when its value changes.\r\n    member _.transitionDelaySeconds(n: int) =\r\n        mk \"transition-delay\" (asString n + \"s\")\r\n    /// Specifies the duration to wait before starting a property's transition effect when its value changes.\r\n    member _.transitionDelayMilliseconds(n: int) =\r\n        mk \"transition-delay\" (asString n + \"ms\")\r\n    /// Sets the CSS properties to which a transition effect should be applied.\r\n    member _.transitionProperty ([<ParamArray>] properties: ITransitionProperty[]) =\r\n        mk \"transition-property\" (String.concat \",\" (properties |> Array.map asString))\r\n    /// Sets the CSS properties to which a transition effect should be applied.\r\n    member _.transitionProperty (properties: ITransitionProperty list) =\r\n        mk \"transition-property\" (String.concat \",\" (properties |> List.map asString))\r\n    /// Sets the CSS properties to which a transition effect should be applied.\r\n    member _.transitionProperty (property: ITransitionProperty) =\r\n        mk \"transition-property\" (asString property)\r\n    /// Sets the CSS properties to which a transition effect should be applied.\r\n    member _.transitionProperty (property: string) =\r\n        mk \"transition-property\" property\r\n\r\n    /// Sets the size of the font.\r\n    ///\r\n    /// This property is also used to compute the size of em, ex, and other relative <length> units.\r\n    member _.fontSize(size: int) = mk \"font-size\" (asString size + \"px\")\r\n    /// Sets the size of the font.\r\n    ///\r\n    /// This property is also used to compute the size of em, ex, and other relative <length> units.\r\n    member _.fontSize(size: ICssUnit) = mk \"font-size\" (asString size)\r\n    /// Specifies the height of a text lines.\r\n    ///\r\n    /// This property is also used to compute the size of em, ex, and other relative <length> units.\r\n    ///\r\n    /// Note: Negative values are not allowed.\r\n    member _.lineHeight(size: int) = mk \"line-height\" (asString size + \"px\")\r\n    /// Specifies the height of a text lines.\r\n    ///\r\n    /// This property is also used to compute the size of em, ex, and other relative <length> units.\r\n    ///\r\n    /// Note: Negative values are not allowed.\r\n    member _.lineHeight(size: ICssUnit) = mk \"line-height\" (asString size)\r\n    /// Sets the background color of an element.\r\n    member _.backgroundColor (color: string) = mk \"background-color\" color\r\n    /// Sets the color of the insertion caret, the visible marker where the next character typed will be inserted.\r\n    ///\r\n    /// This is sometimes referred to as the text input cursor. The caret appears in elements such as <input> or\r\n    /// those with the contenteditable attribute. The caret is typically a thin vertical line that flashes to\r\n    /// help make it more noticeable. By default, it is black, but its color can be altered with this property.\r\n    member _.caretColor (color: string) = mk \"caret-color\" color\r\n    /// Sets the foreground color value of an element's text and text decorations, and sets the\r\n    /// `currentcolor` value. `currentcolor` may be used as an indirect value on other properties\r\n    /// and is the default for other color properties, such as border-color.\r\n    member _.color (color: string) = mk \"color\" color\r\n    /// Specifies the vertical position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.top(value: int) = mk \"top\" (asString value + \"px\")\r\n    /// Specifies the vertical position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.top(value: ICssUnit) = mk \"top\" (asString value)\r\n    /// Specifies the vertical position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.bottom(value: int) = mk \"bottom\" (asString value + \"px\")\r\n    /// Specifies the vertical position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.bottom(value: ICssUnit) = mk \"bottom\" (asString value)\r\n    /// Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.left(value: int) = mk \"left\" (asString value + \"px\")\r\n    /// Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.left(value: ICssUnit) = mk \"left\" (asString value)\r\n    /// Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.right(value: int) = mk \"right\" (asString value + \"px\")\r\n    /// Specifies the horizontal position of a positioned element. It has no effect on non-positioned elements.\r\n    member _.right(value: ICssUnit) = mk \"right\" (asString value)\r\n\r\n    /// Sets an element's bottom border. It sets the values of border-bottom-width,\r\n    /// border-bottom-style and border-bottom-color.\r\n    member _.borderBottom(width: ICssUnit, style: IBorderStyle, color: string) =\r\n        mk \"border-bottom\" (\r\n            (asString width) + \" \" +\r\n            (asString style) + \" \" +\r\n            color\r\n        )\r\n\r\n    /// The outline-offset property adds space between an outline and the edge or border of an element.\r\n    ///\r\n    /// The space between an element and its outline is transparent.\r\n    ///\r\n    /// Outlines differ from borders in three ways:\r\n    ///\r\n    ///  - An outline is a line drawn around elements, outside the border edge\r\n    ///  - An outline does not take up space\r\n    ///  - An outline may be non-rectangular\r\n    ///\r\n    member _.outlineOffset (offset:int) =\r\n        mk \"outline-width\" (asString offset + \"px\")\r\n\r\n    /// The outline-offset property adds space between an outline and the edge or border of an element.\r\n    ///\r\n    /// The space between an element and its outline is transparent.\r\n    ///\r\n    /// Outlines differ from borders in three ways:\r\n    ///\r\n    ///  - An outline is a line drawn around elements, outside the border edge\r\n    ///  - An outline does not take up space\r\n    ///  - An outline may be non-rectangular\r\n    ///\r\n    member _.outlineOffset (offset: ICssUnit) =\r\n        mk \"outline-width\" (asString offset)\r\n\r\n    /// An outline is a line that is drawn around elements (outside the borders) to make the element \"stand out\".\r\n    ///\r\n    /// The `outline-color` property specifies the color of an outline.\r\n\r\n    /// **Note**: Always declare the outline-style property before the outline-color property. An element must have an outline before you change the color of it.\r\n    member _.outlineColor (color: string) =\r\n        mk \"outline-color\" color\r\n\r\n    /// Set an element's left border.\r\n    member _.borderLeft(width: ICssUnit, style: IBorderStyle, color: string) =\r\n        mk \"border-left\" (\r\n            (asString width) + \" \" +\r\n            (asString style) + \" \" +\r\n            color\r\n        )\r\n    /// Set an element's right border.\r\n    member _.borderRight(width: ICssUnit, style: IBorderStyle, color: string) =\r\n        mk \"border-right\" (\r\n            (asString width) + \" \" +\r\n            (asString style) + \" \" +\r\n            color\r\n        )\r\n    /// Set an element's top border.\r\n    member _.borderTop(width: ICssUnit, style: IBorderStyle, color: string) =\r\n        mk \"border-top\" (\r\n            (asString width) + \" \" +\r\n            (asString style) + \" \" +\r\n            color\r\n        )\r\n    /// Sets the line style of an element's bottom border.\r\n    member _.borderBottomStyle(style: IBorderStyle) = mk \"border-bottom-style\" (asString style)\r\n    /// Sets the width of the bottom border of an element.\r\n    member _.borderBottomWidth (width: int) = mk \"border-bottom-width\" (asString width + \"px\")\r\n    /// Sets the width of the bottom border of an element.\r\n    member _.borderBottomWidth (width: ICssUnit) = mk \"border-bottom-width\" (asString width)\r\n    /// Sets the color of an element's bottom border.\r\n    ///\r\n    /// It can also be set with the shorthand CSS properties border-color or border-bottom.\r\n    member _.borderBottomColor (color: string) = mk \"border-bottom-color\" color\r\n    /// Sets the line style of an element's top border.\r\n    member _.borderTopStyle(style: IBorderStyle) = mk \"border-top-style\" (asString style)\r\n    /// Sets the width of the top border of an element.\r\n    member _.borderTopWidth (width: int) = mk \"border-top-width\" (asString width + \"px\")\r\n    /// Sets the width of the top border of an element.\r\n    member _.borderTopWidth (width: ICssUnit) = mk \"border-top-width\" (asString width)\r\n    /// Sets the color of an element's top border.\r\n    ///\r\n    /// It can also be set with the shorthand CSS properties border-color or border-bottom.\r\n    member _.borderTopColor (color: string) = mk \"border-top-color\" color\r\n    /// Sets the line style of an element's right border.\r\n    member _.borderRightStyle(style: IBorderStyle) = mk \"border-right-style\" (asString style)\r\n    /// Sets the width of the right border of an element.\r\n    member _.borderRightWidth (width: int) = mk \"border-right-width\" (asString width + \"px\")\r\n    /// Sets the width of the right border of an element.\r\n    member _.borderRightWidth (width: ICssUnit) = mk \"border-right-width\" (asString width)\r\n    /// Sets the color of an element's right border.\r\n    ///\r\n    /// It can also be set with the shorthand CSS properties border-color or border-bottom.\r\n    member _.borderRightColor (color: string) = mk \"border-right-color\" color\r\n    /// Sets the line style of an element's left border.\r\n    member _.borderLeftStyle(style: IBorderStyle) = mk \"border-left-style\" (asString style)\r\n    /// Sets the width of the left border of an element.\r\n    member _.borderLeftWidth (width: int) = mk \"border-left-width\" (asString width + \"px\")\r\n    /// Sets the width of the left border of an element.\r\n    member _.borderLeftWidth (width: ICssUnit) = mk \"border-left-width\" (asString width)\r\n    /// Sets the color of an element's left border.\r\n    ///\r\n    /// It can also be set with the shorthand CSS properties border-color or border-bottom.\r\n    member _.borderLeftColor (color: string) = mk \"border-left-color\" color\r\n    /// Sets an element's border.\r\n    ///\r\n    /// It sets the values of border-width, border-style, and border-color.\r\n    member _.border(width: ICssUnit, style: IBorderStyle, color: string) =\r\n        mk \"border\" (\r\n            (asString width) + \" \" +\r\n            (asString style) + \" \" +\r\n            color\r\n        )\r\n    /// Sets an element's border.\r\n    ///\r\n    /// It sets the values of border-width, border-style, and border-color.\r\n    member _.border(width: string, style: IBorderStyle, color: string) =\r\n        mk \"border\" (\r\n            width + \" \" +\r\n            (asString style) + \" \" +\r\n            color\r\n        )\r\n    /// Sets the color of an element's border.\r\n    member _.borderColor (color: string) = mk \"border-color\" color\r\n    /// Rounds the corners of an element's outer border edge. You can set a single radius to make\r\n    /// circular corners, or two radii to make elliptical corners.\r\n    member _.borderRadius (radius: int) = mk \"border-radius\" (asString radius + \"px\")\r\n    /// Rounds the corners of an element's outer border edge. You can set a single radius to make\r\n    /// circular corners, or two radii to make elliptical corners.\r\n    member _.borderRadius (radius: ICssUnit) = mk \"border-radius\" (asString radius)\r\n    /// Sets the width of an element's border.\r\n    member _.borderWidth (width: int) = mk \"border-width\" (asString width + \"px\")\r\n    /// Sets the width of an element's border.\r\n    member _.borderWidth (top: ICssUnit, ?right: ICssUnit) =\r\n        mk \"border-width\" (\r\n            asString top + (match right with Some x -> \" \" + asString x | None -> \"\"))\r\n    /// Sets the width of an element's border.\r\n    member _.borderWidth (top: ICssUnit, right: ICssUnit, bottom: ICssUnit, ?left: ICssUnit) =\r\n        mk \"border-width\" (\r\n            (asString top) + \" \" +\r\n            (asString right) + \" \" +\r\n            (asString bottom) +\r\n            (match left with Some x -> \" \" + asString x | None -> \"\"))\r\n    /// Sets one or more animations to apply to an element. Each name is an @keyframes at-rule that\r\n    /// sets the property values for the animation sequence.\r\n    member _.animationName(keyframeName: string) = mk \"animation-name\" keyframeName\r\n    /// Sets the length of time that an animation takes to complete one cycle.\r\n    member _.animationDuration(timespan: TimeSpan) = mk \"animation-duration\" (asString timespan.TotalMilliseconds + \"ms\")\r\n    /// Sets the length of time that an animation takes to complete one cycle.\r\n    member _.animationDuration(seconds: int) = mk \"animation-duration\" (asString seconds + \"s\")\r\n    /// Sets when an animation starts.\r\n    ///\r\n    /// The animation can start later, immediately from its beginning, or immediately and partway through the animation.\r\n    member _.animationDelay(timespan: TimeSpan) = mk \"animation-delay\" (asString timespan.TotalMilliseconds + \"ms\")\r\n    /// Sets when an animation starts.\r\n    ///\r\n    /// The animation can start later, immediately from its beginning, or immediately and partway through the animation.\r\n    member _.animationDelay(seconds: int) = mk \"animation-delay\" (asString seconds + \"s\")\r\n    /// The number of times the animation runs.\r\n    member _.animationDurationCount(count: int) = mk \"animation-duration-count\" (asString count)\r\n    /// Sets the font family for the font specified in a @font-face rule.\r\n    member _.fontFamily (family: string) = mk \"font-family\" family\r\n    /// Sets the color of decorations added to text by text-decoration-line.\r\n    member _.textDecorationColor(color: string) = mk \"text-decoration-color\" color\r\n    /// Sets the length of empty space (indentation) that is put before lines of text in a block.\r\n    member _.textIndent(value: int) = mk \"text-indent\" (asString value)\r\n    /// Sets the length of empty space (indentation) that is put before lines of text in a block.\r\n    member _.textIndent(value: string) = mk \"text-indent\" (asString value)\r\n    /// Sets the opacity of an element.\r\n    ///\r\n    /// Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\r\n    member _.opacity(value: double) = mk \"opacity\" (asString value)\r\n    /// Sets the minimum width of an element.\r\n    ///\r\n    /// It prevents the used value of the width property from becoming smaller than the value specified for min-width.\r\n    member _.minWidth (value: int) = mk \"min-width\" (asString value + \"px\")\r\n    /// Sets the minimum width of an element.\r\n    ///\r\n    /// It prevents the used value of the width property from becoming smaller than the value specified for min-width.\r\n    member _.minWidth (value: ICssUnit) = mk \"min-width\" (asString value)\r\n    /// Sets the minimum width of an element.\r\n    ///\r\n    /// It prevents the used value of the width property from becoming smaller than the value specified for min-width.\r\n    member _.minWidth (value: string) = mk \"min-width\" (asString value)\r\n    /// Sets the maximum width of an element.\r\n    ///\r\n    /// It prevents the used value of the width property from becoming larger than the value specified by max-width.\r\n    member _.maxWidth (value: int) = mk \"max-width\" (asString value + \"px\")\r\n    /// Sets the maximum width of an element.\r\n    ///\r\n    /// It prevents the used value of the width property from becoming larger than the value specified by max-width.\r\n    member _.maxWidth (value: ICssUnit) = mk \"max-width\" (asString value)\r\n    /// Sets the width of an element.\r\n    ///\r\n    /// By default, the property defines the width of the content area.\r\n    member _.width (value: int) = mk \"width\" (asString value + \"px\")\r\n    /// Sets the width of an element.\r\n    ///\r\n    /// By default, the property defines the width of the content area.\r\n    member _.width (value: ICssUnit) = mk \"width\" (asString value)\r\n\r\n    /// Sets one or more background images on an element.\r\n    member _.backgroundImage (value: string) = mk \"background-image\" (asString value)\r\n    /// Short-hand for `style.backgroundImage(sprintf \"url('%s')\" value)` to set the backround image using a url.\r\n    member _.backgroundImageUrl (value: string) = mk \"background-image\" (\"url('\" + value + \"')\")\r\n\r\n    /// Sets the color of an SVG shape.\r\n    member _.fill (color: string) = mk \"fill\" color\r\n\r\n/// Contains a list of HTML5 colors from https://htmlcolorcodes.com/color-names/\r\nmodule color =\r\n    /// Creates a color from components [hue](https://en.wikipedia.org/wiki/Hue), [saturation](https://en.wikipedia.org/wiki/Colorfulness) and [lightness](https://en.wikipedia.org/wiki/Lightness) where hue is a number that goes from 0 to 360 and both\r\n    /// the `saturation` and `lightness` go from 0 to 100 as they are percentages.\r\n    let hsl (hue: float, saturation: float, lightness: float) =\r\n        \"hsl(\" + (string hue) + \",\" + (string saturation) + \"%,\" + (string lightness) + \"%)\"\r\n    let rgb (r: int, g: int, b: int) =\r\n        \"rgb(\" + (string r) + \",\" + (string g) + \",\" + (string b) + \")\"\r\n    let rgba (r: int, g: int, b: int, a: float) =\r\n        \"rgba(\" + (string r) + \",\" + (string g) + \",\" + (string b) + \",\" + (string a) + \")\"\r\n    let [<Literal>] indianRed = \"#CD5C5C\"\r\n    let [<Literal>] lightCoral = \"#F08080\"\r\n    let [<Literal>] salmon = \"#FA8072\"\r\n    let [<Literal>] darkSalmon = \"#E9967A\"\r\n    let [<Literal>] lightSalmon = \"#FFA07A\"\r\n    let [<Literal>] crimson = \"#DC143C\"\r\n    let [<Literal>] red = \"#FF0000\"\r\n    let [<Literal>] fireBrick = \"#B22222\"\r\n    let [<Literal>] darkRed = \"#8B0000\"\r\n    let [<Literal>] pink = \"#FFC0CB\"\r\n    let [<Literal>] lightPink = \"#FFB6C1\"\r\n    let [<Literal>] hotPink = \"#FF69B4\"\r\n    let [<Literal>] deepPink = \"#FF1493\"\r\n    let [<Literal>] mediumVioletRed = \"#C71585\"\r\n    let [<Literal>] paleVioletRed = \"#DB7093\"\r\n    let [<Literal>] coral = \"#FF7F50\"\r\n    let [<Literal>] tomato = \"#FF6347\"\r\n    let [<Literal>] orangeRed = \"#FF4500\"\r\n    let [<Literal>] darkOrange = \"#FF8C00\"\r\n    let [<Literal>] orange = \"#FFA500\"\r\n    let [<Literal>] gold = \"#FFD700\"\r\n    let [<Literal>] yellow = \"#FFFF00\"\r\n    let [<Literal>] lightYellow = \"#FFFFE0\"\r\n    let [<Literal>] limonChiffon = \"#FFFACD\"\r\n    let [<Literal>] lightGoldenRodYellow = \"#FAFAD2\"\r\n    let [<Literal>] papayaWhip = \"#FFEFD5\"\r\n    let [<Literal>] moccasin = \"#FFE4B5\"\r\n    let [<Literal>] peachPuff = \"#FFDAB9\"\r\n    let [<Literal>] paleGoldenRod = \"#EEE8AA\"\r\n    let [<Literal>] khaki = \"#F0E68C\"\r\n    let [<Literal>] darkKhaki = \"#BDB76B\"\r\n    let [<Literal>] lavender = \"#E6E6FA\"\r\n    let [<Literal>] thistle = \"#D8BFD8\"\r\n    let [<Literal>] plum = \"#DDA0DD\"\r\n    let [<Literal>] violet = \"#EE82EE\"\r\n    let [<Literal>] orchid = \"#DA70D6\"\r\n    let [<Literal>] fuchsia = \"#FF00FF\"\r\n    let [<Literal>] magenta = \"#FF00FF\"\r\n    let [<Literal>] mediumOrchid = \"#BA55D3\"\r\n    let [<Literal>] mediumPurple = \"#9370DB\"\r\n    let [<Literal>] rebeccaPurple = \"#663399\"\r\n    let [<Literal>] blueViolet = \"#8A2BE2\"\r\n    let [<Literal>] darkViolet = \"#9400D3\"\r\n    let [<Literal>] darkOrchid = \"#9932CC\"\r\n    let [<Literal>] darkMagenta = \"#8B008B\"\r\n    let [<Literal>] purple = \"#800080\"\r\n    let [<Literal>] indigo = \"#4B0082\"\r\n    let [<Literal>] slateBlue = \"#6A5ACD\"\r\n    let [<Literal>] darkSlateBlue = \"#483D8B\"\r\n    let [<Literal>] mediumSlateBlue = \"#7B68EE\"\r\n    let [<Literal>] greenYellow = \"#ADFF2F\"\r\n    let [<Literal>] chartreuse = \"#7FFF00\"\r\n    let [<Literal>] lawnGreen = \"#7CFC00\"\r\n    let [<Literal>] lime = \"#00FF00\"\r\n    let [<Literal>] limeGreen = \"#32CD32\"\r\n    let [<Literal>] paleGreen = \"#98FB98\"\r\n    let [<Literal>] lightGreen = \"#90EE90\"\r\n    let [<Literal>] mediumSpringGreen = \"#00FA9A\"\r\n    let [<Literal>] springGreen = \"#00FF7F\"\r\n    let [<Literal>] mediumSeaGreen = \"#3CB371\"\r\n    let [<Literal>] seaGreen = \"#2E8B57\"\r\n    let [<Literal>] forestGreen = \"#228B22\"\r\n    let [<Literal>] green = \"#008000\"\r\n    let [<Literal>] darkGreen = \"#006400\"\r\n    let [<Literal>] yellowGreen = \"#9ACD32\"\r\n    let [<Literal>] oliveDrab = \"#6B8E23\"\r\n    let [<Literal>] olive = \"#808000\"\r\n    let [<Literal>] darkOliveGreen = \"#556B2F\"\r\n    let [<Literal>] mediumAquamarine = \"#66CDAA\"\r\n    let [<Literal>] darkSeaGreen = \"#8FBC8B\"\r\n    let [<Literal>] lightSeaGreen = \"#20B2AA\"\r\n    let [<Literal>] darkCyan = \"#008B8B\"\r\n    let [<Literal>] teal = \"#008080\"\r\n    let [<Literal>] aqua = \"#00FFFF\"\r\n    let [<Literal>] cyan = \"#00FFFF\"\r\n    let [<Literal>] lightCyan = \"#E0FFFF\"\r\n    let [<Literal>] paleTurqouise = \"#AFEEEE\"\r\n    let [<Literal>] aquaMarine = \"#7FFFD4\"\r\n    let [<Literal>] turqouise = \"#AFEEEE\"\r\n    let [<Literal>] mediumTurqouise = \"#48D1CC\"\r\n    let [<Literal>] darkTurqouise = \"#00CED1\"\r\n    let [<Literal>] cadetBlue = \"#5F9EA0\"\r\n    let [<Literal>] steelBlue = \"#4682B4\"\r\n    let [<Literal>] lightSteelBlue = \"#B0C4DE\"\r\n    let [<Literal>] powederBlue = \"#B0E0E6\"\r\n    let [<Literal>] lightBlue = \"#ADD8E6\"\r\n    let [<Literal>] skyBlue = \"#87CEEB\"\r\n    let [<Literal>] lightSkyBlue = \"#87CEFA\"\r\n    let [<Literal>] deepSkyBlue = \"#00BFFF\"\r\n    let [<Literal>] dodgerBlue = \"#1E90FF\"\r\n    let [<Literal>] cornFlowerBlue = \"#6495ED\"\r\n    let [<Literal>] royalBlue = \"#4169E1\"\r\n    let [<Literal>] blue = \"#0000FF\"\r\n    let [<Literal>] mediumBlue = \"#0000CD\"\r\n    let [<Literal>] darkBlue = \"#00008B\"\r\n    let [<Literal>] navy = \"#000080\"\r\n    let [<Literal>] midnightBlue = \"#191970\"\r\n    let [<Literal>] cornSilk = \"#FFF8DC\"\r\n    let [<Literal>] blanchedAlmond = \"#FFEBCD\"\r\n    let [<Literal>] bisque = \"#FFE4C4\"\r\n    let [<Literal>] navajoWhite = \"#FFDEAD\"\r\n    let [<Literal>] wheat = \"#F5DEB3\"\r\n    let [<Literal>] burlyWood = \"#DEB887\"\r\n    let [<Literal>] tan = \"#D2B48C\"\r\n    let [<Literal>] rosyBrown = \"#BC8F8F\"\r\n    let [<Literal>] sandyBrown = \"#F4A460\"\r\n    let [<Literal>] goldenRod = \"#DAA520\"\r\n    let [<Literal>] darkGoldenRod = \"#B8860B\"\r\n    let [<Literal>] peru = \"#CD853F\"\r\n    let [<Literal>] chocolate = \"#D2691E\"\r\n    let [<Literal>] saddleBrown = \"#8B4513\"\r\n    let [<Literal>] sienna = \"#A0522D\"\r\n    let [<Literal>] brown = \"#A52A2A\"\r\n    let [<Literal>] maroon = \"#A52A2A\"\r\n    let [<Literal>] white = \"#FFFFFF\"\r\n    let [<Literal>] snow = \"#FFFAFA\"\r\n    let [<Literal>] honeyDew = \"#F0FFF0\"\r\n    let [<Literal>] mintCream = \"#F5FFFA\"\r\n    let [<Literal>] azure = \"#F0FFFF\"\r\n    let [<Literal>] aliceBlue = \"#F0F8FF\"\r\n    let [<Literal>] ghostWhite = \"#F8F8FF\"\r\n    let [<Literal>] whiteSmoke = \"#F5F5F5\"\r\n    let [<Literal>] seaShell = \"#FFF5EE\"\r\n    let [<Literal>] beige = \"#F5F5DC\"\r\n    let [<Literal>] oldLace = \"#FDF5E6\"\r\n    let [<Literal>] floralWhite = \"#FFFAF0\"\r\n    let [<Literal>] ivory = \"#FFFFF0\"\r\n    let [<Literal>] antiqueWhite = \"#FAEBD7\"\r\n    let [<Literal>] linen = \"#FAF0E6\"\r\n    let [<Literal>] lavenderBlush = \"#FFF0F5\"\r\n    let [<Literal>] mistyRose = \"#FFE4E1\"\r\n    let [<Literal>] gainsBoro = \"#DCDCDC\"\r\n    let [<Literal>] lightGray = \"#D3D3D3\"\r\n    let [<Literal>] silver = \"#C0C0C0\"\r\n    let [<Literal>] darkGray = \"#A9A9A9\"\r\n    let [<Literal>] gray = \"#808080\"\r\n    let [<Literal>] dimGray = \"#696969\"\r\n    let [<Literal>] lightSlateGray = \"#778899\"\r\n    let [<Literal>] slateGray = \"#708090\"\r\n    let [<Literal>] darkSlateGray = \"#2F4F4F\"\r\n    let [<Literal>] black = \"#000000\"\r\n    let [<Literal>] transparent = \"transparent\"\r\n\r\n/// Contains a list of CSS Fonts from https://www.tutorialbrain.com/css_tutorial/css_font_family_list/\r\nmodule font =\r\n    let [<Literal>] abadiMTCondensedLight = \"Abadi MT Condensed Light\"\r\n    let [<Literal>] aharoni = \"Aharoni\"\r\n    let [<Literal>] aharoniBold = \"Aharoni Bold\"\r\n    let [<Literal>] aldhabi = \"Aldhabi\"\r\n    let [<Literal>] alternateGothic2BT = \"AlternateGothic2 BT\"\r\n    let [<Literal>] andaleMono = \"Andale Mono\"\r\n    let [<Literal>] andalus = \"Andalus\"\r\n    let [<Literal>] angsanaNew = \"Angsana New\"\r\n    let [<Literal>] angsanaUPC = \"AngsanaUPC\"\r\n    let [<Literal>] aparajita = \"Aparajita\"\r\n    let [<Literal>] appleChancery = \"Apple Chancery\"\r\n    let [<Literal>] arabicTypesetting = \"Arabic Typesetting\"\r\n    let [<Literal>] arial = \"Arial\"\r\n    let [<Literal>] arialBlack = \"Arial Black\"\r\n    let [<Literal>] arialNarrow = \"Arial narrow\"\r\n    let [<Literal>] arialNova = \"Arial Nova\"\r\n    let [<Literal>] arialRoundedMTBold = \"Arial Rounded MT Bold\"\r\n    let [<Literal>] arnoldboecklin = \"Arnoldboecklin\"\r\n    let [<Literal>] avantaGarde = \"Avanta Garde\"\r\n    let [<Literal>] bahnschrift = \"Bahnschrift\"\r\n    let [<Literal>] bahnschriftLight = \"Bahnschrift Light\"\r\n    let [<Literal>] bahnschriftSemiBold = \"Bahnschrift SemiBold\"\r\n    let [<Literal>] bahnschriftSemiLight = \"Bahnschrift SemiLight\"\r\n    let [<Literal>] baskerville = \"Baskerville\"\r\n    let [<Literal>] batang = \"Batang\"\r\n    let [<Literal>] batangChe = \"BatangChe\"\r\n    let [<Literal>] bigCaslon = \"Big Caslon\"\r\n    let [<Literal>] bizUDGothic = \"BIZ UDGothic\"\r\n    let [<Literal>] bizUDMinchoMedium = \"BIZ UDMincho Medium\"\r\n    let [<Literal>] blippo = \"Blippo\"\r\n    let [<Literal>] bodoniMT = \"Bodoni MT\"\r\n    let [<Literal>] bookAntiqua = \"Book Antiqua\"\r\n    let [<Literal>] Bookman = \"Bookman\"\r\n    let [<Literal>] bradlyHand = \"Bradley Hand\"\r\n    let [<Literal>] browalliaNew = \"Browallia New\"\r\n    let [<Literal>] browalliaUPC = \"BrowalliaUPC\"\r\n    let [<Literal>] brushScriptMT = \"Brush Script MT\"\r\n    let [<Literal>] brushScriptStd = \"Brush Script Std\"\r\n    let [<Literal>] brushStroke = \"Brushstroke\"\r\n    let [<Literal>] calibri = \"Calibri\"\r\n    let [<Literal>] calibriLight = \"Calibri Light\"\r\n    let [<Literal>] calistoMT = \"Calisto MT\"\r\n    let [<Literal>] cambodian = \"Cambodian\"\r\n    let [<Literal>] cambria = \"Cambria\"\r\n    let [<Literal>] cambriaMath = \"Cambria Math\"\r\n    let [<Literal>] candara = \"Candara\"\r\n    let [<Literal>] centuryGothic = \"Century Gothic\"\r\n    let [<Literal>] chalkDuster = \"Chalkduster\"\r\n    let [<Literal>] cherokee = \"Cherokee\"\r\n    let [<Literal>] comicSans = \"Comic Sans\"\r\n    let [<Literal>] comicSansMS = \"Comic Sans MS\"\r\n    let [<Literal>] consolas = \"Consolas\"\r\n    let [<Literal>] constantia = \"Constantia\"\r\n    let [<Literal>] copperPlate = \"Copperplate\"\r\n    let [<Literal>] copperPlateGothicLight = \"Copperplate Gothic Light\"\r\n    let [<Literal>] copperPlateGothicBold = \"Copperplate Gothic Bold\"\r\n    let [<Literal>] corbel = \"Corbel\"\r\n    let [<Literal>] cordiaNew = \"Cordia New\"\r\n    let [<Literal>] cordiaUPC = \"CordiaUPC\"\r\n    let [<Literal>] coronetScript = \"Coronet script\"\r\n    let [<Literal>] courier = \"Courier\"\r\n    let [<Literal>] courierNew = \"Courier New\"\r\n    let [<Literal>] daunPenh = \"DaunPenh\"\r\n    let [<Literal>] david = \"David\"\r\n    let [<Literal>] dengXian = \"DengXian\"\r\n    let [<Literal>] dfKaiSB = \"DFKai-SB\"\r\n    let [<Literal>] didot = \"Didot\"\r\n    let [<Literal>] dilleniaUPC = \"DilleniaUPC\"\r\n    let [<Literal>] dokChampa = \"DokChampa\"\r\n    let [<Literal>] dotum = \"Dotum\"\r\n    let [<Literal>] dotumChe = \"DotumChe\"\r\n    let [<Literal>] ebrima = \"Ebrima\"\r\n    let [<Literal>] estrangeloEdessa = \"Estrangelo Edessa\"\r\n    let [<Literal>] eucrosiaUPC = \"EucrosiaUPC\"\r\n    let [<Literal>] euphemia = \"Euphemia\"\r\n    let [<Literal>] fangSong = \"FangSong\"\r\n    let [<Literal>] florence = \"Florence\"\r\n    let [<Literal>] franklinGothicMedium = \"Franklin Gothic Medium\"\r\n    let [<Literal>] frankRuehl = \"FrankRuehl\"\r\n    let [<Literal>] fressiaUPC = \"FressiaUPC\"\r\n    let [<Literal>] futara = \"Futara\"\r\n    let [<Literal>] gabriola = \"Gabriola\"\r\n    let [<Literal>] garamond = \"Garamond\"\r\n    let [<Literal>] gautami = \"Gautami\"\r\n    let [<Literal>] geneva = \"Geneva\"\r\n    let [<Literal>] georgia = \"Georgia\"\r\n    let [<Literal>] georgiaPro = \"Georgia Pro\"\r\n    let [<Literal>] gillSans = \"Gill Sans\"\r\n    let [<Literal>] gillSansNova = \"Gill Sans Nova\"\r\n    let [<Literal>] gisha = \"Gisha\"\r\n    let [<Literal>] goudyOldStyle = \"Goudy Old Style\"\r\n    let [<Literal>] gulim = \"Gulim\"\r\n    let [<Literal>] gulimChe = \"GulimChe\"\r\n    let [<Literal>] gungsuh = \"Gungsuh\"\r\n    let [<Literal>] gungsuhChe = \"GungsuhChe\"\r\n    let [<Literal>] hebrew = \"Hebrew\"\r\n    let [<Literal>] helvetica = \"Helvetica\"\r\n    let [<Literal>] hoeflerText = \"Hoefler Text\"\r\n    let [<Literal>] holoLensMDL2Assets = \"HoloLens MDL2 Assets\"\r\n    let [<Literal>] impact = \"Impact\"\r\n    let [<Literal>] inkFree = \"Ink Free\"\r\n    let [<Literal>] irisUPC = \"IrisUPC\"\r\n    let [<Literal>] iskoolaPota = \"Iskoola Pota\"\r\n    let [<Literal>] japanese = \"Japanese\"\r\n    let [<Literal>] jasmineUPC = \"JasmineUPC\"\r\n    let [<Literal>] javaneseText = \"Javanese Text\"\r\n    let [<Literal>] jazzLET = \"Jazz LET\"\r\n    let [<Literal>] kaiTi = \"KaiTi\"\r\n    let [<Literal>] kalinga = \"Kalinga\"\r\n    let [<Literal>] kartika = \"Kartika\"\r\n    let [<Literal>] khmerUI = \"Khmer UI\"\r\n    let [<Literal>] kodchiangUPC = \"KodchiangUPC\"\r\n    let [<Literal>] kokila = \"Kokila\"\r\n    let [<Literal>] korean = \"Korean\"\r\n    let [<Literal>] lao = \"Lao\"\r\n    let [<Literal>] laoUI = \"Lao UI\"\r\n    let [<Literal>] latha = \"Latha\"\r\n    let [<Literal>] leelawadee = \"Leelawadee\"\r\n    let [<Literal>] leelawadeeUI = \"Leelawadee UI\"\r\n    let [<Literal>] leelawadeeUISemilight = \"Leelawadee UI Semilight\"\r\n    let [<Literal>] levenimMT = \"Levenim MT\"\r\n    let [<Literal>] lilyUPC = \"LilyUPC\"\r\n    let [<Literal>] lucidaBright = \"Lucida Bright\"\r\n    let [<Literal>] lucidaConsole = \"Lucida Console\"\r\n    let [<Literal>] lucidaHandwriting = \"Lucida Handwriting\"\r\n    let [<Literal>] lucidaSans = \"Lucida Sans\"\r\n    let [<Literal>] lucidaSansTypewriter = \"Lucida Sans Typewriter\"\r\n    let [<Literal>] lucidaSansUnicode = \"Lucida Sans Unicode\"\r\n    let [<Literal>] lucidaTypewriter = \"Lucidatypewriter\"\r\n    let [<Literal>] luminari = \"Luminari\"\r\n    let [<Literal>] malgunGothic = \"Malgun Gothic\"\r\n    let [<Literal>] malgunGothicSemilight = \"Malgun Gothic Semilight\"\r\n    let [<Literal>] mangal = \"Mangal\"\r\n    let [<Literal>] markerFelt = \"Marker Felt\"\r\n    let [<Literal>] marlett = \"Marlett\"\r\n    let [<Literal>] meiryo = \"Meiryo\"\r\n    let [<Literal>] meiryoUI = \"Meiryo UI\"\r\n    let [<Literal>] microsoftHimalaya = \"Microsoft Himalaya\"\r\n    let [<Literal>] microsoftJhengHei = \"Microsoft JhengHei\"\r\n    let [<Literal>] microsoftJhengHeiUI = \"Microsoft JhengHei UI\"\r\n    let [<Literal>] microsoftNewTaiLue = \"Microsoft New Tai Lue\"\r\n    let [<Literal>] microsoftPhagsPa = \"Microsoft PhagsPa\"\r\n    let [<Literal>] microsoftSansSerif = \"Microsoft Sans Serif\"\r\n    let [<Literal>] microsoftTaiLe = \"Microsoft Tai Le\"\r\n    let [<Literal>] microsoftUighur = \"Microsoft Uighur\"\r\n    let [<Literal>] microsoftYaHei = \"Microsoft YaHei\"\r\n    let [<Literal>] microsoftYaHeiUI = \"Microsoft YaHei UI\"\r\n    let [<Literal>] microsoftYiBaiti = \"Microsoft Yi Baiti\"\r\n    let [<Literal>] mingLiU = \"MingLiU\"\r\n    let [<Literal>] mingLiUHKSCS = \"MingLiU_HKSCS\"\r\n    let [<Literal>] mingLiUHKSCSExtB = \"MingLiU_HKSCS-ExtB\"\r\n    let [<Literal>] mingLiUExtB = \"MingLiU-ExtB\"\r\n    let [<Literal>] miriam = \"Miriam\"\r\n    let [<Literal>] monaco = \"Monaco\"\r\n    let [<Literal>] mongolianBaiti = \"Mongolian Baiti\"\r\n    let [<Literal>] moolBoran = \"MoolBoran\"\r\n    let [<Literal>] msGothic = \"MS Gothic\"\r\n    let [<Literal>] msMincho = \"MS Mincho\"\r\n    let [<Literal>] msPGothic = \"MS PGothic\"\r\n    let [<Literal>] msPMincho = \"MS PMincho\"\r\n    let [<Literal>] msUIGothic = \"MS UI Gothic\"\r\n    let [<Literal>] mvBoli = \"MV Boli\"\r\n    let [<Literal>] myanmarText = \"Myanmar Text\"\r\n    let [<Literal>] narkisim = \"Narkisim\"\r\n    let [<Literal>] neueHaasGroteskTextPro = \"Neue Haas Grotesk Text Pro\"\r\n    let [<Literal>] newCenturySchoolbook = \"New Century Schoolbook\"\r\n    let [<Literal>] newsGothicMT = \"News Gothic MT\"\r\n    let [<Literal>] nirmalaUI = \"Nirmala UI\"\r\n    let [<Literal>] noAutoLanguageAssoc = \"No automatic language associations\"\r\n    let [<Literal>] noto = \"Noto\"\r\n    let [<Literal>] nSimSun = \"NSimSun\"\r\n    let [<Literal>] nyala = \"Nyala\"\r\n    let [<Literal>] oldTown = \"Oldtown\"\r\n    let [<Literal>] optima = \"Optima\"\r\n    let [<Literal>] palatino = \"Palatino\"\r\n    let [<Literal>] palatinoLinotype = \"Palatino Linotype\"\r\n    let [<Literal>] papyrus = \"papyrus\"\r\n    let [<Literal>] parkAvenue = \"Parkavenue\"\r\n    let [<Literal>] perpetua = \"Perpetua\"\r\n    let [<Literal>] plantagenetCherokee = \"Plantagenet Cherokee\"\r\n    let [<Literal>] PMingLiU = \"PMingLiU\"\r\n    let [<Literal>] raavi = \"Raavi\"\r\n    let [<Literal>] rockwell = \"Rockwell\"\r\n    let [<Literal>] rockwellExtraBold = \"Rockwell Extra Bold\"\r\n    let [<Literal>] rockwellNova = \"Rockwell Nova\"\r\n    let [<Literal>] rockwellNovaCond = \"Rockwell Nova Cond\"\r\n    let [<Literal>] rockwellNovaExtraBold = \"Rockwell Nova Extra Bold\"\r\n    let [<Literal>] rod = \"Rod\"\r\n    let [<Literal>] sakkalMajalla = \"Sakkal Majalla\"\r\n    let [<Literal>] sanskritText = \"Sanskrit Text\"\r\n    let [<Literal>] segoeMDL2Assets = \"segoeMDL2Assets\"\r\n    let [<Literal>] segoePrint = \"Segoe Print\"\r\n    let [<Literal>] segoeScript = \"Segoe Script\"\r\n    let [<Literal>] segoeUI = \"Segoe UI\"\r\n    let [<Literal>] segoeUIEmoji = \"Segoe UI Emoji\"\r\n    let [<Literal>] segoeUIHistoric = \"Segoe UI Historic\"\r\n    let [<Literal>] segoeUISymbol = \"Segoe UI Symbol\"\r\n    let [<Literal>] shonarBangla = \"Shonar Bangla\"\r\n    let [<Literal>] shruti = \"Shruti\"\r\n    let [<Literal>] simHei = \"SimHei\"\r\n    let [<Literal>] simKai = \"SimKai\"\r\n    let [<Literal>] simplifiedArabic = \"Simplified Arabic\"\r\n    let [<Literal>] simplifiedChinese = \"Simplified Chinese\"\r\n    let [<Literal>] simSun = \"SimSun\"\r\n    let [<Literal>] simSunExtB = \"SimSun-ExtB\"\r\n    let [<Literal>] sitka = \"Sitka\"\r\n    let [<Literal>] snellRoundhan = \"Snell Roundhan\"\r\n    let [<Literal>] stencilStd = \"Stencil Std\"\r\n    let [<Literal>] sylfaen = \"Sylfaen\"\r\n    let [<Literal>] symbol = \"Symbol\"\r\n    let [<Literal>] tahoma = \"Tahoma\"\r\n    let [<Literal>] thai = \"Thai\"\r\n    let [<Literal>] timesNewRoman = \"Times New Roman\"\r\n    let [<Literal>] traditionalArabic = \"Traditional Arabic\"\r\n    let [<Literal>] traditionalChinese = \"Traditional Chinese\"\r\n    let [<Literal>] trattatello = \"Trattatello\"\r\n    let [<Literal>] trebuchetMS = \"Trebuchet MS\"\r\n    let [<Literal>] udDigiKyokasho = \"UD Digi Kyokasho\"\r\n    let [<Literal>] udDigiKyokashoNKR = \"UD Digi Kyokasho NK-R\"\r\n    let [<Literal>] udDigiKyokashoNPR = \"UD Digi Kyokasho NP-R\"\r\n    let [<Literal>] udDigiKyokashoNR = \"UD Digi Kyokasho N-R\"\r\n    let [<Literal>] urduTypesetting = \"Urdu Typesetting\"\r\n    let [<Literal>] urwChancery = \"URW Chancery\"\r\n    let [<Literal>] utsaah = \"Utsaah\"\r\n    let [<Literal>] vani = \"Vani\"\r\n    let [<Literal>] verdana = \"Verdana\"\r\n    let [<Literal>] verdanaPro = \"Verdana Pro\"\r\n    let [<Literal>] vijaya = \"Vijaya\"\r\n    let [<Literal>] vrinda = \"Vrinda\"\r\n    let [<Literal>] Webdings = \"Webdings\"\r\n    let [<Literal>] westminster = \"Westminster\"\r\n    let [<Literal>] wingdings = \"Wingdings\"\r\n    let [<Literal>] yuGothic = \"Yu Gothic\"\r\n    let [<Literal>] yuGothicUI = \"Yu Gothic UI\"\r\n    let [<Literal>] yuMincho = \"Yu Mincho\"\r\n    let [<Literal>] zapfChancery = \"Zapf Chancery\"\r\n\r\n/// Specifies a number of specialized CSS units\r\ntype length =\r\n    static member inline zero : ICssUnit = newCssUnit \"0\"\r\n    /// Pixels are (1px = 1/96th of 1in).\r\n    ///\r\n    /// **Note**: Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.\r\n    static member inline px(value: int) : ICssUnit = newCssUnit (string value + \"px\")\r\n    /// Pixels are (1px = 1/96th of 1in).\r\n    ///\r\n    /// **Note**: Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.\r\n    static member inline px(value: double) : ICssUnit = newCssUnit (string value + \"px\")\r\n    /// Centimeters\r\n    static member inline cm(value: int) : ICssUnit = newCssUnit (string value + \"cm\")\r\n    /// Centimeters\r\n    static member inline cm(value: double) : ICssUnit = newCssUnit (string value + \"cm\")\r\n    /// Millimeters\r\n    static member inline mm(value: int) : ICssUnit = newCssUnit (string value + \"mm\")\r\n    /// Millimeters\r\n    static member inline mm(value: double) : ICssUnit = newCssUnit (string value + \"mm\")\r\n    /// Inches (1in = 96px = 2.54cm)\r\n    static member inline inch(value: int) : ICssUnit = newCssUnit (string value + \"in\")\r\n    /// Inches (1in = 96px = 2.54cm)\r\n    static member inline inch(value: double) : ICssUnit = newCssUnit (string value + \"in\")\r\n    /// Points (1pt = 1/72 of 1in)\r\n    static member inline pt(value: int) : ICssUnit = newCssUnit (string value + \"pt\")\r\n    /// Points (1pt = 1/72 of 1in)\r\n    static member inline pt(value: double) : ICssUnit = newCssUnit (string value + \"pt\")\r\n    /// Picas (1pc = 12 pt)\r\n    static member inline pc(value: int) : ICssUnit = newCssUnit (string value + \"pc\")\r\n    /// Picas (1pc = 12 pt)\r\n    static member inline pc(value: double) : ICssUnit = newCssUnit (string value + \"pc\")\r\n    /// Relative to the font-size of the element (2em means 2 times the size of the current font\r\n    static member inline em(value: int) : ICssUnit = newCssUnit (string value + \"em\")\r\n    /// Relative to the font-size of the element (2em means 2 times the size of the current font\r\n    static member inline em(value: double) : ICssUnit = newCssUnit (string value + \"em\")\r\n    /// Relative to the x-height of the current font (rarely used)\r\n    static member inline ex(value: int) : ICssUnit = newCssUnit (string value + \"ex\")\r\n    /// Relative to the x-height of the current font (rarely used)\r\n    static member inline ex(value: double) : ICssUnit = newCssUnit (string value + \"ex\")\r\n    /// Relative to width of the \"0\" (zero)\r\n    static member inline ch(value: int) : ICssUnit = newCssUnit (string value + \"ch\")\r\n    /// Relative to font-size of the root element\r\n    static member inline rem(value: double) : ICssUnit = newCssUnit (string value + \"rem\")\r\n    /// Relative to font-size of the root element\r\n    static member inline rem(value: int) : ICssUnit = newCssUnit (string value + \"rem\")\r\n    /// Relative to 1% of the height of the viewport*\r\n    ///\r\n    /// **Viewport** = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.\r\n    static member inline vh(value: int) : ICssUnit = newCssUnit (string value + \"vh\")\r\n    /// Relative to 1% of the height of the viewport*\r\n    ///\r\n    /// **Viewport** = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.\r\n    static member inline vh(value: double) : ICssUnit = newCssUnit (string value + \"vh\")\r\n    /// Relative to 1% of the width of the viewport*\r\n    ///\r\n    /// **Viewport** = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.\r\n    static member inline vw(value: int) : ICssUnit = newCssUnit (string value + \"vw\")\r\n    /// Relative to 1% of the width of the viewport*\r\n    ///\r\n    /// **Viewport** = the browser window size. If the viewport is 50cm wide, 1vw = 0.5cm.\r\n    static member inline vw(value: double) : ICssUnit = newCssUnit (string value + \"vw\")\r\n    /// Relative to 1% of viewport's smaller dimension\r\n    static member inline vmin(value: double) : ICssUnit = newCssUnit (string value + \"vmin\")\r\n    /// Relative to 1% of viewport's smaller dimension\r\n    static member inline vmin(value: int) : ICssUnit = newCssUnit (string value + \"vmin\")\r\n    /// Relative to 1% of viewport's larger dimension\r\n    static member inline vmax(value: double) : ICssUnit = newCssUnit (string value + \"vmax\")\r\n    /// Relative to 1% of viewport's* larger dimension\r\n    static member inline vmax(value: int) : ICssUnit = newCssUnit (string value + \"vmax\")\r\n    /// Relative to the parent element\r\n    static member inline perc(value: int) : ICssUnit = newCssUnit (string value + \"%\")\r\n    /// Relative to the parent element\r\n    static member inline perc(value: double) : ICssUnit = newCssUnit (string value + \"%\")\r\n    /// Relative to the parent element\r\n    static member inline percent(value: int) : ICssUnit = newCssUnit (string value + \"%\")\r\n    /// Relative to the parent element\r\n    static member inline percent(value: double) : ICssUnit = newCssUnit (string value + \"%\")\r\n    /// The browser calculates the length.\r\n    static member inline auto : ICssUnit = newCssUnit \"auto\"\r\n    /// calculated length, frequency, angle, time, percentage, number or integer\r\n    static member inline calc(value: string) : ICssUnit = newCssUnit (\"calc(\" + value + \")\")\r\n    /// Relative to width of the grid layout in correlation with the other fr's in the grid\r\n    static member inline fr(value: int) : ICssUnit = newCssUnit (string value + \"fr\")\r\n\r\ntype borderStyle =\r\n    /// Specifies a dashed border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dashed\r\n    static member inline dashed : IBorderStyle = newBorderStyle \"dashed\"\r\n    /// Specifies a dotted border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=dotted\r\n    static member inline dotted : IBorderStyle = newBorderStyle \"dotted\"\r\n    /// Specifies a double border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=double\r\n    static member inline double : IBorderStyle = newBorderStyle \"double\"\r\n    /// Specifies a 3D grooved border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=groove\r\n    static member inline groove : IBorderStyle = newBorderStyle \"groove\"\r\n    /// The same as \"none\", except in border conflict resolution for table elements.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=hidden\r\n    static member inline hidden : IBorderStyle = newBorderStyle \"hidden\"\r\n    /// Inherits this property from its parent element.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=inherit\r\n    ///\r\n    /// Read about inherit https://www.w3schools.com/cssref/css_inherit.asp\r\n    static member inline inheritFromParent : IBorderStyle = newBorderStyle \"inherit\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=initial\r\n    ///\r\n    /// Read about initial value https://www.w3schools.com/cssref/css_initial.asp\r\n    static member inline initial : IBorderStyle = newBorderStyle \"initial\"\r\n    /// Specifies a 3D inset border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=inset\r\n    static member inline inset : IBorderStyle = newBorderStyle \"inset\"\r\n    /// Default value. Specifies no border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=none\r\n    static member inline none : IBorderStyle = newBorderStyle \"none\"\r\n    /// Specifies a 3D outset border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=outset\r\n    static member inline outset : IBorderStyle = newBorderStyle \"outset\"\r\n    /// Specifies a 3D ridged border. The effect depends on the border-color value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=ridge\r\n    static member inline ridge : IBorderStyle = newBorderStyle \"ridge\"\r\n    /// Specifies a solid border.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_border-style&preval=solid\r\n    static member inline solid : IBorderStyle = newBorderStyle \"solid\"\r\n\r\ntype gridColumn =\r\n    static member inline span(value: string) : IGridSpan = newGridSpan(\"span \" + value)\r\n    static member inline span(value: string, count: int) : IGridSpan = newGridSpan(\"span \" + value + \" \" + (string count))\r\n    static member inline span(value: int) : IGridSpan = newGridSpan(\"span \" + (string value))\r\n\r\ntype gridRow =\r\n    static member inline span(value: string) : IGridSpan = newGridSpan(\"span \" + value)\r\n    static member inline span(value: string, count: int) : IGridSpan = newGridSpan(\"span \" + value + \" \" + (string count))\r\n    static member inline span(value: int) : IGridSpan = newGridSpan(\"span \" + (string value))\r\n\r\ntype grid =\r\n    static member inline namedLine(value: string) : IGridTemplateItem = newGridTemplateItem (\"[\" + value + \"]\")\r\n    static member inline namedLines(value: string[]) : IGridTemplateItem = newGridTemplateItem (\"[\" + (String.concat \" \" value) + \"]\")\r\n    static member inline namedLines(value: string list) : IGridTemplateItem = newGridTemplateItem (\"[\" + (String.concat \" \" value) + \"]\")\r\n    static member inline templateWidth(value: ICssUnit) : IGridTemplateItem = newGridTemplateItem(asString value)\r\n    static member inline templateWidth(value: int) : IGridTemplateItem = newGridTemplateItem ((string value) + \"px\")\r\n    static member inline templateWidth(value: float) : IGridTemplateItem = newGridTemplateItem ((string value) + \"px\")\r\n\r\ntype textDecorationLine =\r\n    static member inline none : ITextDecorationLine = newTextDecorationLine \"none\"\r\n    static member inline underline : ITextDecorationLine = newTextDecorationLine \"underline\"\r\n    static member inline overline : ITextDecorationLine = newTextDecorationLine \"overline\"\r\n    static member inline lineThrough : ITextDecorationLine = newTextDecorationLine \"line-through\"\r\n    static member inline initial : ITextDecorationLine = newTextDecorationLine \"initial\"\r\n    static member inline inheritFromParent : ITextDecorationLine = newTextDecorationLine \"inherit\"\r\n\r\ntype textDecorationStyle =\r\n    /// Default value. The line will display as a single line.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=solid\r\n    static member inline solid : ITextDecoration = newTextDecoration \"solid\"\r\n    /// The line will display as a double line.\r\n    ///\r\n    /// https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=double\r\n    static member inline double : ITextDecoration = newTextDecoration \"double\"\r\n    /// The line will display as a dotted line.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=dotted\r\n    static member inline dotted : ITextDecoration = newTextDecoration \"dotted\"\r\n    /// The line will display as a dashed line.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=dashed\r\n    static member inline dashed : ITextDecoration = newTextDecoration \"dashed\"\r\n    /// The line will display as a wavy line.\r\n    ///\r\n    /// https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=wavy\r\n    static member inline wavy : ITextDecoration = newTextDecoration \"wavy\"\r\n    /// Sets this property to its default value.\r\n    ///\r\n    /// See example https://www.w3schools.com/cssref/playit.asp?filename=playcss_text-decoration-style&preval=initial\r\n    static member inline initial : ITextDecoration = newTextDecoration \"initial\"\r\n    /// Inherits this property from its parent element.\r\n    static member inline inheritFromParent : ITextDecoration = newTextDecoration \"inherit\"\r\n\r\n/// The transform CSS property lets you rotate, scale, skew, or translate an element.\r\n/// It modifies the coordinate space of the CSS [visual formatting model](https://developer.mozilla.org/en-US/docs/Web/CSS/Visual_formatting_model)\r\ntype transform =\r\n    /// Defines that there should be no transformation.\r\n    static member inline none = newTransformProperty \"none\"\r\n    /// Defines a 2D transformation, using a matrix of six values.\r\n    static member inline matrix(x1: int, y1: int, z1: int, x2: int, y2: int, z2: int) =\r\n        newTransformProperty (\r\n            \"matrix(\" +\r\n            (asString x1) + \",\" +\r\n            (asString y1) + \",\" +\r\n            (asString z1) + \",\" +\r\n            (asString x2) + \",\" +\r\n            (asString y2) + \",\" +\r\n            (asString z2) + \")\"\r\n        )\r\n\r\n    /// Defines a 2D translation.\r\n    static member inline translate(x: int, y: int) =\r\n        newTransformProperty (\r\n            \"translate(\" + (asString x) + \"px,\" + (asString y) + \"px)\"\r\n        )\r\n    /// Defines a 2D translation.\r\n    static member inline translate(x: ICssUnit, y: ICssUnit) =\r\n        newTransformProperty (\r\n            \"translate(\" + (asString x) + \",\" + (asString y) + \")\"\r\n        )\r\n\r\n    /// Defines a 3D translation.\r\n    static member inline translate3D(x: int, y: int, z: int) =\r\n        newTransformProperty (\r\n            \"translate3d(\" + (asString x) + \"px,\" + (asString y) + \"px,\" + (asString z) + \"px)\"\r\n        )\r\n    /// Defines a 3D translation.\r\n    static member inline translate3D(x: ICssUnit, y: ICssUnit, z: ICssUnit) =\r\n        newTransformProperty (\r\n            \"translate3d(\" + (asString x) + \",\" + (asString y) + \",\" + (asString z) + \")\"\r\n        )\r\n\r\n    /// Defines a translation, using only the value for the X-axis.\r\n    static member inline translateX(x: int) =\r\n        newTransformProperty (\"translateX(\" + (asString x) + \"px)\")\r\n    /// Defines a translation, using only the value for the X-axis.\r\n    static member inline translateX(x: ICssUnit) =\r\n        newTransformProperty (\"translateX(\" + (asString x) + \")\")\r\n    /// Defines a translation, using only the value for the Y-axis\r\n    static member inline translateY(y: int) =\r\n        newTransformProperty (\"translateY(\" + (asString y) + \"px)\")\r\n    /// Defines a translation, using only the value for the Y-axis\r\n    static member inline translateY(y: ICssUnit) =\r\n        newTransformProperty (\"translateY(\" + (asString y) + \")\")\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    static member inline translateZ(z: int) =\r\n        newTransformProperty (\"translateZ(\" + (asString z) + \"px)\")\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    static member inline translateZ(z: ICssUnit) =\r\n        newTransformProperty (\"translateZ(\" + (asString z) + \")\")\r\n\r\n    /// Defines a 2D scale transformation.\r\n    static member inline scale(x: int, y: int) =\r\n        newTransformProperty (\r\n            \"scale(\" + (asString x) + \",\" + (asString y) + \")\"\r\n        )\r\n    /// Defines a 2D scale transformation.\r\n    static member inline scale(x: float, y: float) =\r\n        newTransformProperty (\r\n            \"scale(\" + (asString x) + \",\" + (asString y) + \")\"\r\n        )\r\n\r\n    /// Defines a scale transformation.\r\n    static member inline scale(n: int) =\r\n        newTransformProperty (\r\n            \"scale(\" + (asString n) + \")\"\r\n        )\r\n\r\n    /// Defines a scale transformation.\r\n    static member inline scale(n: float) =\r\n        newTransformProperty (\r\n            \"scale(\" + (asString n) + \")\"\r\n        )\r\n\r\n    /// Defines a 3D scale transformation\r\n    static member inline scale3D(x: int, y: int, z: int) =\r\n        newTransformProperty (\r\n            \"scale3d(\" + (asString x) + \",\" + (asString y) + \",\" + (asString z) + \")\"\r\n        )\r\n    /// Defines a 3D scale transformation\r\n    static member inline scale3D(x: float, y: float, z: float) =\r\n        newTransformProperty (\r\n            \"scale3d(\" + (asString x) + \",\" + (asString y) + \",\" + (asString z) + \")\"\r\n        )\r\n\r\n    /// Defines a scale transformation by giving a value for the X-axis.\r\n    static member inline scaleX(x: int) =\r\n        newTransformProperty (\"scaleX(\" + (asString x) + \")\")\r\n\r\n    /// Defines a scale transformation by giving a value for the X-axis.\r\n    static member inline scaleX(x: float) =\r\n        newTransformProperty (\"scaleX(\" + (asString x) + \")\")\r\n    /// Defines a scale transformation by giving a value for the Y-axis.\r\n    static member inline scaleY(y: int) =\r\n        newTransformProperty (\"scaleY(\" + (asString y) + \")\")\r\n    /// Defines a scale transformation by giving a value for the Y-axis.\r\n    static member inline scaleY(y: float) =\r\n        newTransformProperty (\"scaleY(\" + (asString y) + \")\")\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    static member inline scaleZ(z: int) =\r\n        newTransformProperty (\"scaleZ(\" + (asString z) + \")\")\r\n    /// Defines a 3D translation, using only the value for the Z-axis\r\n    static member inline scaleZ(z: float) =\r\n        newTransformProperty (\"scaleZ(\" + (asString z) + \")\")\r\n    /// Defines a 2D rotation, the angle is specified in the parameter.\r\n    static member inline rotate(deg: int) =\r\n        newTransformProperty (\"rotate(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 2D rotation, the angle is specified in the parameter.\r\n    static member inline rotate(deg: float) =\r\n        newTransformProperty (\"rotate(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the X-axis.\r\n    static member inline rotateX(deg: float) =\r\n        newTransformProperty (\"rotateX(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the X-axis.\r\n    static member inline rotateX(deg: int) =\r\n        newTransformProperty (\"rotateX(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Y-axis\r\n    static member inline rotateY(deg: float) =\r\n        newTransformProperty (\"rotateY(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Y-axis\r\n    static member inline rotateY(deg: int) =\r\n        newTransformProperty (\"rotateY(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Z-axis\r\n    static member inline rotateZ(deg: float) =\r\n        newTransformProperty (\"rotateZ(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 3D rotation along the Z-axis\r\n    static member inline rotateZ(deg: int) =\r\n        newTransformProperty (\"rotateZ(\" + (asString deg) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X- and the Y-axis.\r\n    static member inline skew(xAngle: int, yAngle: int) =\r\n        newTransformProperty (\"skew(\" + (asString xAngle) + \"deg,\" + (asString yAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X- and the Y-axis.\r\n    static member inline skew(xAngle: float, yAngle: float) =\r\n        newTransformProperty (\"skew(\" + (asString xAngle) + \"deg,\" + (asString yAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X-axis\r\n    static member inline skewX(xAngle: int) =\r\n        newTransformProperty (\"skewX(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the X-axis\r\n    static member inline skewX(xAngle: float) =\r\n        newTransformProperty (\"skewX(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the Y-axis\r\n    static member inline skewY(xAngle: int) =\r\n        newTransformProperty (\"skewY(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a 2D skew transformation along the Y-axis\r\n    static member inline skewY(xAngle: float) =\r\n        newTransformProperty (\"skewY(\" + (asString xAngle) + \"deg)\")\r\n    /// Defines a perspective view for a 3D transformed element\r\n    static member inline perspective(n: int) =\r\n        newTransformProperty (\"perspective(\" + (asString n) + \")\")\r\n\r\ntype transitionProperty =\r\n    static member inline all = newTransitionProperty \"all\"\r\n    static member inline backdropFilter = newTransitionProperty \"backdrop-filter\"\r\n    static member inline background = newTransitionProperty \"background\"\r\n    static member inline backgroundColor = newTransitionProperty \"background-color\"\r\n    static member inline backgroundPosition = newTransitionProperty \"background-position\"\r\n    static member inline backgroundSize = newTransitionProperty \"background-size\"\r\n    static member inline border = newTransitionProperty \"border\"\r\n    static member inline borderBottom = newTransitionProperty \"border-bottom\"\r\n    static member inline borderBottomColor = newTransitionProperty \"border-bottom-color\"\r\n    static member inline borderBottomLeftRadius = newTransitionProperty \"border-bottom-left-radius\"\r\n    static member inline borderBottomRightRadius = newTransitionProperty \"border-bottom-right-radius\"\r\n    static member inline borderBottomWidth = newTransitionProperty \"border-bottom-width\"\r\n    static member inline borderColor = newTransitionProperty \"border-color\"\r\n    static member inline borderEndEndRadius = newTransitionProperty \"border-end-end-radius\"\r\n    static member inline borderEndStartRadius = newTransitionProperty \"border-end-start-radius\"\r\n    static member inline borderLeft = newTransitionProperty \"border-left\"\r\n    static member inline borderLeftColor = newTransitionProperty \"border-left-color\"\r\n    static member inline borderLeftWidth = newTransitionProperty \"border-left-width\"\r\n    static member inline borderRadius = newTransitionProperty \"border-radius\"\r\n    static member inline borderRight = newTransitionProperty \"border-right\"\r\n    static member inline borderRightColor = newTransitionProperty \"border-right-color\"\r\n    static member inline borderRightWidth = newTransitionProperty \"border-right-width\"\r\n    static member inline borderStartEndRadius = newTransitionProperty \"border-start-end-radius\"\r\n    static member inline borderStartStartRadius = newTransitionProperty \"border-start-start-radius\"\r\n    static member inline borderTop = newTransitionProperty \"border-top\"\r\n    static member inline borderTopColor = newTransitionProperty \"border-top-color\"\r\n    static member inline borderTopLeftRadius = newTransitionProperty \"border-top-left-radius\"\r\n    static member inline borderTopRightRadius = newTransitionProperty \"border-top-right-radius\"\r\n    static member inline borderTopWidth = newTransitionProperty \"border-top-width\"\r\n    static member inline borderWidth = newTransitionProperty \"border-width\"\r\n    static member inline bottom = newTransitionProperty \"bottom\"\r\n    static member inline boxShadow = newTransitionProperty \"box-shadow\"\r\n    static member inline caretColor = newTransitionProperty \"caret-color\"\r\n    static member inline clip = newTransitionProperty \"clip\"\r\n    static member inline clipPath = newTransitionProperty \"clip-path\"\r\n    static member inline color = newTransitionProperty \"color\"\r\n    static member inline columnCount = newTransitionProperty \"column-count\"\r\n    static member inline columnGap = newTransitionProperty \"column-gap\"\r\n    static member inline columnRule = newTransitionProperty \"column-rule\"\r\n    static member inline columnRuleColor = newTransitionProperty \"column-rule-color\"\r\n    static member inline columnRuleWidth = newTransitionProperty \"column-rule-width\"\r\n    static member inline columnWidth = newTransitionProperty \"column-width\"\r\n    static member inline columns = newTransitionProperty \"columns\"\r\n    static member inline filter = newTransitionProperty \"filter\"\r\n    static member inline flex = newTransitionProperty \"flex\"\r\n    static member inline flexBasis = newTransitionProperty \"flex-basis\"\r\n    static member inline flexGrow = newTransitionProperty \"flex-grow\"\r\n    static member inline flexShrink = newTransitionProperty \"flex-shrink\"\r\n    static member inline font = newTransitionProperty \"font\"\r\n    static member inline fontSize = newTransitionProperty \"font-size\"\r\n    static member inline fontSizeAdjust = newTransitionProperty \"font-size-adjust\"\r\n    static member inline fontStretch = newTransitionProperty \"font-stretch\"\r\n    static member inline fontVariationSettings = newTransitionProperty \"font-variation-settings\"\r\n    static member inline fontWeight = newTransitionProperty \"font-weight\"\r\n    static member inline gap = newTransitionProperty \"gap\"\r\n    static member inline gridColumnGap = newTransitionProperty \"grid-column-gap\"\r\n    static member inline gridGap = newTransitionProperty \"grid-gap\"\r\n    static member inline gridRowGap = newTransitionProperty \"grid-row-gap\"\r\n    static member inline gridTemplateColumns = newTransitionProperty \"grid-template-columns\"\r\n    static member inline gridTemplateRows = newTransitionProperty \"grid-template-rows\"\r\n    static member inline height = newTransitionProperty \"height\"\r\n    static member inline inset = newTransitionProperty \"inset\"\r\n    static member inline insetBlock = newTransitionProperty \"inset-block\"\r\n    static member inline insetBlockEnd = newTransitionProperty \"inset-block-end\"\r\n    static member inline insetBlockStart = newTransitionProperty \"inset-block-start\"\r\n    static member inline insetInline = newTransitionProperty \"inset-inline\"\r\n    static member inline insetInlineEnd = newTransitionProperty \"inset-inline-end\"\r\n    static member inline insetInlineStart = newTransitionProperty \"inset-inline-start\"\r\n    static member inline left = newTransitionProperty \"left\"\r\n    static member inline letterSpacing = newTransitionProperty \"letter-spacing\"\r\n    static member inline lineClamp = newTransitionProperty \"line-clamp\"\r\n    static member inline lineHeight = newTransitionProperty \"line-height\"\r\n    static member inline margin = newTransitionProperty \"margin\"\r\n    static member inline marginBottom = newTransitionProperty \"margin-bottom\"\r\n    static member inline marginLeft = newTransitionProperty \"margin-left\"\r\n    static member inline marginRight = newTransitionProperty \"margin-right\"\r\n    static member inline marginTop = newTransitionProperty \"margin-top\"\r\n    static member inline mask = newTransitionProperty \"mask\"\r\n    static member inline maskBorder = newTransitionProperty \"mask-border\"\r\n    static member inline maskPosition = newTransitionProperty \"mask-position\"\r\n    static member inline maskSize = newTransitionProperty \"mask-size\"\r\n    static member inline maxHeight = newTransitionProperty \"max-height\"\r\n    static member inline maxLines = newTransitionProperty \"max-lines\"\r\n    static member inline maxWidth = newTransitionProperty \"max-width\"\r\n    static member inline minHeight = newTransitionProperty \"min-height\"\r\n    static member inline minWidth = newTransitionProperty \"min-width\"\r\n    static member inline objectPosition = newTransitionProperty \"object-position\"\r\n    static member inline offset = newTransitionProperty \"offset\"\r\n    static member inline offsetAnchor = newTransitionProperty \"offset-anchor\"\r\n    static member inline offsetDistance = newTransitionProperty \"offset-distance\"\r\n    static member inline offsetPath = newTransitionProperty \"offset-path\"\r\n    static member inline offsetPosition = newTransitionProperty \"offset-position\"\r\n    static member inline offsetRotate = newTransitionProperty \"offset-rotate\"\r\n    static member inline opacity = newTransitionProperty \"opacity\"\r\n    static member inline order = newTransitionProperty \"order\"\r\n    static member inline outline = newTransitionProperty \"outline\"\r\n    static member inline outlineColor = newTransitionProperty \"outline-color\"\r\n    static member inline outlineOffset = newTransitionProperty \"outline-offset\"\r\n    static member inline outlineWidth = newTransitionProperty \"outline-width\"\r\n    static member inline padding = newTransitionProperty \"padding\"\r\n    static member inline paddingBottom = newTransitionProperty \"padding-bottom\"\r\n    static member inline paddingLeft = newTransitionProperty \"padding-left\"\r\n    static member inline paddingRight = newTransitionProperty \"padding-right\"\r\n    static member inline paddingTop = newTransitionProperty \"padding-top\"\r\n    static member inline perspective = newTransitionProperty \"perspective\"\r\n    static member inline perspectiveOrigin = newTransitionProperty \"perspective-origin\"\r\n    static member inline right = newTransitionProperty \"right\"\r\n    static member inline rotate = newTransitionProperty \"rotate\"\r\n    static member inline rowGap = newTransitionProperty \"row-gap\"\r\n    static member inline scale = newTransitionProperty \"scale\"\r\n    static member inline scrollMargin = newTransitionProperty \"scroll-margin\"\r\n    static member inline scrollMarginBlock = newTransitionProperty \"scroll-margin-block\"\r\n    static member inline scrollMarginBlockEnd = newTransitionProperty \"scroll-margin-block-end\"\r\n    static member inline scrollMarginBlockStart = newTransitionProperty \"scroll-margin-block-start\"\r\n    static member inline scrollMarginBottom = newTransitionProperty \"scroll-margin-bottom\"\r\n    static member inline scrollMarginInline = newTransitionProperty \"scroll-margin-inline\"\r\n    static member inline scrollMarginInlineEnd = newTransitionProperty \"scroll-margin-inline-end\"\r\n    static member inline scrollMarginInlineStart = newTransitionProperty \"scroll-margin-inline-start\"\r\n    static member inline scrollMarginLeft = newTransitionProperty \"scroll-margin-left\"\r\n    static member inline scrollMarginRight = newTransitionProperty \"scroll-margin-right\"\r\n    static member inline scrollMarginTop = newTransitionProperty \"scroll-margin-top\"\r\n    static member inline scrollPadding = newTransitionProperty \"scroll-padding\"\r\n    static member inline scrollPaddingBlock = newTransitionProperty \"scroll-padding-block\"\r\n    static member inline scrollPaddingBlockEnd = newTransitionProperty \"scroll-padding-block-end\"\r\n    static member inline scrollPaddingBlockStart = newTransitionProperty \"scroll-padding-block-start\"\r\n    static member inline scrollPaddingBottom = newTransitionProperty \"scroll-padding-bottom\"\r\n    static member inline scrollPaddingInline = newTransitionProperty \"scroll-padding-inline\"\r\n    static member inline scrollPaddingInlineEnd = newTransitionProperty \"scroll-padding-inline-end\"\r\n    static member inline scrollPaddingInlineStart = newTransitionProperty \"scroll-padding-inline-start\"\r\n    static member inline scrollPaddingLeft = newTransitionProperty \"scroll-padding-left\"\r\n    static member inline scrollPaddingRight = newTransitionProperty \"scroll-padding-right\"\r\n    static member inline scrollPaddingTop = newTransitionProperty \"scroll-padding-top\"\r\n    static member inline scrollSnapCoordinate = newTransitionProperty \"scroll-snap-coordinate\"\r\n    static member inline scrollSnapDestination = newTransitionProperty \"scroll-snap-destination\"\r\n    static member inline scrollbarColor = newTransitionProperty \"scrollbar-color\"\r\n    static member inline shapeImageThreshold = newTransitionProperty \"shape-image-threshold\"\r\n    static member inline shapeMargin = newTransitionProperty \"shape-margin\"\r\n    static member inline shapeOutside = newTransitionProperty \"shape-outside\"\r\n    static member inline tabSize = newTransitionProperty \"tab-size\"\r\n    static member inline textDecoration = newTransitionProperty \"text-decoration\"\r\n    static member inline textDecorationColor = newTransitionProperty \"text-decoration-color\"\r\n    static member inline textEmphasis = newTransitionProperty \"text-emphasis\"\r\n    static member inline textEmphasisColor = newTransitionProperty \"text-emphasis-color\"\r\n    static member inline textIndent = newTransitionProperty \"text-indent\"\r\n    static member inline textShadow = newTransitionProperty \"text-shadow\"\r\n    static member inline top = newTransitionProperty \"top\"\r\n    static member inline transform = newTransitionProperty \"transform\"\r\n    static member inline transformOrigin = newTransitionProperty \"transform-origin\"\r\n    static member inline translate = newTransitionProperty \"translate\"\r\n    static member inline verticalAlign = newTransitionProperty \"vertical-align\"\r\n    static member inline visibility = newTransitionProperty \"visibility\"\r\n    static member inline width = newTransitionProperty \"width\"\r\n    static member inline wordSpacing = newTransitionProperty \"word-spacing\"\r\n    static member inline zIndex = newTransitionProperty \"z-index\"\r\n    static member inline zoom = newTransitionProperty \"zoom\"","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { toString, Record } from \"./Types.js\";\r\nimport { FSharpList, fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1 } from \"./List.js\";\r\nimport { fold as fold_1, fill } from \"./Array.js\";\r\nimport { structuralHash, toIterator, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { join } from \"./String.js\";\r\nimport { exists as exists_1, cache, forAll as forAll_1, fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\r\nimport { HashSet__get_Comparer, HashSet_$ctor_Z6150332D, HashSet } from \"./MutableSet.js\";\r\n\r\nexport class SetTreeLeaf$1 {\r\n    constructor(k) {\r\n        this.k = k;\r\n    }\r\n}\r\n\r\nexport function SetTreeLeaf$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\r\n}\r\n\r\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\r\n    return new SetTreeLeaf$1(k);\r\n}\r\n\r\nexport function SetTreeLeaf$1__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\r\n    constructor(v, left, right, h) {\r\n        super(v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function SetTreeNode$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));\r\n}\r\n\r\nexport function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {\r\n    return new SetTreeNode$1(v, left, right, h);\r\n}\r\n\r\nexport function SetTreeNode$1__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function SetTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\r\n    SetTreeModule_countAux:\r\n    while (true) {\r\n        const t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);\r\n                continue SetTreeModule_countAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_count(s) {\r\n    return SetTreeModule_countAux(s, 0);\r\n}\r\n\r\nexport function SetTreeModule_mk(l, k, r) {\r\n    let hl;\r\n    const t = l;\r\n    if (t != null) {\r\n        const t2 = t;\r\n        hl = ((t2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const t_1 = r;\r\n    if (t_1 != null) {\r\n        const t2_1 = t_1;\r\n        hr = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m = ((hl < hr) ? hr : hl) | 0;\r\n    if (m === 0) {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n    else {\r\n        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_rebalance(t1, v, t2) {\r\n    let t_2, t2_3, t_3, t2_4;\r\n    let t1h;\r\n    const t = t1;\r\n    if (t != null) {\r\n        const t2_1 = t;\r\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const t_1 = t2;\r\n    if (t_1 != null) {\r\n        const t2_2 = t_1;\r\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_2) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof SetTreeNode$1) {\r\n            if (((t_2 = SetTreeNode$1__get_Left(matchValue), (t_2 != null) ? ((t2_3 = t_2, (t2_3 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_3) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(matchValue));\r\n                if (matchValue_1 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof SetTreeNode$1) {\r\n            if (((t_3 = SetTreeNode$1__get_Right(matchValue_2), (t_3 != null) ? ((t2_4 = t_3, (t2_4 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_4) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_mk(t1, v, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_add(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c_1 < 0) {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);\r\n            }\r\n            else if (c_1 === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if ((SetTreeNode$1__get_Height(t1$0027) + 2) < SetTreeNode$1__get_Height(t2$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\r\n                    }\r\n                    else if ((SetTreeNode$1__get_Height(t2$0027) + 2) < SetTreeNode$1__get_Height(t1$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));\r\n                    }\r\n                    else {\r\n                        return SetTreeModule_mk(t1, k, t2);\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\r\n            }\r\n        }\r\n        else {\r\n            return SetTreeModule_add(comparer, k, t1);\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_add(comparer, k, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_split(comparer, pivot, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c < 0) {\r\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n            else if (c === 0) {\r\n                return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));\r\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\r\n            if (c_1 < 0) {\r\n                return [t, false, SetTreeModule_empty()];\r\n            }\r\n            else if (c_1 === 0) {\r\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\r\n            }\r\n            else {\r\n                return [SetTreeModule_empty(), false, t];\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_spliceOutSuccessor(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (SetTreeNode$1__get_Left(t2) == null) {\r\n                return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n        }\r\n        else {\r\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Set.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_remove(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                if (SetTreeNode$1__get_Left(t2) == null) {\r\n                    return SetTreeNode$1__get_Right(t2);\r\n                }\r\n                else if (SetTreeNode$1__get_Right(t2) == null) {\r\n                    return SetTreeNode$1__get_Left(t2);\r\n                }\r\n                else {\r\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));\r\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return SetTreeModule_empty();\r\n        }\r\n        else {\r\n            return t;\r\n        }\r\n    }\r\n    else {\r\n        return t;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\r\n    SetTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Left(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_iter(f_mut, t_mut) {\r\n    SetTreeModule_iter:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_iter;\r\n            }\r\n            else {\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\r\n    SetTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut, x = x_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));\r\n                continue SetTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBack(f, m, x) {\r\n    return SetTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\r\n    SetTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_fold(f, x, m) {\r\n    return SetTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function SetTreeModule_forall(f_mut, t_mut) {\r\n    SetTreeModule_forall:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) && SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2))) {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_forall;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_exists(f_mut, t_mut) {\r\n    SetTreeModule_exists:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_exists;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_subset(comparer, a, b) {\r\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\r\n}\r\n\r\nexport function SetTreeModule_properSubset(comparer, a, b) {\r\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\r\n        return SetTreeModule_exists((x_1) => (!SetTreeModule_mem(comparer, x_1, a)), b);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\r\n    SetTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);\r\n                continue SetTreeModule_filterAux;\r\n            }\r\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filter(comparer, f, s) {\r\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\r\n    SetTreeModule_diffAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\r\n        if (acc == null) {\r\n            return acc;\r\n        }\r\n        else if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                comparer_mut = comparer;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));\r\n                continue SetTreeModule_diffAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_diff(comparer, a, b) {\r\n    return SetTreeModule_diffAux(comparer, b, a);\r\n}\r\n\r\nexport function SetTreeModule_union(comparer, t1, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {\r\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));\r\n                    }\r\n                    else {\r\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n            }\r\n        }\r\n        else {\r\n            return t1;\r\n        }\r\n    }\r\n    else {\r\n        return t2;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\r\n    SetTreeModule_intersectionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);\r\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;\r\n                comparer_mut = comparer;\r\n                b_mut = b;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = acc_2;\r\n                continue SetTreeModule_intersectionAux;\r\n            }\r\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersection(comparer, a, b) {\r\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\r\n    if (f(k)) {\r\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {\r\n    SetTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);\r\n                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue SetTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partition(comparer, f, s) {\r\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_minimumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_minimumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_maximumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_maximumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElement(s) {\r\n    const matchValue = SetTreeModule_minimumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElement(s) {\r\n    const matchValue = SetTreeModule_maximumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport class SetTreeModule_SetIterator$1 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_SetIterator$1$reflection(gen0) {\r\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1$reflection(gen0)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function SetTreeModule_collapseLHS(stack_mut) {\r\n    SetTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const x = head(stack);\r\n            const rest = tail(stack);\r\n            if (x != null) {\r\n                const x2 = x;\r\n                if (x2 instanceof SetTreeNode$1) {\r\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), SetTreeNode$1__get_Right(x2)], rest);\r\n                    continue SetTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue SetTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIterator(s) {\r\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\r\n}\r\n\r\nexport function SetTreeModule_notStarted() {\r\n    throw (new Error(\"Enumeration not started\"));\r\n}\r\n\r\nexport function SetTreeModule_alreadyFinished() {\r\n    throw (new Error(\"Enumeration already started\"));\r\n}\r\n\r\nexport function SetTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (isEmpty_1(matchValue)) {\r\n            return SetTreeModule_alreadyFinished();\r\n        }\r\n        else if (head(matchValue) != null) {\r\n            const t = head(matchValue);\r\n            return SetTreeLeaf$1__get_Key(t);\r\n        }\r\n        else {\r\n            throw (new Error(\"Please report error: Set iterator, unexpected stack for current\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const t = head(matchValue);\r\n                if (t instanceof SetTreeNode$1) {\r\n                    throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIEnumerator(s) {\r\n    let i = SetTreeModule_mkIterator(s);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return SetTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = SetTreeModule_mkIterator(s);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\r\n    SetTreeModule_compareStacks:\r\n    while (true) {\r\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\r\n        const matchValue = [l1, l2];\r\n        if (!isEmpty_1(matchValue[0])) {\r\n            if (!isEmpty_1(matchValue[1])) {\r\n                if (head(matchValue[1]) != null) {\r\n                    if (head(matchValue[0]) != null) {\r\n                        const x1_3 = head(matchValue[0]);\r\n                        const x2_3 = head(matchValue[1]);\r\n                        if (x1_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x1_3) == null) {\r\n                                if (x2_3 instanceof SetTreeNode$1) {\r\n                                    if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                        if (c !== 0) {\r\n                                            return c | 0;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        const matchValue_3 = [l1, l2];\r\n                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;\r\n                                        if (!isEmpty_1(matchValue_3[0])) {\r\n                                            if (head(matchValue_3[0]) != null) {\r\n                                                pattern_matching_result = 0;\r\n                                                t1_6 = tail(matchValue_3[0]);\r\n                                                x1_4 = head(matchValue_3[0]);\r\n                                            }\r\n                                            else if (!isEmpty_1(matchValue_3[1])) {\r\n                                                if (head(matchValue_3[1]) != null) {\r\n                                                    pattern_matching_result = 1;\r\n                                                    t2_6 = tail(matchValue_3[1]);\r\n                                                    x2_4 = head(matchValue_3[1]);\r\n                                                }\r\n                                                else {\r\n                                                    pattern_matching_result = 2;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else if (!isEmpty_1(matchValue_3[1])) {\r\n                                            if (head(matchValue_3[1]) != null) {\r\n                                                pattern_matching_result = 1;\r\n                                                t2_6 = tail(matchValue_3[1]);\r\n                                                x2_4 = head(matchValue_3[1]);\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result = 2;\r\n                                        }\r\n                                        switch (pattern_matching_result) {\r\n                                            case 0: {\r\n                                                if (x1_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0)], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 1: {\r\n                                                if (x2_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0)], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 2: {\r\n                                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                    if (c_1 !== 0) {\r\n                                        return c_1 | 0;\r\n                                    }\r\n                                    else {\r\n                                        comparer_mut = comparer;\r\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                        l2_mut = cons(SetTreeModule_empty(), tail(matchValue[1]));\r\n                                        continue SetTreeModule_compareStacks;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_4 = [l1, l2];\r\n                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;\r\n                                if (!isEmpty_1(matchValue_4[0])) {\r\n                                    if (head(matchValue_4[0]) != null) {\r\n                                        pattern_matching_result_1 = 0;\r\n                                        t1_7 = tail(matchValue_4[0]);\r\n                                        x1_5 = head(matchValue_4[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_4[1])) {\r\n                                        if (head(matchValue_4[1]) != null) {\r\n                                            pattern_matching_result_1 = 1;\r\n                                            t2_7 = tail(matchValue_4[1]);\r\n                                            x2_5 = head(matchValue_4[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_1 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_4[1])) {\r\n                                    if (head(matchValue_4[1]) != null) {\r\n                                        pattern_matching_result_1 = 1;\r\n                                        t2_7 = tail(matchValue_4[1]);\r\n                                        x2_5 = head(matchValue_4[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_1 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_1) {\r\n                                    case 0: {\r\n                                        if (x1_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0)], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0)], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (x2_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                if (c_2 !== 0) {\r\n                                    return c_2 | 0;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = cons(SetTreeModule_empty(), tail(matchValue[0]));\r\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_5 = [l1, l2];\r\n                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;\r\n                                if (!isEmpty_1(matchValue_5[0])) {\r\n                                    if (head(matchValue_5[0]) != null) {\r\n                                        pattern_matching_result_2 = 0;\r\n                                        t1_8 = tail(matchValue_5[0]);\r\n                                        x1_6 = head(matchValue_5[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_5[1])) {\r\n                                        if (head(matchValue_5[1]) != null) {\r\n                                            pattern_matching_result_2 = 1;\r\n                                            t2_8 = tail(matchValue_5[1]);\r\n                                            x2_6 = head(matchValue_5[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_2 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_5[1])) {\r\n                                    if (head(matchValue_5[1]) != null) {\r\n                                        pattern_matching_result_2 = 1;\r\n                                        t2_8 = tail(matchValue_5[1]);\r\n                                        x2_6 = head(matchValue_5[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_2 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_2) {\r\n                                    case 0: {\r\n                                        if (x1_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0)], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0)], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                            if (c_3 !== 0) {\r\n                                return c_3 | 0;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = tail(matchValue[0]);\r\n                                l2_mut = tail(matchValue[1]);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const x2 = head(matchValue[1]);\r\n                        const matchValue_1 = [l1, l2];\r\n                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;\r\n                        if (!isEmpty_1(matchValue_1[0])) {\r\n                            if (head(matchValue_1[0]) != null) {\r\n                                pattern_matching_result_3 = 0;\r\n                                t1_2 = tail(matchValue_1[0]);\r\n                                x1 = head(matchValue_1[0]);\r\n                            }\r\n                            else if (!isEmpty_1(matchValue_1[1])) {\r\n                                if (head(matchValue_1[1]) != null) {\r\n                                    pattern_matching_result_3 = 1;\r\n                                    t2_2 = tail(matchValue_1[1]);\r\n                                    x2_1 = head(matchValue_1[1]);\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_3 = 2;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_1[1])) {\r\n                            if (head(matchValue_1[1]) != null) {\r\n                                pattern_matching_result_3 = 1;\r\n                                t2_2 = tail(matchValue_1[1]);\r\n                                x2_1 = head(matchValue_1[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_3 = 2;\r\n                        }\r\n                        switch (pattern_matching_result_3) {\r\n                            case 0: {\r\n                                if (x1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0)], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 1: {\r\n                                if (x2_1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0)], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 2: {\r\n                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (head(matchValue[0]) != null) {\r\n                    const x1_1 = head(matchValue[0]);\r\n                    const matchValue_2 = [l1, l2];\r\n                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;\r\n                    if (!isEmpty_1(matchValue_2[0])) {\r\n                        if (head(matchValue_2[0]) != null) {\r\n                            pattern_matching_result_4 = 0;\r\n                            t1_4 = tail(matchValue_2[0]);\r\n                            x1_2 = head(matchValue_2[0]);\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_2[1])) {\r\n                            if (head(matchValue_2[1]) != null) {\r\n                                pattern_matching_result_4 = 1;\r\n                                t2_4 = tail(matchValue_2[1]);\r\n                                x2_2 = head(matchValue_2[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_4 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else if (!isEmpty_1(matchValue_2[1])) {\r\n                        if (head(matchValue_2[1]) != null) {\r\n                            pattern_matching_result_4 = 1;\r\n                            t2_4 = tail(matchValue_2[1]);\r\n                            x2_2 = head(matchValue_2[1]);\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_4 = 2;\r\n                    }\r\n                    switch (pattern_matching_result_4) {\r\n                        case 0: {\r\n                            if (x1_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0)], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 1: {\r\n                            if (x2_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0)], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 2: {\r\n                            throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    l1_mut = tail(matchValue[0]);\r\n                    l2_mut = tail(matchValue[1]);\r\n                    continue SetTreeModule_compareStacks;\r\n                }\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        else if (isEmpty_1(matchValue[1])) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_compare(comparer, t1, t2) {\r\n    if (t1 == null) {\r\n        if (t2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (t2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_choose(s) {\r\n    return SetTreeModule_minimumElement(s);\r\n}\r\n\r\nexport function SetTreeModule_toList(t) {\r\n    const loop = (t$0027_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const t$0027 = t$0027_mut, acc = acc_mut;\r\n            if (t$0027 != null) {\r\n                const t2 = t$0027;\r\n                if (t2 instanceof SetTreeNode$1) {\r\n                    t$0027_mut = SetTreeNode$1__get_Left(t2);\r\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(t, empty_1());\r\n}\r\n\r\nexport function SetTreeModule_copyToArray(s, arr, i) {\r\n    let j = i;\r\n    SetTreeModule_iter((x) => {\r\n        arr[j] = x;\r\n        j = ((j + 1) | 0);\r\n    }, s);\r\n}\r\n\r\nexport function SetTreeModule_toArray(s) {\r\n    const n = SetTreeModule_count(s) | 0;\r\n    const res = fill(new Array(n), 0, n, null);\r\n    SetTreeModule_copyToArray(s, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    SetTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            comparer_mut = comparer;\r\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\r\n            e_mut = e;\r\n            continue SetTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_ofArray(comparer, l) {\r\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofList(comparer, l) {\r\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return SetTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return SetTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            ie.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\nexport class FSharpSet {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpSet__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        return (that instanceof FSharpSet) && (SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0);\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"set [\" + join(\"; \", map_1((x) => {\r\n            let copyOfStruct = x;\r\n            return toString(copyOfStruct);\r\n        }, this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(that) {\r\n        const s = this;\r\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const s = this;\r\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const s = this;\r\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    get size() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    add(k) {\r\n        const s = this;\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return s;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n    }\r\n    delete(k) {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return false;\r\n    }\r\n    has(k) {\r\n        const s = this;\r\n        return FSharpSet__Contains(s, k);\r\n    }\r\n    keys() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    values() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    entries() {\r\n        const s = this;\r\n        return map_1((v) => [v, v], s);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const s = this;\r\n        iterate_1((x) => {\r\n            f(x, x, s);\r\n        }, s);\r\n    }\r\n}\r\n\r\nexport function FSharpSet$reflection(gen0) {\r\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\r\n}\r\n\r\nexport function FSharpSet_$ctor(comparer, tree) {\r\n    return new FSharpSet(comparer, tree);\r\n}\r\n\r\nexport function FSharpSet__get_Comparer(set$) {\r\n    return set$.comparer;\r\n}\r\n\r\nexport function FSharpSet__get_Tree(set$) {\r\n    return set$.tree;\r\n}\r\n\r\nexport function FSharpSet_Empty(comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\r\n}\r\n\r\nexport function FSharpSet__Add(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Remove(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__get_Count(s) {\r\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Contains(s, value) {\r\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Iterate(s, x) {\r\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Fold(s, f, z) {\r\n    const f_1 = f;\r\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__get_IsEmpty(s) {\r\n    return FSharpSet__get_Tree(s) == null;\r\n}\r\n\r\nexport function FSharpSet__Partition(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return [s, s];\r\n    }\r\n    else {\r\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\r\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Filter(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return s;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Map(s, f, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Exists(s, f) {\r\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__ForAll(s, f) {\r\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet_op_Subtraction(set1, set2) {\r\n    if (FSharpSet__get_Tree(set1) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_op_Addition(set1, set2) {\r\n    if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set1) == null) {\r\n        return set2;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_Intersection(a, b) {\r\n    if (FSharpSet__get_Tree(b) == null) {\r\n        return b;\r\n    }\r\n    else if (FSharpSet__get_Tree(a) == null) {\r\n        return a;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_IntersectionMany(sets) {\r\n    return reduce((s1, s2) => FSharpSet_Intersection(s1, s2), sets);\r\n}\r\n\r\nexport function FSharpSet_Equality(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\r\n}\r\n\r\nexport function FSharpSet_Compare(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\r\n}\r\n\r\nexport function FSharpSet__get_Choose(x) {\r\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MinimumElement(x) {\r\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MaximumElement(x) {\r\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToList(x) {\r\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToArray(x) {\r\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ComputeHashCode(this$) {\r\n    let y;\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (((y = (structuralHash(x_1) | 0), ((res << 1) + y) + 631)) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        enumerator.Dispose();\r\n    }\r\n    return Math.abs(res) | 0;\r\n}\r\n\r\nexport function isEmpty(set$) {\r\n    return FSharpSet__get_IsEmpty(set$);\r\n}\r\n\r\nexport function contains(element, set$) {\r\n    return FSharpSet__Contains(set$, element);\r\n}\r\n\r\nexport function add(value, set$) {\r\n    return FSharpSet__Add(set$, value);\r\n}\r\n\r\nexport function singleton(value, comparer) {\r\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\r\n}\r\n\r\nexport function remove(value, set$) {\r\n    return FSharpSet__Remove(set$, value);\r\n}\r\n\r\nexport function union(set1, set2) {\r\n    return FSharpSet_op_Addition(set1, set2);\r\n}\r\n\r\nexport function unionMany(sets, comparer) {\r\n    return fold_3((s1, s2) => FSharpSet_op_Addition(s1, s2), FSharpSet_Empty(comparer), sets);\r\n}\r\n\r\nexport function intersect(set1, set2) {\r\n    return FSharpSet_Intersection(set1, set2);\r\n}\r\n\r\nexport function intersectMany(sets) {\r\n    return FSharpSet_IntersectionMany(sets);\r\n}\r\n\r\nexport function iterate(action, set$) {\r\n    FSharpSet__Iterate(set$, action);\r\n}\r\n\r\nexport function empty(comparer) {\r\n    return FSharpSet_Empty(comparer);\r\n}\r\n\r\nexport function forAll(predicate, set$) {\r\n    return FSharpSet__ForAll(set$, predicate);\r\n}\r\n\r\nexport function exists(predicate, set$) {\r\n    return FSharpSet__Exists(set$, predicate);\r\n}\r\n\r\nexport function filter(predicate, set$) {\r\n    return FSharpSet__Filter(set$, predicate);\r\n}\r\n\r\nexport function partition(predicate, set$) {\r\n    return FSharpSet__Partition(set$, predicate);\r\n}\r\n\r\nexport function fold(folder, state, set$) {\r\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\r\n}\r\n\r\nexport function foldBack(folder, set$, state) {\r\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\r\n}\r\n\r\nexport function map(mapping, set$, comparer) {\r\n    return FSharpSet__Map(set$, mapping, comparer);\r\n}\r\n\r\nexport function count(set$) {\r\n    return FSharpSet__get_Count(set$);\r\n}\r\n\r\nexport function ofList(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function ofArray(array, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\r\n}\r\n\r\nexport function toList(set$) {\r\n    return FSharpSet__ToList(set$);\r\n}\r\n\r\nexport function toArray(set$) {\r\n    return FSharpSet__ToArray(set$);\r\n}\r\n\r\nexport function toSeq(set$) {\r\n    return map_1((x) => x, set$);\r\n}\r\n\r\nexport function ofSeq(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function difference(set1, set2) {\r\n    return FSharpSet_op_Subtraction(set1, set2);\r\n}\r\n\r\nexport function isSubset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isSuperset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function isProperSubset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isProperSuperset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function minElement(set$) {\r\n    return FSharpSet__get_MinimumElement(set$);\r\n}\r\n\r\nexport function maxElement(set$) {\r\n    return FSharpSet__get_MaximumElement(set$);\r\n}\r\n\r\nexport function unionWith(s1, s2) {\r\n    return fold_3((acc, x) => acc.add(x), s1, s2);\r\n}\r\n\r\nexport function newMutableSetWith(s1, s2) {\r\n    if (s1 instanceof HashSet) {\r\n        return HashSet_$ctor_Z6150332D(s2, HashSet__get_Comparer(s1));\r\n    }\r\n    else {\r\n        return new Set(s2);\r\n    }\r\n}\r\n\r\nexport function intersectWith(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    iterate_1((x) => {\r\n        if (!s2_1.has(x)) {\r\n            s1.delete(x);\r\n        }\r\n    }, s1.values());\r\n}\r\n\r\nexport function exceptWith(s1, s2) {\r\n    iterate_1((x) => {\r\n        s1.delete(x);\r\n    }, s2);\r\n}\r\n\r\nexport function isSubsetOf(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    return forAll_1((arg00) => s2_1.has(arg00), s1.values());\r\n}\r\n\r\nexport function isSupersetOf(s1, s2) {\r\n    return forAll_1((arg00) => s1.has(arg00), s2);\r\n}\r\n\r\nexport function isProperSubsetOf(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    if (s2_1.size > s1.size) {\r\n        return forAll_1((arg00) => s2_1.has(arg00), s1.values());\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function isProperSupersetOf(s1, s2) {\r\n    const s2_1 = cache(s2);\r\n    if (exists_1((arg) => (!s1.has(arg)), s2_1)) {\r\n        return forAll_1((arg00_1) => s1.has(arg00_1), s2_1);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\n","module Hotkeys\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Cmd =\r\n\r\n  [<AutoOpen>]\r\n  module private Internal =\r\n    // by default HotkeysJS does not capture key bindings while in an 'editable' control\r\n    let filterTrue () =\r\n      HotkeysJs.hotkeys.filter <- (fun _ -> true)\r\n\r\n  do filterTrue()\r\n\r\n\r\n  let bindHotkey shortcut messageCtor =\r\n    let handler dispatch =\r\n      HotkeysJs.hotkeys.Invoke(key=shortcut,\r\n        options=HotkeysJs.Options.empty,\r\n        method= fun hkEvent ->\r\n          dispatch messageCtor\r\n          false |> Fable.Core.U2.Case2\r\n      )\r\n    [ handler ]\r\n","// hotkeys-js 3.8.7\r\n// ts2fable 0.8.0\r\nmodule rec HotkeysJs\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JS\r\nopen Browser.Types\r\n\r\nlet [<Import(\"default\",\"hotkeys-js\")>] hotkeys: Hotkeys = jsNative\r\n\r\ntype HotkeysEvent = {\r\n  key: string\r\n  method: KeyHandler\r\n  mods: float[]\r\n  scope: string\r\n  shortcut: string\r\n}\r\n\r\n// type [<AllowNullLiteral>] KeyHandler =\r\n//     [<Emit \"$0($1...)\">] abstract Invoke: keyboardEvent: KeyboardEvent * hotkeysEvent: HotkeysEvent -> U2<unit, bool>\r\n\r\ntype KeyHandler = (KeyboardEvent * HotkeysEvent -> U2<unit, bool>)\r\n\r\n\r\ntype Options = {\r\n  scope: string option\r\n  element: HTMLElement option\r\n  keyup: bool option\r\n  keydown: bool option\r\n  splitKey: string option\r\n}\r\n  with\r\n    static member empty: Options = {scope= None; element=None; keyup=None; keydown=None; splitKey= None}\r\n\r\n\r\ntype [<AllowNullLiteral>] Hotkeys =\r\n    // [<Emit \"$0($1...)\">] abstract Invoke: key: string * method: KeyHandler -> unit\r\n    // [<Emit \"$0($1...)\">] abstract Invoke: key: string * scope: string * method: KeyHandler -> unit\r\n    [<Emit \"$0($1...)\">] abstract Invoke: key: string * options: Options * method: KeyHandler -> unit\r\n    abstract shift: bool with get, set\r\n    abstract ctrl: bool with get, set\r\n    abstract alt: bool with get, set\r\n    abstract option: bool with get, set\r\n    abstract control: bool with get, set\r\n    abstract cmd: bool with get, set\r\n    abstract command: bool with get, set\r\n    abstract setScope: scopeName: string -> unit\r\n    abstract getScope: unit -> string\r\n    abstract deleteScope: scopeName: string -> unit\r\n    abstract noConflict: unit -> Hotkeys\r\n    abstract unbind: ?key: string -> unit\r\n    abstract unbind: key: string * scopeName: string -> unit\r\n    abstract unbind: key: string * scopeName: string * method: KeyHandler -> unit\r\n    abstract unbind: key: string * method: KeyHandler -> unit\r\n    abstract isPressed: keyCode: float -> bool\r\n    abstract isPressed: keyCode: string -> bool\r\n    abstract getPressedKeyCodes: unit -> ResizeArray<float>\r\n    abstract filter: (KeyboardEvent -> bool) with get, set\r\n","namespace Feliz.Plotly\n\nmodule Bindings =\n    open Browser.Types\n    open Fable.Core\n    open Fable.Core.JsInterop\n    open Fable.React\n\n    type Plotly =\n        abstract downloadImage: U2<#HTMLElement,string> * obj -> unit\n        abstract toImage: U2<#HTMLElement,string> * obj -> JS.Promise<string>\n        abstract register: obj -> unit\n\n    let plotly: Plotly = importAll \"plotly.js/dist/plotly\"\n    let plotFactory: Plotly -> obj = importDefault \"react-plotly.js/factory.js\"\n    let plotComponent = plotFactory plotly\n    let createPlot props: ReactElement = \n        ReactBindings.React.createElement (plotComponent, props, [])\n    \n    let getKV value : string * obj = unbox value\n\n    let extractTraces (properties: #ITracesProperty list) =\n        properties \n        |> List.map (getKV >> snd) \n        |> ResizeArray \n        |> Interop.mkPlotAttr \"data\"\n                    \n    let convertTracesToTemplate (traces: ITracesProperty list) =\n        traces\n        |> List.map (unbox<string * obj> >> (fun (name, props) -> name, Array.singleton props))\n    \n    let inline optToString (value: 'T Option) =\n        match value with\n        | Some v -> string v\n        | _ -> \"None\"        \n","module ThemeColors\r\n\r\n\r\nmodule Dark =\r\n  let ``wm-bg1-color-hex`` = \"#1E1E1E\"\r\n  let ``wm-bg2-color-hex`` = \"#262626\"\r\n  let ``wm-bg3-color-hex`` = \"#2C2C2C\"\r\n  let ``wm-bg0-color`` = \"rgb(20, 20, 20)\"\r\n  let ``wm-bg1-color`` = \"rgb(30, 30, 30)\"\r\n  let ``wm-bg2-color`` = \"rgb(38, 38, 38)\"\r\n  let ``wm-bg2-5-color`` = \"rgb(41, 41, 41)\"\r\n  let ``wm-bg3-color`` = \"rgb(44, 44, 44)\"\r\n  let ``wm-bg4-color`` = \"rgb(55, 55, 55)\"\r\n  let ``wm-bg5-color`` = \"rgb(64, 64, 64)\"\r\n  let ``wm-bg5-5-color`` = \"rgb(73, 73, 73)\"\r\n  let ``wm-bg6-color`` = \"rgb(82, 82, 82)\"\r\n  let ``wm-bg6-4-color`` = \"rgb(88, 88, 88)\"\r\n  let ``wm-bg7-color`` = \"rgb(115, 115, 115)\"\r\n  let ``wm-bg7-5-color`` = \"rgb(125, 125, 125)\"\r\n  let ``wm-bg8-color`` = \"rgb(134, 134, 134)\"\r\n  let ``wm-bg8-5-color`` = \"rgb(142, 142, 142)\"\r\n  let ``wm-bg9-color`` = \"rgb(163, 163, 163)\"\r\n  let ``wm-bg10-color`` = \"rgb(212, 212, 212)\"\r\n  let ``wm-bg11-color`` = \"rgb(229, 229, 229)\"\r\n\r\n\r\n// [<AutoOpen>]\r\nmodule Light =\r\n  let ``wm-bg1-color-hex`` = \"#E5E5E5\"\r\n  let ``wm-bg2-color-hex`` = \"#DBDBDB\"\r\n  let ``wm-bg3-color-hex`` = \"#D2D2D2\"\r\n  let ``wm-bg0-color`` = \"rgb(240, 240, 240)\"\r\n  let ``wm-bg1-color`` = \"rgb(229, 229, 229)\"\r\n  let ``wm-bg2-color`` = \"rgb(219, 219, 219)\"\r\n  let ``wm-bg2-5-color`` = \"rgb(215, 215, 215)\"\r\n  let ``wm-bg3-color`` = \"rgb(211, 211, 211)\"\r\n  let ``wm-bg4-color`` = \"rgb(195, 195, 195)\"\r\n  let ``wm-bg5-color`` = \"rgb(182, 182, 182)\"\r\n  let ``wm-bg5-5-color`` = \"rgb(170, 170, 170)\"\r\n  let ``wm-bg6-color`` = \"rgb(158, 158, 158)\"\r\n  let ``wm-bg6-4-color`` = \"rgb(150, 150, 150)\"\r\n  let ``wm-bg7-color`` = \"rgb(120, 120, 120)\"\r\n  let ``wm-bg7-5-color`` = \"rgb(110, 110, 110)\"\r\n  let ``wm-bg8-color`` = \"rgb(102, 102, 102)\"\r\n  let ``wm-bg8-5-color`` = \"rgb(95, 95, 95)\"\r\n  let ``wm-bg9-color`` = \"rgb(78, 78, 78)\"\r\n  let ``wm-bg10-color`` = \"rgb(43, 43, 43)\"\r\n  let ``wm-bg11-color`` = \"rgb(30, 30, 30)\"\r\n\r\n","import { compare } from \"./Util.js\";\r\nimport { unfold, delay } from \"./Seq.js\";\r\nimport { op_Addition, fromZero } from \"./BigInt.js\";\r\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\r\nimport { op_Addition as op_Addition_2, fromBits } from \"./Long.js\";\r\n\r\nexport function makeRangeStepFunction(step, stop, zero, add) {\r\n    const stepComparedWithZero = compare(step, zero) | 0;\r\n    if (stepComparedWithZero === 0) {\r\n        throw (new Error(\"The step of a range cannot be zero\"));\r\n    }\r\n    const stepGreaterThanZero = stepComparedWithZero > 0;\r\n    return (x) => {\r\n        const comparedWithLast = compare(x, stop) | 0;\r\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : ((!stepGreaterThanZero) && (comparedWithLast >= 0))) ? [x, add(x, step)] : (void 0);\r\n    };\r\n}\r\n\r\nexport function integralRangeStep(start, step, stop, zero, add) {\r\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\r\n    return delay(() => unfold(stepFn, start));\r\n}\r\n\r\nexport function rangeBigInt(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromZero(), (x, y) => op_Addition(x, y));\r\n}\r\n\r\nexport function rangeDecimal(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), (x, y) => op_Addition_1(x, y));\r\n}\r\n\r\nexport function rangeDouble(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\r\n}\r\n\r\nexport function rangeInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, false), (x, y) => op_Addition_2(x, y));\r\n}\r\n\r\nexport function rangeUInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, true), (x, y) => op_Addition_2(x, y));\r\n}\r\n\r\nexport function rangeChar(start, stop) {\r\n    const intStop = stop.charCodeAt(0) | 0;\r\n    return delay(() => unfold((c) => {\r\n        if (c <= intStop) {\r\n            return [String.fromCharCode(c), c + 1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, start.charCodeAt(0)));\r\n}\r\n\r\n","module Sidebar\r\n\r\nopen Sutil\r\nopen Sutil.Attr\r\nopen SutilExt\r\n\r\n\r\nlet initiallyOpenedTitles = [\"Global Settings\"; \"Intro\"; \"Shortcuts\"] |> Set.ofList\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Msg =\r\n  | ToggleAll\r\n  | Toggle of string\r\n\r\ntype Model =\r\n  {\r\n    Expanded: Set<string>\r\n  }\r\n  static member isExpanded title (m: Model) =\r\n    m.Expanded.Contains title\r\n\r\nlet init () =\r\n  {\r\n    Expanded = initiallyOpenedTitles\r\n  }, Cmd.batch [ Hotkeys.Cmd.bindHotkey \"ctrl+b\" Msg.ToggleAll ]\r\n\r\nlet update msg (model: Model) =\r\n  match msg with\r\n  | Msg.Toggle title ->\r\n      DOM.rafu (fun _ -> DOM.dispatchSimple Browser.Dom.window \"resize\" )\r\n      let newExpanded =\r\n        if model |> Model.isExpanded title then\r\n          model.Expanded.Remove title\r\n        else\r\n          model.Expanded.Add title\r\n      { model with Expanded = newExpanded }\r\n      , Cmd.none\r\n\r\n  | Msg.ToggleAll ->\r\n      DOM.rafu (fun _ -> DOM.dispatchSimple Browser.Dom.window \"resize\" )\r\n      let newExpanded = if model.Expanded.IsEmpty then initiallyOpenedTitles else Set.empty\r\n      { model with Expanded = newExpanded }\r\n      , Cmd.none\r\n\r\n\r\nmodule Subelements =\r\n  let sideBarPanel dispatch title content (store: IStore<Model>) =\r\n    let isExpanded = store .> Model.isExpanded title\r\n    let toggleExpandedClass = Bind.toggleClass(isExpanded, \"wm-expanded\", \"wm-collapsed\")\r\n    Html.div [\r\n      Attr.className \"sidebar-panel\"\r\n\r\n      Html.div [\r\n        Attr.className \"sidebar-panel-header\"\r\n        toggleExpandedClass\r\n        Html.div [\r\n          Attr.style \"display: flex; flex-grow: 1\"\r\n          Html.button [\r\n            Attr.className \"sidebar-panel-header-caption\"\r\n            onClick (fun _ -> Msg.Toggle title |> dispatch) []\r\n            Html.div [\r\n              Bind.toggleClass(isExpanded, \"codicon codicon-chevron-down\", \"codicon codicon-chevron-right\")\r\n            ]\r\n            Html.div [\r\n              text title\r\n            ]\r\n          ]\r\n        ]\r\n        Html.button [\r\n          Attr.className \"sidebar-panel-header-options\"\r\n          onClick (fun _ -> Browser.Dom.console.log(\"gear\")) [StopPropagation]\r\n          Html.div [\r\n            Attr.className \"codicon codicon-gear\"\r\n          ]\r\n        ]\r\n      ]\r\n      Html.div [\r\n        Attr.className \"sidebar-panel-content\"\r\n        toggleExpandedClass\r\n        content |> DOM.fragment\r\n      ]\r\n    ]\r\n\r\n\r\n  let plotlySidebarPanel obs =\r\n    let chartFun (theme, charCount) =\r\n      DemoChart.reactDemoChart theme [| 1.; 2.; 3.|] [| 1.; 4.; (float charCount) |]\r\n\r\n    Html.div [\r\n      Attr.className \"sidebar-panel-chart\"\r\n      Bind.reactElement(obs, chartFun)\r\n    ]\r\n\r\n\r\n  let themeSelector (themeStore: VirtualStore<bool>) =\r\n    let obsValues = [| true; false |]\r\n    let labels = [|\"Light\"; \"Dark\"|]\r\n    let indices = [| for i = 1 to labels.Length do string i|]\r\n\r\n    let fromIndex i = Array.findIndex ((=) i) indices |> (fun i -> obsValues.[i])\r\n    let toIndex b = Array.findIndex ((=) b) obsValues |> (fun i -> indices.[i])\r\n\r\n    let mappedObs = themeStore |> VirtualStore.map(toIndex, fromIndex)\r\n\r\n    Html.div [\r\n      text \"Theme:\"\r\n      Array.map2\r\n        (fun i scoopChoice ->\r\n          Html.label [\r\n              class' \"radio\"\r\n              Html.input [\r\n                  type' \"radio\"\r\n                  Bindings.bindRadioGroup mappedObs\r\n                  i |> box |> Attr.value\r\n              ]\r\n              Html.span [\r\n                text $\" {scoopChoice}\"\r\n              ]\r\n          ]\r\n        )\r\n        indices\r\n        labels\r\n      |> DOM.fragment\r\n    ]\r\n\r\nopen Subelements\r\n\r\nlet sideBar (themeIsLightStore: VirtualStore<bool>) =\r\n  let store, dispatch = () |> Store.makeElmish init update ignore\r\n  let zippedStore = Store.zip (themeIsLightStore |> Store.distinct) store\r\n\r\n  HtmlExt.recDivClass [\"sidebar-container\"; \"sidebar-scrollable-content\"] [\r\n    store |> sideBarPanel dispatch \"Global Settings\" [\r\n      themeSelector themeIsLightStore\r\n    ]\r\n    store |> sideBarPanel dispatch \"Intro\" [\r\n      text \"This side bar is resizable, try dragging the vertical separator.\"\r\n      Html.br []\r\n      text \"The text editor is \"\r\n      Html.a [\r\n        Attr.href \"https://github.com/microsoft/monaco-editor\"\r\n        text \"monaco-editor\"\r\n      ]\r\n      text \", with all its features. Try \"\r\n      Html.kbd \"Alt\"; text \"+\"; Html.kbd \"Shift\"; text \"+\"; Html.kbd \"F\"\r\n      text \" for example.\"\r\n    ]\r\n    store |> sideBarPanel dispatch \"Shortcuts\" [\r\n      Html.dl [\r\n        Html.dt [ Html.kbd \"Ctrl\"; text \"+\"; Html.kbd \"B\" ]\r\n        Html.dd [ text \"Toggle the sidebar panels\"]\r\n        Html.dt [ Html.kbd \"Ctrl\"; text \"+\"; Html.kbd \"S\" ]\r\n        Html.dd [ text \"Calls the Save command\"]\r\n        Html.dt [ Html.kbd \"Esc\" ]\r\n        Html.dd [ text \"Release the keyboard focus (pressing Tab will then shift focus)\"]\r\n      ]\r\n    ]\r\n    store |> sideBarPanel dispatch \"Demo Plotly chart\" [\r\n      text \"A hosted react components that changes with the number of open panels.\"\r\n      Html.br []\r\n      text \"Done with \"\r\n      Html.a [ text \"Feliz.Plotly\"; Attr.href \"https://github.com/Shmew/Feliz.Plotly\" ]\r\n      Html.br []\r\n      text \"(Fable bindings for \"\r\n      Html.a [ text \"plotly.js\"; Attr.href \"https://github.com/plotly/plotly.js\" ]\r\n      text \" and \"\r\n      Html.a [ text \"react-plotly.js\"; Attr.href \"https://github.com/plotly/react-plotly.js\" ]\r\n      text \").\"\r\n      zippedStore\r\n        .> (fun (theme, m) -> theme, m.Expanded.Count)\r\n        =/=|> plotlySidebarPanel\r\n    ]\r\n  ]\r\n","module DemoChart\r\n\r\nopen Feliz\r\nopen Feliz.Plotly\r\n\r\n\r\nlet reactDemoChart theme (xs: float[]) (ys: float[]) =\r\n  Plotly.plot [\r\n    plot.traces [\r\n      traces.scatter [\r\n        scatter.x xs\r\n        scatter.y ys\r\n        scatter.mode [\r\n          scatter.mode.lines\r\n          scatter.mode.markers\r\n        ]\r\n      ]\r\n    ]\r\n    plot.layout [\r\n      layout.title \"a Chart\"\r\n      layout.autosize true\r\n      layout.paperBgcolor\r\n        (\r\n          if theme then\r\n            ThemeColors.Light.``wm-bg1-color``\r\n          else\r\n            ThemeColors.Dark.``wm-bg1-color``\r\n        )\r\n      layout.plotBgcolor\r\n        (\r\n          if theme then\r\n            ThemeColors.Light.``wm-bg4-color``\r\n          else\r\n            ThemeColors.Dark.``wm-bg4-color``\r\n        )\r\n      layout.xaxis [\r\n        xaxis.color\r\n          (\r\n            if theme then\r\n              ThemeColors.Light.``wm-bg9-color``\r\n            else\r\n              ThemeColors.Dark.``wm-bg9-color``\r\n          )\r\n      ]\r\n      layout.yaxis [\r\n        yaxis.color\r\n          (\r\n            if theme then\r\n              ThemeColors.Light.``wm-bg9-color``\r\n            else\r\n              ThemeColors.Dark.``wm-bg9-color``\r\n          )\r\n      ]\r\n      layout.margin [\r\n        margin.t 40\r\n        margin.b 30\r\n        margin.r 20\r\n        margin.l 20\r\n      ]\r\n    ]\r\n    plot.useResizeHandler true\r\n    plot.style [\r\n      Interop.mkStyle \"height\" \"100%\"\r\n      Interop.mkStyle \"width\" \"100%\"\r\n    ]\r\n\r\n    plot.config [\r\n      config.displaylogo false\r\n      config.showAxisDragHandles true\r\n      config.responsive true\r\n    ]\r\n  ]\r\n","module MonacoEditor\r\n\r\nopen Fable.Core\r\nopen Sutil\r\nopen SutilExt\r\nopen Monaco\r\n\r\n\r\n[<AutoOpen>]\r\nmodule private Internal =\r\n  let monacoSetup () =\r\n    Monaco.editor.defineTheme(\r\n      \"wm-theme-light\",\r\n        {\r\n          ``base`` = Monaco.Editor.BuiltinTheme.Vs\r\n          ``inherit`` = true\r\n          colors = JsInterop.jsOptions<Monaco.Editor.IColors>(\r\n            fun o ->\r\n              o.[\"editor.background\"] <- ThemeColors.Light.``wm-bg3-color-hex``\r\n              o.[\"editor.lineHighlightBackground\"] <- \"#007AFF14\"\r\n            )\r\n          rules =\r\n            let rule: Monaco.Editor.ITokenThemeRule = {\r\n              Monaco.Editor.ITokenThemeRule.token= \"\"\r\n              foreground= None\r\n              background= Some ThemeColors.Light.``wm-bg1-color-hex``\r\n              fontStyle= None\r\n            }\r\n            [rule] |> ResizeArray\r\n          encodedTokensColors = None\r\n        }\r\n    )\r\n    Monaco.editor.defineTheme(\r\n      \"wm-theme-dark\",\r\n        {\r\n          ``base`` = Monaco.Editor.BuiltinTheme.VsDark\r\n          ``inherit`` = true\r\n          colors = JsInterop.jsOptions<Monaco.Editor.IColors>(\r\n              fun o ->\r\n                o.[\"editor.background\"] <- ThemeColors.Dark.``wm-bg2-color-hex``\r\n                o.[\"editor.lineHighlightBackground\"] <- \"#007AFF14\"\r\n            )\r\n          rules =\r\n            let rule: Monaco.Editor.ITokenThemeRule = {\r\n              token= \"\"\r\n              foreground= None\r\n              background= Some ThemeColors.Dark.``wm-bg1-color-hex``\r\n              fontStyle= None\r\n            }\r\n            [rule] |> ResizeArray\r\n          encodedTokensColors = None\r\n        }\r\n      )\r\n\r\n  do monacoSetup()\r\n\r\n  let monacoEditorOptions initialText themeName =\r\n    JsInterop.jsOptions<Monaco.Editor.IStandaloneEditorConstructionOptions>(\r\n      fun o ->\r\n        o.language <- \"json\" |> Some\r\n        o.theme <- themeName |> Some\r\n        o.value <- initialText |> Some\r\n        o.scrollBeyondLastLine <- false |> Some\r\n        o.minimap <-\r\n          (\r\n            JsInterop.jsOptions<Monaco.Editor.IEditorMinimapOptions>(\r\n              fun o ->\r\n                o.size <- Monaco.Editor.IEditorMinimapOptionsSize.Proportional |> Some\r\n                o.scale <- 40. |> Some\r\n            ) |> Some\r\n          )\r\n    )\r\n\r\n  let themeName isLight =\r\n    if isLight then \"wm-theme-light\" else \"wm-theme-dark\"\r\n\r\n  type MonacoDisposable(monacoDisposable: Monaco.IDisposable) =\r\n    interface System.IDisposable with\r\n      member _.Dispose() = monacoDisposable.dispose()\r\n\r\n\r\n\r\nlet setTheme isLight=\r\n  Monaco.editor.setTheme( themeName isLight )\r\n\r\n\r\n// this should be a ReadOnlyStore\r\nlet monacoEditor onCreated onChange initialText (isLightTheme: Store<bool>) =\r\n  Html.div [\r\n    Attr.style \"height: 100%\"\r\n    DOM.host (fun ctx ->\r\n      let e = Monaco.editor.create(ctx, monacoEditorOptions initialText (themeName isLightTheme.Value))\r\n\r\n      let resizerDisposable = ResizeObserver.getResizer(downcast ctx).Subscribe( fun _ -> e.layout())\r\n      DOM.rafu( fun _ -> e.layout() )\r\n\r\n      // let tabCode = Monaco.KeyCode.Tab |> int\r\n      // let chord = KeyMod.chord( escKeyCode, tabCode)\r\n      // let shortcut2 = KeyMod.CtrlCmd ||| (KeyMod.Shift |> int) ||| (Monaco.KeyCode.KeyS |> int)\r\n      let escKeyCode = Monaco.KeyCode.Escape |> int\r\n      let actionDisposable =\r\n        e.addAction(\r\n          {\r\n            Monaco.Editor.IActionDescriptor.label = \"Release keyboard focus\"\r\n            id = \"wm-escape-tab\"\r\n            precondition = None\r\n            keybindingContext = None\r\n            contextMenuGroupId = Some \"navigation\"\r\n            keybindings = ResizeArray([escKeyCode]) |> Some\r\n            run = fun _ ->\r\n              (Browser.Dom.document.activeElement :?> Browser.Types.HTMLElement).blur();\r\n              U2.Case1 ()\r\n\r\n            contextMenuOrder = Some 1.5\r\n          }\r\n        )\r\n\r\n      let onDidChangeDisposable = e.onDidChangeModelContent.Invoke(onChange >> (fun () -> None))\r\n\r\n      DOM.SutilNode.RegisterDisposable(ctx, resizerDisposable)\r\n      DOM.SutilNode.RegisterDisposable(ctx, new MonacoDisposable(actionDisposable))\r\n      DOM.SutilNode.RegisterDisposable(ctx, new MonacoDisposable(onDidChangeDisposable))\r\n\r\n      isLightTheme |> Store.write setTheme\r\n      e |> onCreated\r\n    )\r\n  ]\r\n\r\n","module EditorPage\r\n\r\nopen Sutil\r\nopen Sutil.Attr\r\nopen SutilExt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Msg =\r\n  | SaveEditor\r\n  | EditorCreated of Monaco.Monaco.Editor.IStandaloneCodeEditor\r\n  | ContentChanged of Monaco.Monaco.Editor.IModelContentChangedEvent\r\n\r\n\r\ntype Model =\r\n  {\r\n    Editor: Monaco.Monaco.Editor.IStandaloneCodeEditor option\r\n    CharCount: int\r\n  }\r\n  static member charCount(m: Model) = m.CharCount\r\n\r\n\r\nlet init () =\r\n  {\r\n    Editor= None\r\n    CharCount= 0\r\n  },\r\n  Cmd.batch [\r\n    Hotkeys.Cmd.bindHotkey \"ctrl+s\" Msg.SaveEditor\r\n    Cmd.ofMsg Msg.SaveEditor\r\n  ]\r\n\r\n\r\nlet update msg model =\r\n  match msg with\r\n  | Msg.EditorCreated e ->\r\n      {model with Editor= Some e}, Cmd.none\r\n  | Msg.SaveEditor ->\r\n      let c = model.Editor |> Option.map (fun e -> e.getValue().Length) |> Option.defaultValue 0\r\n      {model with CharCount= c}, Cmd.none\r\n  | Msg.ContentChanged c ->\r\n      let charCount = model.Editor |> Option.map (fun e -> e.getValue().Length) |> Option.defaultValue 0\r\n      {model with CharCount= charCount}, Cmd.none\r\n\r\n\r\n// themeIsLight should be a ReadOnlyStore<bool>\r\nlet editorPage (themeIsLight: VirtualStore<bool>) =\r\n  let model, dispatch = () |> Store.makeElmish init update ignore\r\n\r\n  HtmlExt.recDivClass [ \"editor-page\"; \"editor-page-content\"] [\r\n    Html.div [\r\n      Attr.className \"editor-page-monaco-container\"\r\n      MonacoEditor.monacoEditor\r\n        (Msg.EditorCreated >> dispatch)\r\n        (Msg.ContentChanged >> dispatch)\r\n        \"\"\"{\"Here\": \"is some json\",\"anObj\": {\"a\": [1,2,3,5,8,13]}}\"\"\"\r\n        themeIsLight\r\n    ]\r\n\r\n    Html.div [ Attr.className \"editor-page-separator\"]\r\n\r\n    Html.div [\r\n      Attr.className \"editor-page-control-bar\"\r\n      Html.button [\r\n        Attr.className \"wm-button\"\r\n        Html.text \"Save\"\r\n        onClick (fun _ -> dispatch Msg.SaveEditor) []\r\n      ]\r\n      Html.span [\r\n        Attr.style \"margin-left: 10px\"\r\n        model .> Model.charCount |=/=> (sprintf \"%d characters\" >> text)\r\n      ]\r\n\r\n    ]\r\n  ]\r\n","module App\r\n\r\nopen Sutil\r\nopen SutilExt\r\nopen Sutil.Attr\r\n\r\ntype DragTarget =\r\n  | NoTarget\r\n  | PanelSplitter\r\n\r\ntype Model = {\r\n  DragTarget : DragTarget\r\n  SidebarSize : float\r\n  ThemeIsLight: bool\r\n}\r\nwith\r\n  static member isDragging(m: Model) = m.DragTarget = PanelSplitter\r\n  static member sidebarSizeInt(m: Model) = m.SidebarSize |> int\r\n\r\ntype Msg =\r\n  | PanelDragStarted\r\n  | PanelDrag of Browser.Types.MouseEvent\r\n  | PanelDragEnded\r\n  | MouseUp\r\n  | MouseMove of Browser.Types.MouseEvent\r\n  | DispatchResizeEvent\r\n  | ThemeIsLight of bool\r\n\r\n\r\nlet private clamp min max value =\r\n  if value >= max then max elif value <= min then min else value\r\n\r\n\r\nlet update msg (model : Model) =\r\n  match msg with\r\n  | MouseUp ->\r\n      model,\r\n      if model |> Model.isDragging then Cmd.ofMsg PanelDragEnded else Cmd.none\r\n\r\n  | MouseMove position ->\r\n      model,\r\n      if model |> Model.isDragging then Cmd.ofMsg (PanelDrag position) else Cmd.none\r\n\r\n  | PanelDragStarted ->\r\n      { model with DragTarget = PanelSplitter }\r\n      , Cmd.none\r\n\r\n  | PanelDragEnded ->\r\n      { model with DragTarget = NoTarget }\r\n      , Cmd.ofMsg DispatchResizeEvent\r\n\r\n  | PanelDrag position ->\r\n      { model with SidebarSize = position.pageX - 5. |> clamp 250. 750. }\r\n      , Cmd.ofMsg DispatchResizeEvent\r\n\r\n  | DispatchResizeEvent ->\r\n      DOM.rafu (fun _ -> DOM.dispatchSimple Browser.Dom.window \"resize\" )\r\n      model, Cmd.none\r\n\r\n  | ThemeIsLight isLight ->\r\n      // Browser.Dom.console.log(\"theme is light\", isLight)\r\n      DOM.rafu (fun _ ->\r\n        let toRemove = if isLight then \"dark-theme\" else \"light-theme\"\r\n        let toAdd = if isLight then \"light-theme\" else \"dark-theme\"\r\n        Browser.Dom.document.body.classList.remove( toRemove)\r\n        Browser.Dom.document.body.classList.add(toAdd)\r\n      )\r\n\r\n      { model with ThemeIsLight = isLight }\r\n      , Cmd.none\r\n\r\nlet init () =\r\n  {\r\n    DragTarget= NoTarget\r\n    SidebarSize= 400.\r\n    ThemeIsLight= Interop.Window.matchMedia( \"(prefers-color-scheme: light)\" ).matches\r\n  },\r\n  Cmd.batch [\r\n    Cmd.move MouseMove\r\n    Cmd.ups MouseUp\r\n    Cmd.ofMsgDelayed 0. DispatchResizeEvent\r\n  ]\r\n\r\nlet app () =\r\n  let model, dispatch = () |> Store.makeElmish init update ignore\r\n\r\n  let umedia = MediaQuery.listenMedia \"(prefers-color-scheme: light)\" (dispatch << ThemeIsLight)\r\n\r\n  let sidebarSize =\r\n    model\r\n    .> Model.sidebarSizeInt\r\n    .>=/=> fun s -> $\"grid-template-columns:{s}px 7px calc(100%% - {s+7}px)\"\r\n\r\n  let themeIsLight = model |> VirtualStore.ofStore  (fun m -> m.ThemeIsLight) (ThemeIsLight >> dispatch)\r\n\r\n  let resizeHBar () =\r\n    HtmlExt.recDivClass [ \"horizontal-resize\"; \"\"] [\r\n      onMouse \"mousedown\" (fun _ -> dispatch PanelDragStarted) [PreventDefault]\r\n      Html.div [ ]\r\n    ]\r\n\r\n  HtmlExt.recDivClass [ \"wm-app-container\"; \"wm-app-grid\"] [\r\n    DOM.unsubscribeOnUnmount [ umedia; themeIsLight.Dispose]\r\n    bindElement sidebarSize Attr.style\r\n\r\n    Sidebar.sideBar themeIsLight\r\n    resizeHBar()\r\n    EditorPage.editorPage themeIsLight\r\n  ]\r\n","\nmodule Sutil.MediaQuery\n\nopen System\nopen Sutil.DOM\nopen Sutil.Bindings\nopen Sutil.Transition\nopen Browser\nopen Fable.Core.JsInterop\nopen Interop\n\nlet listenMedia (query:string) (handler : bool -> unit) : unit -> unit =\n    let mql = Window.matchMedia( query )\n    handler (mql.matches)\n    listen \"change\" mql <| fun e -> e?matches |> handler\n\nlet bindMediaQuery (query:string) (view : bool -> SutilElement) =\n    let s = Store.make false\n    let u = listenMedia query (fun m -> s <~ m)\n    fragment [\n        disposeOnUnmount [ Helpers.disposable u; s ]\n        Bind.el(s,view)\n    ]\n\nlet showIfMedia2 (query:string) (f:bool->bool) (trans) (view : SutilElement) =\n    let s = Store.make false\n    let u = listenMedia query (fun m -> s <~ m)\n    fragment [\n        disposeOnUnmount [ Helpers.disposable u; s ]\n        transition trans (s .> f) view\n    ]\n\nlet showIfMedia (query:string) (trans) (view : SutilElement) =\n    showIfMedia2 query id trans view\n\nlet media<'T> (query:string) (map:bool -> 'T) (app : IObservable<'T> -> SutilElement) =\n    let s = Store.make false\n    let u = listenMedia query (fun m -> s <~ m)\n    fragment [\n        disposeOnUnmount [ Helpers.disposable u; s ]\n        s .> map |> app\n    ]\n","module Program\r\n\r\nApp.app()\r\n|> Sutil.Program.mountElement \"sutil-app\"\r\n","(function () {\r\n    'use strict';\r\n\r\n    if (typeof document === 'undefined' || 'adoptedStyleSheets' in document) { return; }\r\n\r\n    var hasShadyCss = 'ShadyCSS' in window && !ShadyCSS.nativeShadow;\r\n    var bootstrapper = document.implementation.createHTMLDocument('boot');\r\n    var closedShadowRootRegistry = new WeakMap();\r\n    var _DOMException = typeof DOMException === 'object' ? Error : DOMException;\r\n\r\n    var defineProperty = Object.defineProperty;\r\n    var forEach = Array.prototype.forEach;\r\n    var importPattern = /@import.+?;?$/gm;\r\n    function rejectImports(contents) {\r\n        var _contents = contents.replace(importPattern, '');\r\n        if (_contents !== contents) {\r\n            console.warn('@import rules are not allowed here. See https://github.com/WICG/construct-stylesheets/issues/119#issuecomment-588352418');\r\n        }\r\n        return _contents.trim();\r\n    }\r\n    function clearRules(sheet) {\r\n        for (var i = 0; i < sheet.cssRules.length; i++) {\r\n            sheet.deleteRule(0);\r\n        }\r\n    }\r\n    function insertAllRules(from, to) {\r\n        forEach.call(from.cssRules, function (rule, i) {\r\n            to.insertRule(rule.cssText, i);\r\n        });\r\n    }\r\n    function isElementConnected(element) {\r\n        return 'isConnected' in element\r\n            ? element.isConnected\r\n            : document.contains(element);\r\n    }\r\n    function unique(arr) {\r\n        return arr.filter(function (value, index) { return arr.indexOf(value) === index; });\r\n    }\r\n    function diff(arr1, arr2) {\r\n        return arr1.filter(function (value) { return arr2.indexOf(value) === -1; });\r\n    }\r\n    function removeNode(node) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n    function getShadowRoot(element) {\r\n        return element.shadowRoot || closedShadowRootRegistry.get(element);\r\n    }\r\n\r\n    var cssStyleSheetMethods = [\r\n        'addImport',\r\n        'addPageRule',\r\n        'addRule',\r\n        'deleteRule',\r\n        'insertRule',\r\n        'removeImport',\r\n        'removeRule',\r\n    ];\r\n    var NonConstructedStyleSheet = CSSStyleSheet;\r\n    var nonConstructedProto = NonConstructedStyleSheet.prototype;\r\n    nonConstructedProto.replace = function () {\r\n        return Promise.reject(new _DOMException(\"Can't call replace on non-constructed CSSStyleSheets.\"));\r\n    };\r\n    nonConstructedProto.replaceSync = function () {\r\n        throw new _DOMException(\"Failed to execute 'replaceSync' on 'CSSStyleSheet': Can't call replaceSync on non-constructed CSSStyleSheets.\");\r\n    };\r\n    function isCSSStyleSheetInstance(instance) {\r\n        return typeof instance === 'object'\r\n            ? proto$2.isPrototypeOf(instance) ||\r\n                nonConstructedProto.isPrototypeOf(instance)\r\n            : false;\r\n    }\r\n    function isNonConstructedStyleSheetInstance(instance) {\r\n        return typeof instance === 'object'\r\n            ? nonConstructedProto.isPrototypeOf(instance)\r\n            : false;\r\n    }\r\n    var $basicStyleSheet = new WeakMap();\r\n    var $locations = new WeakMap();\r\n    var $adoptersByLocation = new WeakMap();\r\n    function addAdopterLocation(sheet, location) {\r\n        var adopter = document.createElement('style');\r\n        $adoptersByLocation.get(sheet).set(location, adopter);\r\n        $locations.get(sheet).push(location);\r\n        return adopter;\r\n    }\r\n    function getAdopterByLocation(sheet, location) {\r\n        return $adoptersByLocation.get(sheet).get(location);\r\n    }\r\n    function removeAdopterLocation(sheet, location) {\r\n        $adoptersByLocation.get(sheet).delete(location);\r\n        $locations.set(sheet, $locations.get(sheet).filter(function (_location) { return _location !== location; }));\r\n    }\r\n    function restyleAdopter(sheet, adopter) {\r\n        requestAnimationFrame(function () {\r\n            clearRules(adopter.sheet);\r\n            insertAllRules($basicStyleSheet.get(sheet), adopter.sheet);\r\n        });\r\n    }\r\n    function checkInvocationCorrectness(self) {\r\n        if (!$basicStyleSheet.has(self)) {\r\n            throw new TypeError('Illegal invocation');\r\n        }\r\n    }\r\n    function ConstructedStyleSheet() {\r\n        var self = this;\r\n        var style = document.createElement('style');\r\n        bootstrapper.body.appendChild(style);\r\n        $basicStyleSheet.set(self, style.sheet);\r\n        $locations.set(self, []);\r\n        $adoptersByLocation.set(self, new WeakMap());\r\n    }\r\n    var proto$2 = ConstructedStyleSheet.prototype;\r\n    proto$2.replace = function replace(contents) {\r\n        try {\r\n            this.replaceSync(contents);\r\n            return Promise.resolve(this);\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    proto$2.replaceSync = function replaceSync(contents) {\r\n        checkInvocationCorrectness(this);\r\n        if (typeof contents === 'string') {\r\n            var self_1 = this;\r\n            var style = $basicStyleSheet.get(self_1).ownerNode;\r\n            style.textContent = rejectImports(contents);\r\n            $basicStyleSheet.set(self_1, style.sheet);\r\n            $locations.get(self_1).forEach(function (location) {\r\n                if (location.isConnected()) {\r\n                    restyleAdopter(self_1, getAdopterByLocation(self_1, location));\r\n                }\r\n            });\r\n        }\r\n    };\r\n    defineProperty(proto$2, 'cssRules', {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: function cssRules() {\r\n            checkInvocationCorrectness(this);\r\n            return $basicStyleSheet.get(this).cssRules;\r\n        },\r\n    });\r\n    cssStyleSheetMethods.forEach(function (method) {\r\n        proto$2[method] = function () {\r\n            var self = this;\r\n            checkInvocationCorrectness(self);\r\n            var args = arguments;\r\n            var basic = $basicStyleSheet.get(self);\r\n            var locations = $locations.get(self);\r\n            var result = basic[method].apply(basic, args);\r\n            locations.forEach(function (location) {\r\n                if (location.isConnected()) {\r\n                    var sheet = getAdopterByLocation(self, location).sheet;\r\n                    sheet[method].apply(sheet, args);\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n    });\r\n    defineProperty(ConstructedStyleSheet, Symbol.hasInstance, {\r\n        configurable: true,\r\n        value: isCSSStyleSheetInstance,\r\n    });\r\n\r\n    var defaultObserverOptions = {\r\n        childList: true,\r\n        subtree: true,\r\n    };\r\n    var locations = new WeakMap();\r\n    function getAssociatedLocation(element) {\r\n        var location = locations.get(element);\r\n        if (!location) {\r\n            location = new Location(element);\r\n            locations.set(element, location);\r\n        }\r\n        return location;\r\n    }\r\n    function attachAdoptedStyleSheetProperty(constructor) {\r\n        defineProperty(constructor.prototype, 'adoptedStyleSheets', {\r\n            configurable: true,\r\n            enumerable: true,\r\n            get: function () {\r\n                return getAssociatedLocation(this).sheets;\r\n            },\r\n            set: function (sheets) {\r\n                getAssociatedLocation(this).update(sheets);\r\n            },\r\n        });\r\n    }\r\n    function traverseWebComponents(node, callback) {\r\n        var iter = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT, function (foundNode) {\r\n            return getShadowRoot(foundNode)\r\n                ? NodeFilter.FILTER_ACCEPT\r\n                : NodeFilter.FILTER_REJECT;\r\n        },\r\n        null, false);\r\n        for (var next = void 0; (next = iter.nextNode());) {\r\n            callback(getShadowRoot(next));\r\n        }\r\n    }\r\n    var $element = new WeakMap();\r\n    var $uniqueSheets = new WeakMap();\r\n    var $observer = new WeakMap();\r\n    function isExistingAdopter(self, element) {\r\n        return (element instanceof HTMLStyleElement &&\r\n            $uniqueSheets.get(self).some(function (sheet) { return getAdopterByLocation(sheet, self); }));\r\n    }\r\n    function getAdopterContainer(self) {\r\n        var element = $element.get(self);\r\n        return element instanceof Document ? element.body : element;\r\n    }\r\n    function adopt(self) {\r\n        var styleList = document.createDocumentFragment();\r\n        var sheets = $uniqueSheets.get(self);\r\n        var observer = $observer.get(self);\r\n        var container = getAdopterContainer(self);\r\n        observer.disconnect();\r\n        sheets.forEach(function (sheet) {\r\n            styleList.appendChild(getAdopterByLocation(sheet, self) || addAdopterLocation(sheet, self));\r\n        });\r\n        container.insertBefore(styleList, null);\r\n        observer.observe(container, defaultObserverOptions);\r\n        sheets.forEach(function (sheet) {\r\n            restyleAdopter(sheet, getAdopterByLocation(sheet, self));\r\n        });\r\n    }\r\n    function Location(element) {\r\n        var self = this;\r\n        self.sheets = [];\r\n        $element.set(self, element);\r\n        $uniqueSheets.set(self, []);\r\n        $observer.set(self, new MutationObserver(function (mutations, observer) {\r\n            if (!document) {\r\n                observer.disconnect();\r\n                return;\r\n            }\r\n            mutations.forEach(function (mutation) {\r\n                if (!hasShadyCss) {\r\n                    forEach.call(mutation.addedNodes, function (node) {\r\n                        if (!(node instanceof Element)) {\r\n                            return;\r\n                        }\r\n                        traverseWebComponents(node, function (root) {\r\n                            getAssociatedLocation(root).connect();\r\n                        });\r\n                    });\r\n                }\r\n                forEach.call(mutation.removedNodes, function (node) {\r\n                    if (!(node instanceof Element)) {\r\n                        return;\r\n                    }\r\n                    if (isExistingAdopter(self, node)) {\r\n                        adopt(self);\r\n                    }\r\n                    if (!hasShadyCss) {\r\n                        traverseWebComponents(node, function (root) {\r\n                            getAssociatedLocation(root).disconnect();\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }));\r\n    }\r\n    var proto$1 = Location.prototype;\r\n    proto$1.isConnected = function isConnected() {\r\n        var element = $element.get(this);\r\n        return element instanceof Document\r\n            ? element.readyState !== 'loading'\r\n            : isElementConnected(element.host);\r\n    };\r\n    proto$1.connect = function connect() {\r\n        var container = getAdopterContainer(this);\r\n        $observer.get(this).observe(container, defaultObserverOptions);\r\n        if ($uniqueSheets.get(this).length > 0) {\r\n            adopt(this);\r\n        }\r\n        traverseWebComponents(container, function (root) {\r\n            getAssociatedLocation(root).connect();\r\n        });\r\n    };\r\n    proto$1.disconnect = function disconnect() {\r\n        $observer.get(this).disconnect();\r\n    };\r\n    proto$1.update = function update(sheets) {\r\n        var self = this;\r\n        var locationType = $element.get(self) === document ? 'Document' : 'ShadowRoot';\r\n        if (!Array.isArray(sheets)) {\r\n            throw new TypeError(\"Failed to set the 'adoptedStyleSheets' property on \" + locationType + \": Iterator getter is not callable.\");\r\n        }\r\n        if (!sheets.every(isCSSStyleSheetInstance)) {\r\n            throw new TypeError(\"Failed to set the 'adoptedStyleSheets' property on \" + locationType + \": Failed to convert value to 'CSSStyleSheet'\");\r\n        }\r\n        if (sheets.some(isNonConstructedStyleSheetInstance)) {\r\n            throw new TypeError(\"Failed to set the 'adoptedStyleSheets' property on \" + locationType + \": Can't adopt non-constructed stylesheets\");\r\n        }\r\n        self.sheets = sheets;\r\n        var oldUniqueSheets = $uniqueSheets.get(self);\r\n        var uniqueSheets = unique(sheets);\r\n        var removedSheets = diff(oldUniqueSheets, uniqueSheets);\r\n        removedSheets.forEach(function (sheet) {\r\n            removeNode(getAdopterByLocation(sheet, self));\r\n            removeAdopterLocation(sheet, self);\r\n        });\r\n        $uniqueSheets.set(self, uniqueSheets);\r\n        if (self.isConnected() && uniqueSheets.length > 0) {\r\n            adopt(self);\r\n        }\r\n    };\r\n\r\n    window.CSSStyleSheet = ConstructedStyleSheet;\r\n    attachAdoptedStyleSheetProperty(Document);\r\n    if ('ShadowRoot' in window) {\r\n        attachAdoptedStyleSheetProperty(ShadowRoot);\r\n        var proto = Element.prototype;\r\n        var attach_1 = proto.attachShadow;\r\n        proto.attachShadow = function attachShadow(init) {\r\n            var root = attach_1.call(this, init);\r\n            if (init.mode === 'closed') {\r\n                closedShadowRootRegistry.set(this, root);\r\n            }\r\n            return root;\r\n        };\r\n    }\r\n    var documentLocation = getAssociatedLocation(document);\r\n    if (documentLocation.isConnected()) {\r\n        documentLocation.connect();\r\n    }\r\n    else {\r\n        document.addEventListener('DOMContentLoaded', documentLocation.connect.bind(documentLocation));\r\n    }\r\n\r\n}());","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./main.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./main.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\n__webpack_require__.O(undefined, [216], () => (__webpack_require__(5342)))\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(8072)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","___CSS_LOADER_EXPORT___","i","push","module","id","x","Array","isArray","ArrayBuffer","isView","isHashable","GetHashCode","sameConstructor","y","Object","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","value","done","Error","Dispose","o","GetEnumerator","Symbol","iterator","en","hasNext","undefined","padWithZeros","length","str","toString","date","date1","offset","kind","getTimezoneOffset","radix","ObjectRef","static","idMap","has","set","count","get","numberHash","combineHashCodes","hashes","reduce","h1","h2","s","h","len","charCodeAt","arrayHash","Date","getTime","dateHash","values","map","v","equalArrays","eq","equalArraysWith","Equals","isEquatable","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","createAtom","atom","isSetter","createObj","fields","obj","kv","jsOptions","mutator","opts","WeakMap","CURRIED","_curry","args","arity","f","arg","concat","callStack","self","seqToString","cons","entries","k","join","name","String","cases","tag","toJSON","fieldStr","withParens","indexOf","unionToString","splice","other","recordToJSON","recordToString","recordGetHashCode","thisNames","recordEquals","result","recordCompareTo","FSharpRef","contentsOrGetter","setter","getter","contents","symbol","isNumeric","multiply","toFixed","dp","toPrecision","sd","toExponential","toHex","Number","wasm","WebAssembly","Instance","Module","Uint8Array","exports","e","Long","low","high","unsigned","isLong","prototype","substr","bytes","le","fromBytesLE","fromBytesBE","fromBytes","$this","hi","lo","toBytesLE","toBytesBE","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","p","substring","radixToPower","size","min","parseInt","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","toNumber","isZero","isNegative","radixLong","div","divide","rem1","subtract","rem","remDiv","digits","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","res","div_u","div_s","toUnsigned","numBits","shiftRightUnsigned","shiftLeft","shiftRight","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","op_Multiply","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","replace","match","rep","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","_provider","_a","_b","_c","d","dateWithOffset","dateToISOStringWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","now","DateTime","fsFormatRegExp","formatRegExp","isLessThan","input","cont","lastIndex","strParts","matches","strIdx","exec","matchIndex","index","createPrinter","continuePrint","formatReplacement","flags","padLength","precision","sign","toLowerCase","toUpperCase","zeroFlag","minusFlag","ch","padLeft","_strParts","_matches","_result","padArg","slice","_padLength","delimiter","xs","from","isRight","startIndex","Some","toArray","opt","defaultValue","mapping","Helpers_allocateArrayFromCons","source1","source2","ar","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","xt","yt","i_mut","h_mut","t","_key","c","ListEnumerator$1","it","__","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Length","FSharpList__get_Head","FSharpList__get_Tail","xs_mut","tryLast","folder","state","acc","action","unitVar0","ofArrayWithTail","tail_1","ys","root","node","t_2","Major","Minor","Patch","msg","cmds","lists","forEach","enumerator","xs_6","addToDict","dict","source","message","arg10","enabled","console","copyOfStruct","ms","timestamp","start","r","makeIdGeneratorFrom","Enumerator_notStarted","Enumerator_alreadyFinished","initialized","Enumerator_Seq","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","generator","sources","outerOpt","innerOpt","curr","started","finished","finish","inner","outer","inner_1","outer_1","Enumerator_concat","target","fill","targetIndex","generate","create","compute","openf","closef","x_1","matchValue_1","Enumerator_generateWhileSome","e_1","window","document","typ","listener","query","matchMedia","data","dispatch","newVal","n","nodeType","doc","body","NodeMap","getNodeMap","ownerDocument","tc","textContent","visit","child","nextSibling","firstChild","children","hasDisposables","Disposables","getDisposables","clearDisposables","condition","descendantsDepthFirst","cleanup","parent","cleanupDeep","refNode","event","fn","removeEventListener","callback","_arg1","requestAnimationFrame","el","a","_name","_parent","_prevInit","domId","childGroup","groups","Groups","list","g","_childGroups","_children","nodeIsConnected","b","isSameNode","refDomNode","prev","find","existing","insertBefore","nodes","oldChild","assertTrue","setSvId","_","id'","parentNode","unmount","prevInit","_prev","zs","xs_3","_dispose","findParent","ctx","Action","Parent","Previous","Connected","tn","Debug","Document","createTextNode","createElement","rule","sheet","namedSheet","ruleMatchEl","StyleSheet","tupledArg","custom","rootStyle","Name","applyCustomRules","Builder","splitters","options","removeEmpty","trim","filter","splits","reg","RegExp","findSplits","candidate","classes","splitBySpace","arg40","arg30","svalue","addToClasslist","removeFromClasslist","cls","applyIfElement","elements","fragmentNode","textNode","domResult","render","onNext","onError","onCompleted","OnNext","OnError","_e","OnCompleted","Observable","subscribe","Subscribe","handler","cmd","op","idToStore","states","forLoopVar","label","l","prDomNode","dn","parentsOf","ob","l'","tagName","forEachChild","prVNode","level","init","_nextStoreId","nextStoreId","storeId","_model","observer","uid","subscribers","storeToId","newModel","_modelInitialized","update","_storeDispatch","_cmdHandler","props","patternInput","m","store","_cmds","model","u","makeElmishWithCons","Updated","host","app","gen","baseName","arg20","makeContext","disposeA","distinctUntilChangedCompare","succeed","fail","protect","NumberStyles","getRange","bitsize","style","prefix","AllowHexSpecifier","getRadix","invalidDigits","getInvalidDigits","test","regexMatch","validResponse","umin","umax","computedStyle","elt","getComputedStyle","zIndex","position","iframe","clo3","unsubscribe","sub","items","comparer","this$","hashMap","Map","HashSet__Add_2B595","toStringTag","item","HashSet__Clear","HashSet__Contains_2B595","array","arrayIndex","HashSet__get_Count","HashSet__Remove_2B595","add","clear","delete","thisArg","HashSet__TryFindIndex_2B595","outArg","findIndex","v_1","pattern_matching_result","MapTreeLeaf$2","MapTreeLeaf$2__get_Key","MapTreeLeaf$2__get_Value","MapTreeNode$2","left","right","MapTreeNode$2__get_Left","MapTreeNode$2__get_Right","MapTreeModule_sizeAux","acc_mut","m_mut","m2","MapTreeModule_size","MapTreeModule_iterOpt","f_mut","MapTreeModule_iter","MapTreeModule_MapIterator$2","stack","MapTreeModule_collapseLHS","stack_mut","rest","MapTreeModule_mkIterator","MapTreeModule_current","MapTreeModule_alreadyFinished","MapTreeModule_notStarted","MapTreeModule_mkIEnumerator","MapTreeModule_moveNext","FSharpMap","tree","combineHash","activePatternResult5790","FSharpMap__ComputeHashCode","that","e1","e2","m1","e1c","e2c","shift","idx","pattern","intPart","decimalPart","decimalPartLength","split","thousandGroups","thousands","intPartLength","b1","b2","kvp1","kvp2","Compare","FSharpMap__ContainsKey","FSharpMap__get_Item","arr","MapTreeModule_copyToArray","comparer_mut","k_mut","MapTreeModule_tryFind","MapTreeModule_find","MapTreeModule_mem","element","group","bindNode","bindCtx","disposable","before","toReplace","bindElementCO","_arg2","updateChecked","setInputChecked","inputUnsub","newValue","Value","arg00","toggle","activeClass","inactiveClass","classesWhenTrue","classesWhenFalse","bindSub","active","bindClassToggle","empty","FSharpMap_$ctor","MapTreeModule_empty","delegates","Add","_addHandler","Publish","Trigger","senderOrValue","valueOrUndefined","sender","AddHandler","RemoveHandler","_removeHandler","mk","ofStr","css","on","ElementReady","mkBool","obs","reactElementFun","bindElement","interval","returnVal","_enabled","_isDisposed","_intervalId","_timeoutId","Interval","AutoReset","_elapsed","Elapsed","Enabled","setInterval","setTimeout","clearTimeout","clearInterval","Close","Start","Stop","messageCtor","classNames","content","cs","Html","initialModel","updateCallback","objectArg","_value","subDisposable","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","SetTreeNode$1_$ctor_Z6E7BE5F7","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_countAux","t_mut","t2","SetTreeModule_count","SetTreeModule_mk","hl","hr","t2_1","SetTreeModule_rebalance","t1","t2_3","t_3","t2_4","t1h","t2h","t2_2","matchValue_2","matchValue_3","SetTreeModule_add","c_1","SetTreeModule_empty","SetTreeModule_spliceOutSuccessor","SetTreeModule_remove","SetTreeModule_mem","SetTreeModule_iter","SetTreeModule_SetIterator$1","SetTreeModule_collapseLHS","x2","SetTreeModule_mkIterator","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","l2","x1_3","x2_3","t1_6","x1_4","t2_6","x2_4","matchValue_4","pattern_matching_result_1","t1_7","x1_5","t2_7","x2_5","c_3","c_2","matchValue_5","pattern_matching_result_2","t1_8","x1_6","t2_8","x2_6","pattern_matching_result_3","t1_2","x1","x2_1","pattern_matching_result_4","t1_4","x1_2","x2_2","SetTreeModule_copyToArray","FSharpSet","FSharpSet__ComputeHashCode","FSharpSet__get_Comparer","FSharpSet__get_Tree","FSharpSet__get_Count","FSharpSet__Contains","FSharpSet_$ctor","set$","FSharpSet__Add","FSharpSet__Remove","FSharpSet_Empty","shortcut","hkEvent","plotFactory","plotly","integralRangeStep","step","stop","zero","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","st_1","Enumerator_unfold","delegateArg0","delegateArg1","SetTreeModule_ofArray","SetTreeModule_ofList","ie","e_mut","SetTreeModule_mkFromEnumerator","SetTreeModule_ofSeq","title","initiallyOpenedTitles","Msg","isExpanded","toggleExpandedClass","onClick","themeStore","obsValues","labels","indices","mappedObs","invF","vStore","scoopChoice","themeIsLightStore","Expanded","zippedStore","initState","valueA","valueB","notify","disposeB","theme","properties","plotComponent","isLight","colors","monacoDisposable","onCreated","onChange","initialText","isLightTheme","themeName","resizerDisposable","subId","Id","actionDisposable","addAction","_arg3","onDidChangeDisposable","onDidChangeModelContent","setTheme","themeIsLight","Editor","CharCount","arg0","ev","toAdd","umedia","mql","sidebarSize","SidebarSize","ThemeIsLight","ds","mp","_allMountPoints","createMountPoint","controlBlock","cb","mountElementOnDocument","hasShadyCss","ShadyCSS","nativeShadow","bootstrapper","implementation","createHTMLDocument","closedShadowRootRegistry","_DOMException","DOMException","importPattern","nonConstructedProto","CSSStyleSheet","Promise","reject","replaceSync","$basicStyleSheet","$locations","$adoptersByLocation","proto$2","ConstructedStyleSheet","resolve","checkInvocationCorrectness","self_1","ownerNode","_contents","warn","rejectImports","location","isConnected","restyleAdopter","getAdopterByLocation","configurable","enumerable","cssRules","method","arguments","basic","locations","apply","hasInstance","isCSSStyleSheetInstance","defaultObserverOptions","childList","subtree","$element","$uniqueSheets","$observer","proto$1","Location","readyState","contains","isElementConnected","connect","container","getAdopterContainer","observe","adopt","traverseWebComponents","getAssociatedLocation","disconnect","sheets","locationType","TypeError","every","some","isNonConstructedStyleSheetInstance","arr2","oldUniqueSheets","uniqueSheets","removeChild","_location","removeAdopterLocation","attachAdoptedStyleSheetProperty","ShadowRoot","proto","Element","attach_1","attachShadow","call","mode","documentLocation","addEventListener","bind","getShadowRoot","shadowRoot","instance","isPrototypeOf","adopter","to","deleteRule","clearRules","insertRule","cssText","appendChild","createNodeIterator","NodeFilter","SHOW_ELEMENT","foundNode","FILTER_ACCEPT","FILTER_REJECT","nextNode","styleList","createDocumentFragment","addAdopterLocation","MutationObserver","mutations","mutation","addedNodes","removedNodes","HTMLStyleElement","isExistingAdopter","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","__esModule","definition","globalThis","Function","hmd","prop","hasOwnProperty","scriptUrl","importScripts","currentScript","src","scripts","getElementsByTagName","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}